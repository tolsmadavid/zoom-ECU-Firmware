
zoomECU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b660  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  0800b840  0800b840  0001b840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b8bc  0800b8bc  00020198  2**0
                  CONTENTS
  4 .ARM          00000000  0800b8bc  0800b8bc  00020198  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b8bc  0800b8bc  00020198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b8bc  0800b8bc  0001b8bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b8c0  0800b8c0  0001b8c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000198  20000000  0800b8c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003ae4  20000198  0800ba5c  00020198  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003c7c  0800ba5c  00023c7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY
 12 .debug_line   0001d247  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   0002e40a  00000000  00000000  0003d40f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00005493  00000000  00000000  0006b819  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001f50  00000000  00000000  00070cb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0011b199  00000000  00000000  00072c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001cf8  00000000  00000000  0018dda0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0002d6c2  00000000  00000000  0018fa98  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001bd15a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008380  00000000  00000000  001bd1d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000198 	.word	0x20000198
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b828 	.word	0x0800b828

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000019c 	.word	0x2000019c
 800021c:	0800b828 	.word	0x0800b828

08000220 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000220:	480d      	ldr	r0, [pc, #52]	; (8000258 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000222:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000224:	480d      	ldr	r0, [pc, #52]	; (800025c <LoopForever+0x6>)
  ldr r1, =_edata
 8000226:	490e      	ldr	r1, [pc, #56]	; (8000260 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000228:	4a0e      	ldr	r2, [pc, #56]	; (8000264 <LoopForever+0xe>)
  movs r3, #0
 800022a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800022c:	e002      	b.n	8000234 <LoopCopyDataInit>

0800022e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800022e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000230:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000232:	3304      	adds	r3, #4

08000234 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000234:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000236:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000238:	d3f9      	bcc.n	800022e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800023a:	4a0b      	ldr	r2, [pc, #44]	; (8000268 <LoopForever+0x12>)
  ldr r4, =_ebss
 800023c:	4c0b      	ldr	r4, [pc, #44]	; (800026c <LoopForever+0x16>)
  movs r3, #0
 800023e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000240:	e001      	b.n	8000246 <LoopFillZerobss>

08000242 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000242:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000244:	3204      	adds	r2, #4

08000246 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000246:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000248:	d3fb      	bcc.n	8000242 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800024a:	f00a fd95 	bl	800ad78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800024e:	f00b fab3 	bl	800b7b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000252:	f009 fcd3 	bl	8009bfc <main>

08000256 <LoopForever>:

LoopForever:
    b LoopForever
 8000256:	e7fe      	b.n	8000256 <LoopForever>
  ldr   r0, =_estack
 8000258:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800025c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000260:	20000198 	.word	0x20000198
  ldr r2, =_sidata
 8000264:	0800b8c4 	.word	0x0800b8c4
  ldr r2, =_sbss
 8000268:	20000198 	.word	0x20000198
  ldr r4, =_ebss
 800026c:	20003c7c 	.word	0x20003c7c

08000270 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000270:	e7fe      	b.n	8000270 <ADC1_2_IRQHandler>

08000272 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000272:	b580      	push	{r7, lr}
 8000274:	b082      	sub	sp, #8
 8000276:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000278:	2300      	movs	r3, #0
 800027a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800027c:	2003      	movs	r0, #3
 800027e:	f001 fd23 	bl	8001cc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000282:	200f      	movs	r0, #15
 8000284:	f000 f80e 	bl	80002a4 <HAL_InitTick>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d002      	beq.n	8000294 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800028e:	2301      	movs	r3, #1
 8000290:	71fb      	strb	r3, [r7, #7]
 8000292:	e001      	b.n	8000298 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000294:	f00a fa24 	bl	800a6e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000298:	79fb      	ldrb	r3, [r7, #7]

}
 800029a:	4618      	mov	r0, r3
 800029c:	3708      	adds	r7, #8
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
	...

080002a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b084      	sub	sp, #16
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80002ac:	2300      	movs	r3, #0
 80002ae:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80002b0:	4b16      	ldr	r3, [pc, #88]	; (800030c <HAL_InitTick+0x68>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d022      	beq.n	80002fe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80002b8:	4b15      	ldr	r3, [pc, #84]	; (8000310 <HAL_InitTick+0x6c>)
 80002ba:	681a      	ldr	r2, [r3, #0]
 80002bc:	4b13      	ldr	r3, [pc, #76]	; (800030c <HAL_InitTick+0x68>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80002c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80002c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80002cc:	4618      	mov	r0, r3
 80002ce:	f001 fd2e 	bl	8001d2e <HAL_SYSTICK_Config>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d10f      	bne.n	80002f8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	2b0f      	cmp	r3, #15
 80002dc:	d809      	bhi.n	80002f2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80002de:	2200      	movs	r2, #0
 80002e0:	6879      	ldr	r1, [r7, #4]
 80002e2:	f04f 30ff 	mov.w	r0, #4294967295
 80002e6:	f001 fcfa 	bl	8001cde <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80002ea:	4a0a      	ldr	r2, [pc, #40]	; (8000314 <HAL_InitTick+0x70>)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	6013      	str	r3, [r2, #0]
 80002f0:	e007      	b.n	8000302 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80002f2:	2301      	movs	r3, #1
 80002f4:	73fb      	strb	r3, [r7, #15]
 80002f6:	e004      	b.n	8000302 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80002f8:	2301      	movs	r3, #1
 80002fa:	73fb      	strb	r3, [r7, #15]
 80002fc:	e001      	b.n	8000302 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80002fe:	2301      	movs	r3, #1
 8000300:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000302:	7bfb      	ldrb	r3, [r7, #15]
}
 8000304:	4618      	mov	r0, r3
 8000306:	3710      	adds	r7, #16
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	20000004 	.word	0x20000004
 8000310:	2000011c 	.word	0x2000011c
 8000314:	20000000 	.word	0x20000000

08000318 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800031c:	4b05      	ldr	r3, [pc, #20]	; (8000334 <HAL_IncTick+0x1c>)
 800031e:	681a      	ldr	r2, [r3, #0]
 8000320:	4b05      	ldr	r3, [pc, #20]	; (8000338 <HAL_IncTick+0x20>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4413      	add	r3, r2
 8000326:	4a03      	ldr	r2, [pc, #12]	; (8000334 <HAL_IncTick+0x1c>)
 8000328:	6013      	str	r3, [r2, #0]
}
 800032a:	bf00      	nop
 800032c:	46bd      	mov	sp, r7
 800032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000332:	4770      	bx	lr
 8000334:	20001cf8 	.word	0x20001cf8
 8000338:	20000004 	.word	0x20000004

0800033c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
  return uwTick;
 8000340:	4b03      	ldr	r3, [pc, #12]	; (8000350 <HAL_GetTick+0x14>)
 8000342:	681b      	ldr	r3, [r3, #0]
}
 8000344:	4618      	mov	r0, r3
 8000346:	46bd      	mov	sp, r7
 8000348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop
 8000350:	20001cf8 	.word	0x20001cf8

08000354 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000354:	b480      	push	{r7}
 8000356:	b083      	sub	sp, #12
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
 800035c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	689b      	ldr	r3, [r3, #8]
 8000362:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000366:	683b      	ldr	r3, [r7, #0]
 8000368:	431a      	orrs	r2, r3
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	609a      	str	r2, [r3, #8]
}
 800036e:	bf00      	nop
 8000370:	370c      	adds	r7, #12
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr

0800037a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800037a:	b480      	push	{r7}
 800037c:	b083      	sub	sp, #12
 800037e:	af00      	add	r7, sp, #0
 8000380:	6078      	str	r0, [r7, #4]
 8000382:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	689b      	ldr	r3, [r3, #8]
 8000388:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800038c:	683b      	ldr	r3, [r7, #0]
 800038e:	431a      	orrs	r2, r3
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	609a      	str	r2, [r3, #8]
}
 8000394:	bf00      	nop
 8000396:	370c      	adds	r7, #12
 8000398:	46bd      	mov	sp, r7
 800039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039e:	4770      	bx	lr

080003a0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	689b      	ldr	r3, [r3, #8]
 80003ac:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80003b0:	4618      	mov	r0, r3
 80003b2:	370c      	adds	r7, #12
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr

080003bc <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80003bc:	b490      	push	{r4, r7}
 80003be:	b084      	sub	sp, #16
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	60f8      	str	r0, [r7, #12]
 80003c4:	60b9      	str	r1, [r7, #8]
 80003c6:	607a      	str	r2, [r7, #4]
 80003c8:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	3360      	adds	r3, #96	; 0x60
 80003ce:	461a      	mov	r2, r3
 80003d0:	68bb      	ldr	r3, [r7, #8]
 80003d2:	009b      	lsls	r3, r3, #2
 80003d4:	4413      	add	r3, r2
 80003d6:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80003d8:	6822      	ldr	r2, [r4, #0]
 80003da:	4b08      	ldr	r3, [pc, #32]	; (80003fc <LL_ADC_SetOffset+0x40>)
 80003dc:	4013      	ands	r3, r2
 80003de:	687a      	ldr	r2, [r7, #4]
 80003e0:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80003e4:	683a      	ldr	r2, [r7, #0]
 80003e6:	430a      	orrs	r2, r1
 80003e8:	4313      	orrs	r3, r2
 80003ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80003ee:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80003f0:	bf00      	nop
 80003f2:	3710      	adds	r7, #16
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bc90      	pop	{r4, r7}
 80003f8:	4770      	bx	lr
 80003fa:	bf00      	nop
 80003fc:	03fff000 	.word	0x03fff000

08000400 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000400:	b490      	push	{r4, r7}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
 8000408:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	3360      	adds	r3, #96	; 0x60
 800040e:	461a      	mov	r2, r3
 8000410:	683b      	ldr	r3, [r7, #0]
 8000412:	009b      	lsls	r3, r3, #2
 8000414:	4413      	add	r3, r2
 8000416:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000418:	6823      	ldr	r3, [r4, #0]
 800041a:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800041e:	4618      	mov	r0, r3
 8000420:	3708      	adds	r7, #8
 8000422:	46bd      	mov	sp, r7
 8000424:	bc90      	pop	{r4, r7}
 8000426:	4770      	bx	lr

08000428 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000428:	b490      	push	{r4, r7}
 800042a:	b084      	sub	sp, #16
 800042c:	af00      	add	r7, sp, #0
 800042e:	60f8      	str	r0, [r7, #12]
 8000430:	60b9      	str	r1, [r7, #8]
 8000432:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	3360      	adds	r3, #96	; 0x60
 8000438:	461a      	mov	r2, r3
 800043a:	68bb      	ldr	r3, [r7, #8]
 800043c:	009b      	lsls	r3, r3, #2
 800043e:	4413      	add	r3, r2
 8000440:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000442:	6823      	ldr	r3, [r4, #0]
 8000444:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	4313      	orrs	r3, r2
 800044c:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800044e:	bf00      	nop
 8000450:	3710      	adds	r7, #16
 8000452:	46bd      	mov	sp, r7
 8000454:	bc90      	pop	{r4, r7}
 8000456:	4770      	bx	lr

08000458 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000458:	b490      	push	{r4, r7}
 800045a:	b084      	sub	sp, #16
 800045c:	af00      	add	r7, sp, #0
 800045e:	60f8      	str	r0, [r7, #12]
 8000460:	60b9      	str	r1, [r7, #8]
 8000462:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	3360      	adds	r3, #96	; 0x60
 8000468:	461a      	mov	r2, r3
 800046a:	68bb      	ldr	r3, [r7, #8]
 800046c:	009b      	lsls	r3, r3, #2
 800046e:	4413      	add	r3, r2
 8000470:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000472:	6823      	ldr	r3, [r4, #0]
 8000474:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	4313      	orrs	r3, r2
 800047c:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800047e:	bf00      	nop
 8000480:	3710      	adds	r7, #16
 8000482:	46bd      	mov	sp, r7
 8000484:	bc90      	pop	{r4, r7}
 8000486:	4770      	bx	lr

08000488 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000488:	b490      	push	{r4, r7}
 800048a:	b084      	sub	sp, #16
 800048c:	af00      	add	r7, sp, #0
 800048e:	60f8      	str	r0, [r7, #12]
 8000490:	60b9      	str	r1, [r7, #8]
 8000492:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	3360      	adds	r3, #96	; 0x60
 8000498:	461a      	mov	r2, r3
 800049a:	68bb      	ldr	r3, [r7, #8]
 800049c:	009b      	lsls	r3, r3, #2
 800049e:	4413      	add	r3, r2
 80004a0:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80004a2:	6823      	ldr	r3, [r4, #0]
 80004a4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	4313      	orrs	r3, r2
 80004ac:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80004ae:	bf00      	nop
 80004b0:	3710      	adds	r7, #16
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bc90      	pop	{r4, r7}
 80004b6:	4770      	bx	lr

080004b8 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	695b      	ldr	r3, [r3, #20]
 80004c6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80004ca:	683b      	ldr	r3, [r7, #0]
 80004cc:	431a      	orrs	r2, r3
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	615a      	str	r2, [r3, #20]
}
 80004d2:	bf00      	nop
 80004d4:	370c      	adds	r7, #12
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr

080004de <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80004de:	b490      	push	{r4, r7}
 80004e0:	b084      	sub	sp, #16
 80004e2:	af00      	add	r7, sp, #0
 80004e4:	60f8      	str	r0, [r7, #12]
 80004e6:	60b9      	str	r1, [r7, #8]
 80004e8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	3330      	adds	r3, #48	; 0x30
 80004ee:	461a      	mov	r2, r3
 80004f0:	68bb      	ldr	r3, [r7, #8]
 80004f2:	0a1b      	lsrs	r3, r3, #8
 80004f4:	009b      	lsls	r3, r3, #2
 80004f6:	f003 030c 	and.w	r3, r3, #12
 80004fa:	4413      	add	r3, r2
 80004fc:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80004fe:	6822      	ldr	r2, [r4, #0]
 8000500:	68bb      	ldr	r3, [r7, #8]
 8000502:	f003 031f 	and.w	r3, r3, #31
 8000506:	211f      	movs	r1, #31
 8000508:	fa01 f303 	lsl.w	r3, r1, r3
 800050c:	43db      	mvns	r3, r3
 800050e:	401a      	ands	r2, r3
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	0e9b      	lsrs	r3, r3, #26
 8000514:	f003 011f 	and.w	r1, r3, #31
 8000518:	68bb      	ldr	r3, [r7, #8]
 800051a:	f003 031f 	and.w	r3, r3, #31
 800051e:	fa01 f303 	lsl.w	r3, r1, r3
 8000522:	4313      	orrs	r3, r2
 8000524:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000526:	bf00      	nop
 8000528:	3710      	adds	r7, #16
 800052a:	46bd      	mov	sp, r7
 800052c:	bc90      	pop	{r4, r7}
 800052e:	4770      	bx	lr

08000530 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000530:	b490      	push	{r4, r7}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	60f8      	str	r0, [r7, #12]
 8000538:	60b9      	str	r1, [r7, #8]
 800053a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	3314      	adds	r3, #20
 8000540:	461a      	mov	r2, r3
 8000542:	68bb      	ldr	r3, [r7, #8]
 8000544:	0e5b      	lsrs	r3, r3, #25
 8000546:	009b      	lsls	r3, r3, #2
 8000548:	f003 0304 	and.w	r3, r3, #4
 800054c:	4413      	add	r3, r2
 800054e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000550:	6822      	ldr	r2, [r4, #0]
 8000552:	68bb      	ldr	r3, [r7, #8]
 8000554:	0d1b      	lsrs	r3, r3, #20
 8000556:	f003 031f 	and.w	r3, r3, #31
 800055a:	2107      	movs	r1, #7
 800055c:	fa01 f303 	lsl.w	r3, r1, r3
 8000560:	43db      	mvns	r3, r3
 8000562:	401a      	ands	r2, r3
 8000564:	68bb      	ldr	r3, [r7, #8]
 8000566:	0d1b      	lsrs	r3, r3, #20
 8000568:	f003 031f 	and.w	r3, r3, #31
 800056c:	6879      	ldr	r1, [r7, #4]
 800056e:	fa01 f303 	lsl.w	r3, r1, r3
 8000572:	4313      	orrs	r3, r2
 8000574:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000576:	bf00      	nop
 8000578:	3710      	adds	r7, #16
 800057a:	46bd      	mov	sp, r7
 800057c:	bc90      	pop	{r4, r7}
 800057e:	4770      	bx	lr

08000580 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000598:	43db      	mvns	r3, r3
 800059a:	401a      	ands	r2, r3
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	f003 0318 	and.w	r3, r3, #24
 80005a2:	4908      	ldr	r1, [pc, #32]	; (80005c4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80005a4:	40d9      	lsrs	r1, r3
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	400b      	ands	r3, r1
 80005aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80005ae:	431a      	orrs	r2, r3
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80005b6:	bf00      	nop
 80005b8:	3714      	adds	r7, #20
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	0007ffff 	.word	0x0007ffff

080005c8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	689b      	ldr	r3, [r3, #8]
 80005d4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80005d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80005dc:	687a      	ldr	r2, [r7, #4]
 80005de:	6093      	str	r3, [r2, #8]
}
 80005e0:	bf00      	nop
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr

080005ec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	689b      	ldr	r3, [r3, #8]
 80005f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80005fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000600:	d101      	bne.n	8000606 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000602:	2301      	movs	r3, #1
 8000604:	e000      	b.n	8000608 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000606:	2300      	movs	r3, #0
}
 8000608:	4618      	mov	r0, r3
 800060a:	370c      	adds	r7, #12
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr

08000614 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	689b      	ldr	r3, [r3, #8]
 8000620:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000624:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000628:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000630:	bf00      	nop
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr

0800063c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	689b      	ldr	r3, [r3, #8]
 8000648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000650:	d101      	bne.n	8000656 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000652:	2301      	movs	r3, #1
 8000654:	e000      	b.n	8000658 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000656:	2300      	movs	r3, #0
}
 8000658:	4618      	mov	r0, r3
 800065a:	370c      	adds	r7, #12
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr

08000664 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	689b      	ldr	r3, [r3, #8]
 8000670:	f003 0301 	and.w	r3, r3, #1
 8000674:	2b01      	cmp	r3, #1
 8000676:	d101      	bne.n	800067c <LL_ADC_IsEnabled+0x18>
 8000678:	2301      	movs	r3, #1
 800067a:	e000      	b.n	800067e <LL_ADC_IsEnabled+0x1a>
 800067c:	2300      	movs	r3, #0
}
 800067e:	4618      	mov	r0, r3
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr

0800068a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800068a:	b480      	push	{r7}
 800068c:	b083      	sub	sp, #12
 800068e:	af00      	add	r7, sp, #0
 8000690:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	689b      	ldr	r3, [r3, #8]
 8000696:	f003 0304 	and.w	r3, r3, #4
 800069a:	2b04      	cmp	r3, #4
 800069c:	d101      	bne.n	80006a2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800069e:	2301      	movs	r3, #1
 80006a0:	e000      	b.n	80006a4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80006a2:	2300      	movs	r3, #0
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	689b      	ldr	r3, [r3, #8]
 80006bc:	f003 0308 	and.w	r3, r3, #8
 80006c0:	2b08      	cmp	r3, #8
 80006c2:	d101      	bne.n	80006c8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80006c4:	2301      	movs	r3, #1
 80006c6:	e000      	b.n	80006ca <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80006c8:	2300      	movs	r3, #0
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	370c      	adds	r7, #12
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
	...

080006d8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80006d8:	b590      	push	{r4, r7, lr}
 80006da:	b089      	sub	sp, #36	; 0x24
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80006e0:	2300      	movs	r3, #0
 80006e2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d101      	bne.n	80006f2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80006ee:	2301      	movs	r3, #1
 80006f0:	e1ad      	b.n	8000a4e <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	695b      	ldr	r3, [r3, #20]
 80006f6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d109      	bne.n	8000714 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000700:	6878      	ldr	r0, [r7, #4]
 8000702:	f00a f817 	bl	800a734 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	2200      	movs	r2, #0
 800070a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2200      	movs	r2, #0
 8000710:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4618      	mov	r0, r3
 800071a:	f7ff ff67 	bl	80005ec <LL_ADC_IsDeepPowerDownEnabled>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d004      	beq.n	800072e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4618      	mov	r0, r3
 800072a:	f7ff ff4d 	bl	80005c8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4618      	mov	r0, r3
 8000734:	f7ff ff82 	bl	800063c <LL_ADC_IsInternalRegulatorEnabled>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d113      	bne.n	8000766 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff ff66 	bl	8000614 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000748:	4b9e      	ldr	r3, [pc, #632]	; (80009c4 <HAL_ADC_Init+0x2ec>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	099b      	lsrs	r3, r3, #6
 800074e:	4a9e      	ldr	r2, [pc, #632]	; (80009c8 <HAL_ADC_Init+0x2f0>)
 8000750:	fba2 2303 	umull	r2, r3, r2, r3
 8000754:	099b      	lsrs	r3, r3, #6
 8000756:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000758:	e002      	b.n	8000760 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800075a:	68bb      	ldr	r3, [r7, #8]
 800075c:	3b01      	subs	r3, #1
 800075e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d1f9      	bne.n	800075a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4618      	mov	r0, r3
 800076c:	f7ff ff66 	bl	800063c <LL_ADC_IsInternalRegulatorEnabled>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d10d      	bne.n	8000792 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800077a:	f043 0210 	orr.w	r2, r3, #16
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000786:	f043 0201 	orr.w	r2, r3, #1
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800078e:	2301      	movs	r3, #1
 8000790:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff ff77 	bl	800068a <LL_ADC_REG_IsConversionOngoing>
 800079c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80007a2:	f003 0310 	and.w	r3, r3, #16
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	f040 8148 	bne.w	8000a3c <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	f040 8144 	bne.w	8000a3c <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80007b8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80007bc:	f043 0202 	orr.w	r2, r3, #2
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff ff4b 	bl	8000664 <LL_ADC_IsEnabled>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d141      	bne.n	8000858 <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80007dc:	d004      	beq.n	80007e8 <HAL_ADC_Init+0x110>
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a7a      	ldr	r2, [pc, #488]	; (80009cc <HAL_ADC_Init+0x2f4>)
 80007e4:	4293      	cmp	r3, r2
 80007e6:	d10f      	bne.n	8000808 <HAL_ADC_Init+0x130>
 80007e8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80007ec:	f7ff ff3a 	bl	8000664 <LL_ADC_IsEnabled>
 80007f0:	4604      	mov	r4, r0
 80007f2:	4876      	ldr	r0, [pc, #472]	; (80009cc <HAL_ADC_Init+0x2f4>)
 80007f4:	f7ff ff36 	bl	8000664 <LL_ADC_IsEnabled>
 80007f8:	4603      	mov	r3, r0
 80007fa:	4323      	orrs	r3, r4
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	bf0c      	ite	eq
 8000800:	2301      	moveq	r3, #1
 8000802:	2300      	movne	r3, #0
 8000804:	b2db      	uxtb	r3, r3
 8000806:	e012      	b.n	800082e <HAL_ADC_Init+0x156>
 8000808:	4871      	ldr	r0, [pc, #452]	; (80009d0 <HAL_ADC_Init+0x2f8>)
 800080a:	f7ff ff2b 	bl	8000664 <LL_ADC_IsEnabled>
 800080e:	4604      	mov	r4, r0
 8000810:	4870      	ldr	r0, [pc, #448]	; (80009d4 <HAL_ADC_Init+0x2fc>)
 8000812:	f7ff ff27 	bl	8000664 <LL_ADC_IsEnabled>
 8000816:	4603      	mov	r3, r0
 8000818:	431c      	orrs	r4, r3
 800081a:	486f      	ldr	r0, [pc, #444]	; (80009d8 <HAL_ADC_Init+0x300>)
 800081c:	f7ff ff22 	bl	8000664 <LL_ADC_IsEnabled>
 8000820:	4603      	mov	r3, r0
 8000822:	4323      	orrs	r3, r4
 8000824:	2b00      	cmp	r3, #0
 8000826:	bf0c      	ite	eq
 8000828:	2301      	moveq	r3, #1
 800082a:	2300      	movne	r3, #0
 800082c:	b2db      	uxtb	r3, r3
 800082e:	2b00      	cmp	r3, #0
 8000830:	d012      	beq.n	8000858 <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800083a:	d004      	beq.n	8000846 <HAL_ADC_Init+0x16e>
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a62      	ldr	r2, [pc, #392]	; (80009cc <HAL_ADC_Init+0x2f4>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d101      	bne.n	800084a <HAL_ADC_Init+0x172>
 8000846:	4a65      	ldr	r2, [pc, #404]	; (80009dc <HAL_ADC_Init+0x304>)
 8000848:	e000      	b.n	800084c <HAL_ADC_Init+0x174>
 800084a:	4a65      	ldr	r2, [pc, #404]	; (80009e0 <HAL_ADC_Init+0x308>)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	685b      	ldr	r3, [r3, #4]
 8000850:	4619      	mov	r1, r3
 8000852:	4610      	mov	r0, r2
 8000854:	f7ff fd7e 	bl	8000354 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	7f5b      	ldrb	r3, [r3, #29]
 800085c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000862:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8000868:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800086e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000876:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000878:	4313      	orrs	r3, r2
 800087a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000882:	2b01      	cmp	r3, #1
 8000884:	d106      	bne.n	8000894 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800088a:	3b01      	subs	r3, #1
 800088c:	045b      	lsls	r3, r3, #17
 800088e:	69ba      	ldr	r2, [r7, #24]
 8000890:	4313      	orrs	r3, r2
 8000892:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000898:	2b00      	cmp	r3, #0
 800089a:	d009      	beq.n	80008b0 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008a0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80008aa:	69ba      	ldr	r2, [r7, #24]
 80008ac:	4313      	orrs	r3, r2
 80008ae:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	68da      	ldr	r2, [r3, #12]
 80008b6:	4b4b      	ldr	r3, [pc, #300]	; (80009e4 <HAL_ADC_Init+0x30c>)
 80008b8:	4013      	ands	r3, r2
 80008ba:	687a      	ldr	r2, [r7, #4]
 80008bc:	6812      	ldr	r2, [r2, #0]
 80008be:	69b9      	ldr	r1, [r7, #24]
 80008c0:	430b      	orrs	r3, r1
 80008c2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	691b      	ldr	r3, [r3, #16]
 80008ca:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	430a      	orrs	r2, r1
 80008d8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff fed3 	bl	800068a <LL_ADC_REG_IsConversionOngoing>
 80008e4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff fee0 	bl	80006b0 <LL_ADC_INJ_IsConversionOngoing>
 80008f0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80008f2:	693b      	ldr	r3, [r7, #16]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d17f      	bne.n	80009f8 <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d17c      	bne.n	80009f8 <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000902:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800090a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800090c:	4313      	orrs	r3, r2
 800090e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	68db      	ldr	r3, [r3, #12]
 8000916:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800091a:	f023 0302 	bic.w	r3, r3, #2
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	6812      	ldr	r2, [r2, #0]
 8000922:	69b9      	ldr	r1, [r7, #24]
 8000924:	430b      	orrs	r3, r1
 8000926:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	691b      	ldr	r3, [r3, #16]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d017      	beq.n	8000960 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	691a      	ldr	r2, [r3, #16]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800093e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000948:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800094c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000950:	687a      	ldr	r2, [r7, #4]
 8000952:	6911      	ldr	r1, [r2, #16]
 8000954:	687a      	ldr	r2, [r7, #4]
 8000956:	6812      	ldr	r2, [r2, #0]
 8000958:	430b      	orrs	r3, r1
 800095a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800095e:	e013      	b.n	8000988 <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	691a      	ldr	r2, [r3, #16]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800096e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000978:	687a      	ldr	r2, [r7, #4]
 800097a:	6812      	ldr	r2, [r2, #0]
 800097c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000980:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000984:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800098e:	2b01      	cmp	r3, #1
 8000990:	d12a      	bne.n	80009e8 <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	691b      	ldr	r3, [r3, #16]
 8000998:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800099c:	f023 0304 	bic.w	r3, r3, #4
 80009a0:	687a      	ldr	r2, [r7, #4]
 80009a2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80009a4:	687a      	ldr	r2, [r7, #4]
 80009a6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80009a8:	4311      	orrs	r1, r2
 80009aa:	687a      	ldr	r2, [r7, #4]
 80009ac:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80009ae:	4311      	orrs	r1, r2
 80009b0:	687a      	ldr	r2, [r7, #4]
 80009b2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80009b4:	430a      	orrs	r2, r1
 80009b6:	431a      	orrs	r2, r3
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f042 0201 	orr.w	r2, r2, #1
 80009c0:	611a      	str	r2, [r3, #16]
 80009c2:	e019      	b.n	80009f8 <HAL_ADC_Init+0x320>
 80009c4:	2000011c 	.word	0x2000011c
 80009c8:	053e2d63 	.word	0x053e2d63
 80009cc:	50000100 	.word	0x50000100
 80009d0:	50000400 	.word	0x50000400
 80009d4:	50000500 	.word	0x50000500
 80009d8:	50000600 	.word	0x50000600
 80009dc:	50000300 	.word	0x50000300
 80009e0:	50000700 	.word	0x50000700
 80009e4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	691a      	ldr	r2, [r3, #16]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f022 0201 	bic.w	r2, r2, #1
 80009f6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	695b      	ldr	r3, [r3, #20]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d10c      	bne.n	8000a1a <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f023 010f 	bic.w	r1, r3, #15
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6a1b      	ldr	r3, [r3, #32]
 8000a0e:	1e5a      	subs	r2, r3, #1
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	430a      	orrs	r2, r1
 8000a16:	631a      	str	r2, [r3, #48]	; 0x30
 8000a18:	e007      	b.n	8000a2a <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f022 020f 	bic.w	r2, r2, #15
 8000a28:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a2e:	f023 0303 	bic.w	r3, r3, #3
 8000a32:	f043 0201 	orr.w	r2, r3, #1
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	65da      	str	r2, [r3, #92]	; 0x5c
 8000a3a:	e007      	b.n	8000a4c <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a40:	f043 0210 	orr.w	r2, r3, #16
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000a4c:	7ffb      	ldrb	r3, [r7, #31]
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3724      	adds	r7, #36	; 0x24
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd90      	pop	{r4, r7, pc}
 8000a56:	bf00      	nop

08000a58 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b0a6      	sub	sp, #152	; 0x98
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a62:	2300      	movs	r3, #0
 8000a64:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	d101      	bne.n	8000a7a <HAL_ADC_ConfigChannel+0x22>
 8000a76:	2302      	movs	r3, #2
 8000a78:	e38e      	b.n	8001198 <HAL_ADC_ConfigChannel+0x740>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff fdff 	bl	800068a <LL_ADC_REG_IsConversionOngoing>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	f040 836f 	bne.w	8001172 <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	6818      	ldr	r0, [r3, #0]
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	6859      	ldr	r1, [r3, #4]
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	f7ff fd1c 	bl	80004de <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff fded 	bl	800068a <LL_ADC_REG_IsConversionOngoing>
 8000ab0:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff fdf9 	bl	80006b0 <LL_ADC_INJ_IsConversionOngoing>
 8000abe:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000ac2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	f040 817b 	bne.w	8000dc2 <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000acc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	f040 8176 	bne.w	8000dc2 <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	689b      	ldr	r3, [r3, #8]
 8000ada:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000ade:	d10f      	bne.n	8000b00 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	6818      	ldr	r0, [r3, #0]
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2200      	movs	r2, #0
 8000aea:	4619      	mov	r1, r3
 8000aec:	f7ff fd20 	bl	8000530 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff fcdd 	bl	80004b8 <LL_ADC_SetSamplingTimeCommonConfig>
 8000afe:	e00e      	b.n	8000b1e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6818      	ldr	r0, [r3, #0]
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	6819      	ldr	r1, [r3, #0]
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	689b      	ldr	r3, [r3, #8]
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	f7ff fd0f 	bl	8000530 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	2100      	movs	r1, #0
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff fccd 	bl	80004b8 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	695a      	ldr	r2, [r3, #20]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	08db      	lsrs	r3, r3, #3
 8000b2a:	f003 0303 	and.w	r3, r3, #3
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	fa02 f303 	lsl.w	r3, r2, r3
 8000b34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	691b      	ldr	r3, [r3, #16]
 8000b3c:	2b04      	cmp	r3, #4
 8000b3e:	d022      	beq.n	8000b86 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	6818      	ldr	r0, [r3, #0]
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	6919      	ldr	r1, [r3, #16]
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000b50:	f7ff fc34 	bl	80003bc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	6818      	ldr	r0, [r3, #0]
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	6919      	ldr	r1, [r3, #16]
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	461a      	mov	r2, r3
 8000b62:	f7ff fc79 	bl	8000458 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6818      	ldr	r0, [r3, #0]
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	6919      	ldr	r1, [r3, #16]
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	7f1b      	ldrb	r3, [r3, #28]
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d102      	bne.n	8000b7c <HAL_ADC_ConfigChannel+0x124>
 8000b76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b7a:	e000      	b.n	8000b7e <HAL_ADC_ConfigChannel+0x126>
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	461a      	mov	r2, r3
 8000b80:	f7ff fc82 	bl	8000488 <LL_ADC_SetOffsetSaturation>
 8000b84:	e11d      	b.n	8000dc2 <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff fc37 	bl	8000400 <LL_ADC_GetOffsetChannel>
 8000b92:	4603      	mov	r3, r0
 8000b94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d10a      	bne.n	8000bb2 <HAL_ADC_ConfigChannel+0x15a>
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f7ff fc2c 	bl	8000400 <LL_ADC_GetOffsetChannel>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	0e9b      	lsrs	r3, r3, #26
 8000bac:	f003 021f 	and.w	r2, r3, #31
 8000bb0:	e012      	b.n	8000bd8 <HAL_ADC_ConfigChannel+0x180>
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff fc21 	bl	8000400 <LL_ADC_GetOffsetChannel>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bc4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000bc8:	fa93 f3a3 	rbit	r3, r3
 8000bcc:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000bce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000bd0:	fab3 f383 	clz	r3, r3
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d105      	bne.n	8000bf0 <HAL_ADC_ConfigChannel+0x198>
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	0e9b      	lsrs	r3, r3, #26
 8000bea:	f003 031f 	and.w	r3, r3, #31
 8000bee:	e00a      	b.n	8000c06 <HAL_ADC_ConfigChannel+0x1ae>
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bf6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000bf8:	fa93 f3a3 	rbit	r3, r3
 8000bfc:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8000bfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000c00:	fab3 f383 	clz	r3, r3
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d106      	bne.n	8000c18 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2100      	movs	r1, #0
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff fc08 	bl	8000428 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff fbee 	bl	8000400 <LL_ADC_GetOffsetChannel>
 8000c24:	4603      	mov	r3, r0
 8000c26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d10a      	bne.n	8000c44 <HAL_ADC_ConfigChannel+0x1ec>
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	2101      	movs	r1, #1
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff fbe3 	bl	8000400 <LL_ADC_GetOffsetChannel>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	0e9b      	lsrs	r3, r3, #26
 8000c3e:	f003 021f 	and.w	r2, r3, #31
 8000c42:	e010      	b.n	8000c66 <HAL_ADC_ConfigChannel+0x20e>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2101      	movs	r1, #1
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff fbd8 	bl	8000400 <LL_ADC_GetOffsetChannel>
 8000c50:	4603      	mov	r3, r0
 8000c52:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000c56:	fa93 f3a3 	rbit	r3, r3
 8000c5a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8000c5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000c5e:	fab3 f383 	clz	r3, r3
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	461a      	mov	r2, r3
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d105      	bne.n	8000c7e <HAL_ADC_ConfigChannel+0x226>
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	0e9b      	lsrs	r3, r3, #26
 8000c78:	f003 031f 	and.w	r3, r3, #31
 8000c7c:	e00a      	b.n	8000c94 <HAL_ADC_ConfigChannel+0x23c>
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000c86:	fa93 f3a3 	rbit	r3, r3
 8000c8a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8000c8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c8e:	fab3 f383 	clz	r3, r3
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d106      	bne.n	8000ca6 <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2101      	movs	r1, #1
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff fbc1 	bl	8000428 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	2102      	movs	r1, #2
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff fba7 	bl	8000400 <LL_ADC_GetOffsetChannel>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d10a      	bne.n	8000cd2 <HAL_ADC_ConfigChannel+0x27a>
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2102      	movs	r1, #2
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff fb9c 	bl	8000400 <LL_ADC_GetOffsetChannel>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	0e9b      	lsrs	r3, r3, #26
 8000ccc:	f003 021f 	and.w	r2, r3, #31
 8000cd0:	e010      	b.n	8000cf4 <HAL_ADC_ConfigChannel+0x29c>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	2102      	movs	r1, #2
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff fb91 	bl	8000400 <LL_ADC_GetOffsetChannel>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ce2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000ce4:	fa93 f3a3 	rbit	r3, r3
 8000ce8:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8000cea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000cec:	fab3 f383 	clz	r3, r3
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d105      	bne.n	8000d0c <HAL_ADC_ConfigChannel+0x2b4>
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	0e9b      	lsrs	r3, r3, #26
 8000d06:	f003 031f 	and.w	r3, r3, #31
 8000d0a:	e00a      	b.n	8000d22 <HAL_ADC_ConfigChannel+0x2ca>
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000d14:	fa93 f3a3 	rbit	r3, r3
 8000d18:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8000d1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d1c:	fab3 f383 	clz	r3, r3
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d106      	bne.n	8000d34 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2102      	movs	r1, #2
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff fb7a 	bl	8000428 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2103      	movs	r1, #3
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff fb60 	bl	8000400 <LL_ADC_GetOffsetChannel>
 8000d40:	4603      	mov	r3, r0
 8000d42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d10a      	bne.n	8000d60 <HAL_ADC_ConfigChannel+0x308>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	2103      	movs	r1, #3
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff fb55 	bl	8000400 <LL_ADC_GetOffsetChannel>
 8000d56:	4603      	mov	r3, r0
 8000d58:	0e9b      	lsrs	r3, r3, #26
 8000d5a:	f003 021f 	and.w	r2, r3, #31
 8000d5e:	e010      	b.n	8000d82 <HAL_ADC_ConfigChannel+0x32a>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2103      	movs	r1, #3
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff fb4a 	bl	8000400 <LL_ADC_GetOffsetChannel>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d72:	fa93 f3a3 	rbit	r3, r3
 8000d76:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8000d78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d7a:	fab3 f383 	clz	r3, r3
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	461a      	mov	r2, r3
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d105      	bne.n	8000d9a <HAL_ADC_ConfigChannel+0x342>
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	0e9b      	lsrs	r3, r3, #26
 8000d94:	f003 031f 	and.w	r3, r3, #31
 8000d98:	e00a      	b.n	8000db0 <HAL_ADC_ConfigChannel+0x358>
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000da0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000da2:	fa93 f3a3 	rbit	r3, r3
 8000da6:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8000da8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000daa:	fab3 f383 	clz	r3, r3
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d106      	bne.n	8000dc2 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2200      	movs	r2, #0
 8000dba:	2103      	movs	r1, #3
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff fb33 	bl	8000428 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fc4c 	bl	8000664 <LL_ADC_IsEnabled>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	f040 810c 	bne.w	8000fec <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6818      	ldr	r0, [r3, #0]
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	6819      	ldr	r1, [r3, #0]
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	461a      	mov	r2, r3
 8000de2:	f7ff fbcd 	bl	8000580 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	68db      	ldr	r3, [r3, #12]
 8000dea:	4aaf      	ldr	r2, [pc, #700]	; (80010a8 <HAL_ADC_ConfigChannel+0x650>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	f040 80fd 	bne.w	8000fec <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d10b      	bne.n	8000e1a <HAL_ADC_ConfigChannel+0x3c2>
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	0e9b      	lsrs	r3, r3, #26
 8000e08:	3301      	adds	r3, #1
 8000e0a:	f003 031f 	and.w	r3, r3, #31
 8000e0e:	2b09      	cmp	r3, #9
 8000e10:	bf94      	ite	ls
 8000e12:	2301      	movls	r3, #1
 8000e14:	2300      	movhi	r3, #0
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	e012      	b.n	8000e40 <HAL_ADC_ConfigChannel+0x3e8>
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e22:	fa93 f3a3 	rbit	r3, r3
 8000e26:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8000e28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e2a:	fab3 f383 	clz	r3, r3
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	3301      	adds	r3, #1
 8000e32:	f003 031f 	and.w	r3, r3, #31
 8000e36:	2b09      	cmp	r3, #9
 8000e38:	bf94      	ite	ls
 8000e3a:	2301      	movls	r3, #1
 8000e3c:	2300      	movhi	r3, #0
 8000e3e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d064      	beq.n	8000f0e <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d107      	bne.n	8000e60 <HAL_ADC_ConfigChannel+0x408>
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	0e9b      	lsrs	r3, r3, #26
 8000e56:	3301      	adds	r3, #1
 8000e58:	069b      	lsls	r3, r3, #26
 8000e5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000e5e:	e00e      	b.n	8000e7e <HAL_ADC_ConfigChannel+0x426>
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e68:	fa93 f3a3 	rbit	r3, r3
 8000e6c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8000e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e70:	fab3 f383 	clz	r3, r3
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	3301      	adds	r3, #1
 8000e78:	069b      	lsls	r3, r3, #26
 8000e7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d109      	bne.n	8000e9e <HAL_ADC_ConfigChannel+0x446>
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	0e9b      	lsrs	r3, r3, #26
 8000e90:	3301      	adds	r3, #1
 8000e92:	f003 031f 	and.w	r3, r3, #31
 8000e96:	2101      	movs	r1, #1
 8000e98:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9c:	e010      	b.n	8000ec0 <HAL_ADC_ConfigChannel+0x468>
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ea6:	fa93 f3a3 	rbit	r3, r3
 8000eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8000eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eae:	fab3 f383 	clz	r3, r3
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	f003 031f 	and.w	r3, r3, #31
 8000eba:	2101      	movs	r1, #1
 8000ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec0:	ea42 0103 	orr.w	r1, r2, r3
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d10a      	bne.n	8000ee6 <HAL_ADC_ConfigChannel+0x48e>
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	0e9b      	lsrs	r3, r3, #26
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	f003 021f 	and.w	r2, r3, #31
 8000edc:	4613      	mov	r3, r2
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	4413      	add	r3, r2
 8000ee2:	051b      	lsls	r3, r3, #20
 8000ee4:	e011      	b.n	8000f0a <HAL_ADC_ConfigChannel+0x4b2>
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eee:	fa93 f3a3 	rbit	r3, r3
 8000ef2:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8000ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef6:	fab3 f383 	clz	r3, r3
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	3301      	adds	r3, #1
 8000efe:	f003 021f 	and.w	r2, r3, #31
 8000f02:	4613      	mov	r3, r2
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	4413      	add	r3, r2
 8000f08:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000f0a:	430b      	orrs	r3, r1
 8000f0c:	e069      	b.n	8000fe2 <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d107      	bne.n	8000f2a <HAL_ADC_ConfigChannel+0x4d2>
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	0e9b      	lsrs	r3, r3, #26
 8000f20:	3301      	adds	r3, #1
 8000f22:	069b      	lsls	r3, r3, #26
 8000f24:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000f28:	e00e      	b.n	8000f48 <HAL_ADC_ConfigChannel+0x4f0>
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f30:	6a3b      	ldr	r3, [r7, #32]
 8000f32:	fa93 f3a3 	rbit	r3, r3
 8000f36:	61fb      	str	r3, [r7, #28]
  return result;
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	fab3 f383 	clz	r3, r3
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	3301      	adds	r3, #1
 8000f42:	069b      	lsls	r3, r3, #26
 8000f44:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d109      	bne.n	8000f68 <HAL_ADC_ConfigChannel+0x510>
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	0e9b      	lsrs	r3, r3, #26
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	f003 031f 	and.w	r3, r3, #31
 8000f60:	2101      	movs	r1, #1
 8000f62:	fa01 f303 	lsl.w	r3, r1, r3
 8000f66:	e010      	b.n	8000f8a <HAL_ADC_ConfigChannel+0x532>
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	fa93 f3a3 	rbit	r3, r3
 8000f74:	617b      	str	r3, [r7, #20]
  return result;
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	fab3 f383 	clz	r3, r3
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	3301      	adds	r3, #1
 8000f80:	f003 031f 	and.w	r3, r3, #31
 8000f84:	2101      	movs	r1, #1
 8000f86:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8a:	ea42 0103 	orr.w	r1, r2, r3
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d10d      	bne.n	8000fb6 <HAL_ADC_ConfigChannel+0x55e>
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	0e9b      	lsrs	r3, r3, #26
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	f003 021f 	and.w	r2, r3, #31
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	4413      	add	r3, r2
 8000fac:	3b1e      	subs	r3, #30
 8000fae:	051b      	lsls	r3, r3, #20
 8000fb0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fb4:	e014      	b.n	8000fe0 <HAL_ADC_ConfigChannel+0x588>
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	fa93 f3a3 	rbit	r3, r3
 8000fc2:	60fb      	str	r3, [r7, #12]
  return result;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	fab3 f383 	clz	r3, r3
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	3301      	adds	r3, #1
 8000fce:	f003 021f 	and.w	r2, r3, #31
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	4413      	add	r3, r2
 8000fd8:	3b1e      	subs	r3, #30
 8000fda:	051b      	lsls	r3, r3, #20
 8000fdc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000fe0:	430b      	orrs	r3, r1
 8000fe2:	683a      	ldr	r2, [r7, #0]
 8000fe4:	6892      	ldr	r2, [r2, #8]
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	f7ff faa2 	bl	8000530 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	4b2e      	ldr	r3, [pc, #184]	; (80010ac <HAL_ADC_ConfigChannel+0x654>)
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	f000 80c9 	beq.w	800118c <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001002:	d004      	beq.n	800100e <HAL_ADC_ConfigChannel+0x5b6>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a29      	ldr	r2, [pc, #164]	; (80010b0 <HAL_ADC_ConfigChannel+0x658>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d101      	bne.n	8001012 <HAL_ADC_ConfigChannel+0x5ba>
 800100e:	4b29      	ldr	r3, [pc, #164]	; (80010b4 <HAL_ADC_ConfigChannel+0x65c>)
 8001010:	e000      	b.n	8001014 <HAL_ADC_ConfigChannel+0x5bc>
 8001012:	4b29      	ldr	r3, [pc, #164]	; (80010b8 <HAL_ADC_ConfigChannel+0x660>)
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff f9c3 	bl	80003a0 <LL_ADC_GetCommonPathInternalCh>
 800101a:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a26      	ldr	r2, [pc, #152]	; (80010bc <HAL_ADC_ConfigChannel+0x664>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d004      	beq.n	8001032 <HAL_ADC_ConfigChannel+0x5da>
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a24      	ldr	r2, [pc, #144]	; (80010c0 <HAL_ADC_ConfigChannel+0x668>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d14e      	bne.n	80010d0 <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001032:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001036:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d148      	bne.n	80010d0 <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001046:	d005      	beq.n	8001054 <HAL_ADC_ConfigChannel+0x5fc>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a1d      	ldr	r2, [pc, #116]	; (80010c4 <HAL_ADC_ConfigChannel+0x66c>)
 800104e:	4293      	cmp	r3, r2
 8001050:	f040 8099 	bne.w	8001186 <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800105c:	d004      	beq.n	8001068 <HAL_ADC_ConfigChannel+0x610>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a13      	ldr	r2, [pc, #76]	; (80010b0 <HAL_ADC_ConfigChannel+0x658>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d101      	bne.n	800106c <HAL_ADC_ConfigChannel+0x614>
 8001068:	4a12      	ldr	r2, [pc, #72]	; (80010b4 <HAL_ADC_ConfigChannel+0x65c>)
 800106a:	e000      	b.n	800106e <HAL_ADC_ConfigChannel+0x616>
 800106c:	4a12      	ldr	r2, [pc, #72]	; (80010b8 <HAL_ADC_ConfigChannel+0x660>)
 800106e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001072:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001076:	4619      	mov	r1, r3
 8001078:	4610      	mov	r0, r2
 800107a:	f7ff f97e 	bl	800037a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800107e:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <HAL_ADC_ConfigChannel+0x670>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	099b      	lsrs	r3, r3, #6
 8001084:	4a11      	ldr	r2, [pc, #68]	; (80010cc <HAL_ADC_ConfigChannel+0x674>)
 8001086:	fba2 2303 	umull	r2, r3, r2, r3
 800108a:	099a      	lsrs	r2, r3, #6
 800108c:	4613      	mov	r3, r2
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	4413      	add	r3, r2
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001096:	e002      	b.n	800109e <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	3b01      	subs	r3, #1
 800109c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d1f9      	bne.n	8001098 <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80010a4:	e06f      	b.n	8001186 <HAL_ADC_ConfigChannel+0x72e>
 80010a6:	bf00      	nop
 80010a8:	407f0000 	.word	0x407f0000
 80010ac:	80080000 	.word	0x80080000
 80010b0:	50000100 	.word	0x50000100
 80010b4:	50000300 	.word	0x50000300
 80010b8:	50000700 	.word	0x50000700
 80010bc:	c3210000 	.word	0xc3210000
 80010c0:	90c00010 	.word	0x90c00010
 80010c4:	50000600 	.word	0x50000600
 80010c8:	2000011c 	.word	0x2000011c
 80010cc:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a32      	ldr	r2, [pc, #200]	; (80011a0 <HAL_ADC_ConfigChannel+0x748>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d125      	bne.n	8001126 <HAL_ADC_ConfigChannel+0x6ce>
 80010da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80010de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d11f      	bne.n	8001126 <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a2e      	ldr	r2, [pc, #184]	; (80011a4 <HAL_ADC_ConfigChannel+0x74c>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d104      	bne.n	80010fa <HAL_ADC_ConfigChannel+0x6a2>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a2c      	ldr	r2, [pc, #176]	; (80011a8 <HAL_ADC_ConfigChannel+0x750>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d047      	beq.n	800118a <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001102:	d004      	beq.n	800110e <HAL_ADC_ConfigChannel+0x6b6>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a26      	ldr	r2, [pc, #152]	; (80011a4 <HAL_ADC_ConfigChannel+0x74c>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d101      	bne.n	8001112 <HAL_ADC_ConfigChannel+0x6ba>
 800110e:	4a27      	ldr	r2, [pc, #156]	; (80011ac <HAL_ADC_ConfigChannel+0x754>)
 8001110:	e000      	b.n	8001114 <HAL_ADC_ConfigChannel+0x6bc>
 8001112:	4a27      	ldr	r2, [pc, #156]	; (80011b0 <HAL_ADC_ConfigChannel+0x758>)
 8001114:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001118:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800111c:	4619      	mov	r1, r3
 800111e:	4610      	mov	r0, r2
 8001120:	f7ff f92b 	bl	800037a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001124:	e031      	b.n	800118a <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a22      	ldr	r2, [pc, #136]	; (80011b4 <HAL_ADC_ConfigChannel+0x75c>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d12d      	bne.n	800118c <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001130:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001134:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001138:	2b00      	cmp	r3, #0
 800113a:	d127      	bne.n	800118c <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a18      	ldr	r2, [pc, #96]	; (80011a4 <HAL_ADC_ConfigChannel+0x74c>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d022      	beq.n	800118c <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800114e:	d004      	beq.n	800115a <HAL_ADC_ConfigChannel+0x702>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a13      	ldr	r2, [pc, #76]	; (80011a4 <HAL_ADC_ConfigChannel+0x74c>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d101      	bne.n	800115e <HAL_ADC_ConfigChannel+0x706>
 800115a:	4a14      	ldr	r2, [pc, #80]	; (80011ac <HAL_ADC_ConfigChannel+0x754>)
 800115c:	e000      	b.n	8001160 <HAL_ADC_ConfigChannel+0x708>
 800115e:	4a14      	ldr	r2, [pc, #80]	; (80011b0 <HAL_ADC_ConfigChannel+0x758>)
 8001160:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001164:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001168:	4619      	mov	r1, r3
 800116a:	4610      	mov	r0, r2
 800116c:	f7ff f905 	bl	800037a <LL_ADC_SetCommonPathInternalCh>
 8001170:	e00c      	b.n	800118c <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001176:	f043 0220 	orr.w	r2, r3, #32
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001184:	e002      	b.n	800118c <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001186:	bf00      	nop
 8001188:	e000      	b.n	800118c <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800118a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2200      	movs	r2, #0
 8001190:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8001194:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8001198:	4618      	mov	r0, r3
 800119a:	3798      	adds	r7, #152	; 0x98
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	c7520000 	.word	0xc7520000
 80011a4:	50000100 	.word	0x50000100
 80011a8:	50000500 	.word	0x50000500
 80011ac:	50000300 	.word	0x50000300
 80011b0:	50000700 	.word	0x50000700
 80011b4:	cb840000 	.word	0xcb840000

080011b8 <LL_ADC_IsEnabled>:
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d101      	bne.n	80011d0 <LL_ADC_IsEnabled+0x18>
 80011cc:	2301      	movs	r3, #1
 80011ce:	e000      	b.n	80011d2 <LL_ADC_IsEnabled+0x1a>
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <LL_ADC_REG_IsConversionOngoing>:
{
 80011de:	b480      	push	{r7}
 80011e0:	b083      	sub	sp, #12
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	f003 0304 	and.w	r3, r3, #4
 80011ee:	2b04      	cmp	r3, #4
 80011f0:	d101      	bne.n	80011f6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80011f2:	2301      	movs	r3, #1
 80011f4:	e000      	b.n	80011f8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80011f6:	2300      	movs	r3, #0
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001204:	b590      	push	{r4, r7, lr}
 8001206:	b0a1      	sub	sp, #132	; 0x84
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800120e:	2300      	movs	r3, #0
 8001210:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800121a:	2b01      	cmp	r3, #1
 800121c:	d101      	bne.n	8001222 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800121e:	2302      	movs	r3, #2
 8001220:	e0e3      	b.n	80013ea <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2201      	movs	r2, #1
 8001226:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001232:	d102      	bne.n	800123a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8001234:	4b6f      	ldr	r3, [pc, #444]	; (80013f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8001236:	60bb      	str	r3, [r7, #8]
 8001238:	e009      	b.n	800124e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a6e      	ldr	r2, [pc, #440]	; (80013f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d102      	bne.n	800124a <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8001244:	4b6d      	ldr	r3, [pc, #436]	; (80013fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8001246:	60bb      	str	r3, [r7, #8]
 8001248:	e001      	b.n	800124e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800124a:	2300      	movs	r3, #0
 800124c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d10b      	bne.n	800126c <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001258:	f043 0220 	orr.w	r2, r3, #32
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2200      	movs	r2, #0
 8001264:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e0be      	b.n	80013ea <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff ffb5 	bl	80011de <LL_ADC_REG_IsConversionOngoing>
 8001274:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff ffaf 	bl	80011de <LL_ADC_REG_IsConversionOngoing>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	f040 80a0 	bne.w	80013c8 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001288:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800128a:	2b00      	cmp	r3, #0
 800128c:	f040 809c 	bne.w	80013c8 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001298:	d004      	beq.n	80012a4 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a55      	ldr	r2, [pc, #340]	; (80013f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d101      	bne.n	80012a8 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 80012a4:	4b56      	ldr	r3, [pc, #344]	; (8001400 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80012a6:	e000      	b.n	80012aa <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 80012a8:	4b56      	ldr	r3, [pc, #344]	; (8001404 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80012aa:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d04b      	beq.n	800134c <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80012b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	6859      	ldr	r1, [r3, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80012c6:	035b      	lsls	r3, r3, #13
 80012c8:	430b      	orrs	r3, r1
 80012ca:	431a      	orrs	r2, r3
 80012cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80012ce:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012d8:	d004      	beq.n	80012e4 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a45      	ldr	r2, [pc, #276]	; (80013f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d10f      	bne.n	8001304 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80012e4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80012e8:	f7ff ff66 	bl	80011b8 <LL_ADC_IsEnabled>
 80012ec:	4604      	mov	r4, r0
 80012ee:	4841      	ldr	r0, [pc, #260]	; (80013f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80012f0:	f7ff ff62 	bl	80011b8 <LL_ADC_IsEnabled>
 80012f4:	4603      	mov	r3, r0
 80012f6:	4323      	orrs	r3, r4
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	bf0c      	ite	eq
 80012fc:	2301      	moveq	r3, #1
 80012fe:	2300      	movne	r3, #0
 8001300:	b2db      	uxtb	r3, r3
 8001302:	e012      	b.n	800132a <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8001304:	483c      	ldr	r0, [pc, #240]	; (80013f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8001306:	f7ff ff57 	bl	80011b8 <LL_ADC_IsEnabled>
 800130a:	4604      	mov	r4, r0
 800130c:	483b      	ldr	r0, [pc, #236]	; (80013fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800130e:	f7ff ff53 	bl	80011b8 <LL_ADC_IsEnabled>
 8001312:	4603      	mov	r3, r0
 8001314:	431c      	orrs	r4, r3
 8001316:	483c      	ldr	r0, [pc, #240]	; (8001408 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8001318:	f7ff ff4e 	bl	80011b8 <LL_ADC_IsEnabled>
 800131c:	4603      	mov	r3, r0
 800131e:	4323      	orrs	r3, r4
 8001320:	2b00      	cmp	r3, #0
 8001322:	bf0c      	ite	eq
 8001324:	2301      	moveq	r3, #1
 8001326:	2300      	movne	r3, #0
 8001328:	b2db      	uxtb	r3, r3
 800132a:	2b00      	cmp	r3, #0
 800132c:	d056      	beq.n	80013dc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800132e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001336:	f023 030f 	bic.w	r3, r3, #15
 800133a:	683a      	ldr	r2, [r7, #0]
 800133c:	6811      	ldr	r1, [r2, #0]
 800133e:	683a      	ldr	r2, [r7, #0]
 8001340:	6892      	ldr	r2, [r2, #8]
 8001342:	430a      	orrs	r2, r1
 8001344:	431a      	orrs	r2, r3
 8001346:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001348:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800134a:	e047      	b.n	80013dc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800134c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001354:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001356:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001360:	d004      	beq.n	800136c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a23      	ldr	r2, [pc, #140]	; (80013f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d10f      	bne.n	800138c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800136c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001370:	f7ff ff22 	bl	80011b8 <LL_ADC_IsEnabled>
 8001374:	4604      	mov	r4, r0
 8001376:	481f      	ldr	r0, [pc, #124]	; (80013f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8001378:	f7ff ff1e 	bl	80011b8 <LL_ADC_IsEnabled>
 800137c:	4603      	mov	r3, r0
 800137e:	4323      	orrs	r3, r4
 8001380:	2b00      	cmp	r3, #0
 8001382:	bf0c      	ite	eq
 8001384:	2301      	moveq	r3, #1
 8001386:	2300      	movne	r3, #0
 8001388:	b2db      	uxtb	r3, r3
 800138a:	e012      	b.n	80013b2 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 800138c:	481a      	ldr	r0, [pc, #104]	; (80013f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800138e:	f7ff ff13 	bl	80011b8 <LL_ADC_IsEnabled>
 8001392:	4604      	mov	r4, r0
 8001394:	4819      	ldr	r0, [pc, #100]	; (80013fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8001396:	f7ff ff0f 	bl	80011b8 <LL_ADC_IsEnabled>
 800139a:	4603      	mov	r3, r0
 800139c:	431c      	orrs	r4, r3
 800139e:	481a      	ldr	r0, [pc, #104]	; (8001408 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80013a0:	f7ff ff0a 	bl	80011b8 <LL_ADC_IsEnabled>
 80013a4:	4603      	mov	r3, r0
 80013a6:	4323      	orrs	r3, r4
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	bf0c      	ite	eq
 80013ac:	2301      	moveq	r3, #1
 80013ae:	2300      	movne	r3, #0
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d012      	beq.n	80013dc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80013b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80013be:	f023 030f 	bic.w	r3, r3, #15
 80013c2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80013c4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80013c6:	e009      	b.n	80013dc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013cc:	f043 0220 	orr.w	r2, r3, #32
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80013da:	e000      	b.n	80013de <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80013dc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80013e6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3784      	adds	r7, #132	; 0x84
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd90      	pop	{r4, r7, pc}
 80013f2:	bf00      	nop
 80013f4:	50000100 	.word	0x50000100
 80013f8:	50000400 	.word	0x50000400
 80013fc:	50000500 	.word	0x50000500
 8001400:	50000300 	.word	0x50000300
 8001404:	50000700 	.word	0x50000700
 8001408:	50000600 	.word	0x50000600

0800140c <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001414:	4b05      	ldr	r3, [pc, #20]	; (800142c <LL_EXTI_EnableIT_0_31+0x20>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	4904      	ldr	r1, [pc, #16]	; (800142c <LL_EXTI_EnableIT_0_31+0x20>)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4313      	orrs	r3, r2
 800141e:	600b      	str	r3, [r1, #0]
}
 8001420:	bf00      	nop
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	40010400 	.word	0x40010400

08001430 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001438:	4b05      	ldr	r3, [pc, #20]	; (8001450 <LL_EXTI_EnableIT_32_63+0x20>)
 800143a:	6a1a      	ldr	r2, [r3, #32]
 800143c:	4904      	ldr	r1, [pc, #16]	; (8001450 <LL_EXTI_EnableIT_32_63+0x20>)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4313      	orrs	r3, r2
 8001442:	620b      	str	r3, [r1, #32]
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	40010400 	.word	0x40010400

08001454 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800145c:	4b06      	ldr	r3, [pc, #24]	; (8001478 <LL_EXTI_DisableIT_0_31+0x24>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	43db      	mvns	r3, r3
 8001464:	4904      	ldr	r1, [pc, #16]	; (8001478 <LL_EXTI_DisableIT_0_31+0x24>)
 8001466:	4013      	ands	r3, r2
 8001468:	600b      	str	r3, [r1, #0]
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	40010400 	.word	0x40010400

0800147c <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8001484:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <LL_EXTI_DisableIT_32_63+0x24>)
 8001486:	6a1a      	ldr	r2, [r3, #32]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	43db      	mvns	r3, r3
 800148c:	4904      	ldr	r1, [pc, #16]	; (80014a0 <LL_EXTI_DisableIT_32_63+0x24>)
 800148e:	4013      	ands	r3, r2
 8001490:	620b      	str	r3, [r1, #32]
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	40010400 	.word	0x40010400

080014a4 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80014ac:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <LL_EXTI_EnableEvent_0_31+0x20>)
 80014ae:	685a      	ldr	r2, [r3, #4]
 80014b0:	4904      	ldr	r1, [pc, #16]	; (80014c4 <LL_EXTI_EnableEvent_0_31+0x20>)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	604b      	str	r3, [r1, #4]

}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	40010400 	.word	0x40010400

080014c8 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 80014d0:	4b05      	ldr	r3, [pc, #20]	; (80014e8 <LL_EXTI_EnableEvent_32_63+0x20>)
 80014d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014d4:	4904      	ldr	r1, [pc, #16]	; (80014e8 <LL_EXTI_EnableEvent_32_63+0x20>)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4313      	orrs	r3, r2
 80014da:	624b      	str	r3, [r1, #36]	; 0x24
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	40010400 	.word	0x40010400

080014ec <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80014f4:	4b06      	ldr	r3, [pc, #24]	; (8001510 <LL_EXTI_DisableEvent_0_31+0x24>)
 80014f6:	685a      	ldr	r2, [r3, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	43db      	mvns	r3, r3
 80014fc:	4904      	ldr	r1, [pc, #16]	; (8001510 <LL_EXTI_DisableEvent_0_31+0x24>)
 80014fe:	4013      	ands	r3, r2
 8001500:	604b      	str	r3, [r1, #4]
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	40010400 	.word	0x40010400

08001514 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800151c:	4b06      	ldr	r3, [pc, #24]	; (8001538 <LL_EXTI_DisableEvent_32_63+0x24>)
 800151e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	43db      	mvns	r3, r3
 8001524:	4904      	ldr	r1, [pc, #16]	; (8001538 <LL_EXTI_DisableEvent_32_63+0x24>)
 8001526:	4013      	ands	r3, r2
 8001528:	624b      	str	r3, [r1, #36]	; 0x24
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	40010400 	.word	0x40010400

0800153c <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001544:	4b05      	ldr	r3, [pc, #20]	; (800155c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001546:	689a      	ldr	r2, [r3, #8]
 8001548:	4904      	ldr	r1, [pc, #16]	; (800155c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4313      	orrs	r3, r2
 800154e:	608b      	str	r3, [r1, #8]

}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	40010400 	.word	0x40010400

08001560 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8001568:	4b05      	ldr	r3, [pc, #20]	; (8001580 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800156a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800156c:	4904      	ldr	r1, [pc, #16]	; (8001580 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4313      	orrs	r3, r2
 8001572:	628b      	str	r3, [r1, #40]	; 0x28
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	40010400 	.word	0x40010400

08001584 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800158c:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800158e:	689a      	ldr	r2, [r3, #8]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	43db      	mvns	r3, r3
 8001594:	4904      	ldr	r1, [pc, #16]	; (80015a8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001596:	4013      	ands	r3, r2
 8001598:	608b      	str	r3, [r1, #8]

}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	40010400 	.word	0x40010400

080015ac <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 80015b4:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80015b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	43db      	mvns	r3, r3
 80015bc:	4904      	ldr	r1, [pc, #16]	; (80015d0 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80015be:	4013      	ands	r3, r2
 80015c0:	628b      	str	r3, [r1, #40]	; 0x28
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	40010400 	.word	0x40010400

080015d4 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80015dc:	4b05      	ldr	r3, [pc, #20]	; (80015f4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80015de:	68da      	ldr	r2, [r3, #12]
 80015e0:	4904      	ldr	r1, [pc, #16]	; (80015f4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	60cb      	str	r3, [r1, #12]
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	40010400 	.word	0x40010400

080015f8 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8001600:	4b05      	ldr	r3, [pc, #20]	; (8001618 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8001602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001604:	4904      	ldr	r1, [pc, #16]	; (8001618 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4313      	orrs	r3, r2
 800160a:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	40010400 	.word	0x40010400

0800161c <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8001624:	4b06      	ldr	r3, [pc, #24]	; (8001640 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001626:	68da      	ldr	r2, [r3, #12]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	43db      	mvns	r3, r3
 800162c:	4904      	ldr	r1, [pc, #16]	; (8001640 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800162e:	4013      	ands	r3, r2
 8001630:	60cb      	str	r3, [r1, #12]
}
 8001632:	bf00      	nop
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	40010400 	.word	0x40010400

08001644 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800164e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	43db      	mvns	r3, r3
 8001654:	4904      	ldr	r1, [pc, #16]	; (8001668 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8001656:	4013      	ands	r3, r2
 8001658:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	40010400 	.word	0x40010400

0800166c <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8001674:	4b07      	ldr	r3, [pc, #28]	; (8001694 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8001676:	695a      	ldr	r2, [r3, #20]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4013      	ands	r3, r2
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	429a      	cmp	r2, r3
 8001680:	d101      	bne.n	8001686 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8001682:	2301      	movs	r3, #1
 8001684:	e000      	b.n	8001688 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8001686:	2300      	movs	r3, #0
}
 8001688:	4618      	mov	r0, r3
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	40010400 	.word	0x40010400

08001698 <LL_EXTI_IsActiveFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_32_63(uint32_t ExtiLine)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR2, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 80016a0:	4b07      	ldr	r3, [pc, #28]	; (80016c0 <LL_EXTI_IsActiveFlag_32_63+0x28>)
 80016a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4013      	ands	r3, r2
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d101      	bne.n	80016b2 <LL_EXTI_IsActiveFlag_32_63+0x1a>
 80016ae:	2301      	movs	r3, #1
 80016b0:	e000      	b.n	80016b4 <LL_EXTI_IsActiveFlag_32_63+0x1c>
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	40010400 	.word	0x40010400

080016c4 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80016cc:	4a04      	ldr	r2, [pc, #16]	; (80016e0 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6153      	str	r3, [r2, #20]
}
 80016d2:	bf00      	nop
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	40010400 	.word	0x40010400

080016e4 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 80016ec:	4a04      	ldr	r2, [pc, #16]	; (8001700 <LL_EXTI_ClearFlag_32_63+0x1c>)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6353      	str	r3, [r2, #52]	; 0x34
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	40010400 	.word	0x40010400

08001704 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b088      	sub	sp, #32
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 800170c:	2300      	movs	r3, #0
 800170e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8001710:	2300      	movs	r3, #0
 8001712:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d102      	bne.n	8001720 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	77fb      	strb	r3, [r7, #31]
 800171e:	e180      	b.n	8001a22 <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800172a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800172e:	d102      	bne.n	8001736 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	77fb      	strb	r3, [r7, #31]
 8001734:	e175      	b.n	8001a22 <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	7f5b      	ldrb	r3, [r3, #29]
 800173a:	b2db      	uxtb	r3, r3
 800173c:	2b00      	cmp	r3, #0
 800173e:	d108      	bne.n	8001752 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f009 f96b 	bl	800aa28 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800175c:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	695b      	ldr	r3, [r3, #20]
 800176c:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 8001778:	4313      	orrs	r3, r2
 800177a:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	4b98      	ldr	r3, [pc, #608]	; (80019e4 <HAL_COMP_Init+0x2e0>)
 8001784:	4013      	ands	r3, r2
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	6812      	ldr	r2, [r2, #0]
 800178a:	6979      	ldr	r1, [r7, #20]
 800178c:	430b      	orrs	r3, r1
 800178e:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d015      	beq.n	80017ca <HAL_COMP_Init+0xc6>
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d112      	bne.n	80017ca <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80017a4:	4b90      	ldr	r3, [pc, #576]	; (80019e8 <HAL_COMP_Init+0x2e4>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	099b      	lsrs	r3, r3, #6
 80017aa:	4a90      	ldr	r2, [pc, #576]	; (80019ec <HAL_COMP_Init+0x2e8>)
 80017ac:	fba2 2303 	umull	r2, r3, r2, r3
 80017b0:	099a      	lsrs	r2, r3, #6
 80017b2:	4613      	mov	r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	4413      	add	r3, r2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80017bc:	e002      	b.n	80017c4 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	3b01      	subs	r3, #1
 80017c2:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1f9      	bne.n	80017be <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a88      	ldr	r2, [pc, #544]	; (80019f0 <HAL_COMP_Init+0x2ec>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d028      	beq.n	8001826 <HAL_COMP_Init+0x122>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a86      	ldr	r2, [pc, #536]	; (80019f4 <HAL_COMP_Init+0x2f0>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d020      	beq.n	8001820 <HAL_COMP_Init+0x11c>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a85      	ldr	r2, [pc, #532]	; (80019f8 <HAL_COMP_Init+0x2f4>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d018      	beq.n	800181a <HAL_COMP_Init+0x116>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a83      	ldr	r2, [pc, #524]	; (80019fc <HAL_COMP_Init+0x2f8>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d010      	beq.n	8001814 <HAL_COMP_Init+0x110>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a82      	ldr	r2, [pc, #520]	; (8001a00 <HAL_COMP_Init+0x2fc>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d008      	beq.n	800180e <HAL_COMP_Init+0x10a>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a80      	ldr	r2, [pc, #512]	; (8001a04 <HAL_COMP_Init+0x300>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d101      	bne.n	800180a <HAL_COMP_Init+0x106>
 8001806:	2301      	movs	r3, #1
 8001808:	e00f      	b.n	800182a <HAL_COMP_Init+0x126>
 800180a:	2302      	movs	r3, #2
 800180c:	e00d      	b.n	800182a <HAL_COMP_Init+0x126>
 800180e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001812:	e00a      	b.n	800182a <HAL_COMP_Init+0x126>
 8001814:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001818:	e007      	b.n	800182a <HAL_COMP_Init+0x126>
 800181a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800181e:	e004      	b.n	800182a <HAL_COMP_Init+0x126>
 8001820:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001824:	e001      	b.n	800182a <HAL_COMP_Init+0x126>
 8001826:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800182a:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	f003 0303 	and.w	r3, r3, #3
 8001834:	2b00      	cmp	r3, #0
 8001836:	f000 80b6 	beq.w	80019a6 <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	f003 0310 	and.w	r3, r3, #16
 8001842:	2b00      	cmp	r3, #0
 8001844:	d011      	beq.n	800186a <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a6e      	ldr	r2, [pc, #440]	; (8001a04 <HAL_COMP_Init+0x300>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d004      	beq.n	800185a <HAL_COMP_Init+0x156>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a6c      	ldr	r2, [pc, #432]	; (8001a08 <HAL_COMP_Init+0x304>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d103      	bne.n	8001862 <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 800185a:	6938      	ldr	r0, [r7, #16]
 800185c:	f7ff fe80 	bl	8001560 <LL_EXTI_EnableRisingTrig_32_63>
 8001860:	e014      	b.n	800188c <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8001862:	6938      	ldr	r0, [r7, #16]
 8001864:	f7ff fe6a 	bl	800153c <LL_EXTI_EnableRisingTrig_0_31>
 8001868:	e010      	b.n	800188c <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a65      	ldr	r2, [pc, #404]	; (8001a04 <HAL_COMP_Init+0x300>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d004      	beq.n	800187e <HAL_COMP_Init+0x17a>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a63      	ldr	r2, [pc, #396]	; (8001a08 <HAL_COMP_Init+0x304>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d103      	bne.n	8001886 <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 800187e:	6938      	ldr	r0, [r7, #16]
 8001880:	f7ff fe94 	bl	80015ac <LL_EXTI_DisableRisingTrig_32_63>
 8001884:	e002      	b.n	800188c <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8001886:	6938      	ldr	r0, [r7, #16]
 8001888:	f7ff fe7c 	bl	8001584 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	f003 0320 	and.w	r3, r3, #32
 8001894:	2b00      	cmp	r3, #0
 8001896:	d011      	beq.n	80018bc <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a59      	ldr	r2, [pc, #356]	; (8001a04 <HAL_COMP_Init+0x300>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d004      	beq.n	80018ac <HAL_COMP_Init+0x1a8>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a58      	ldr	r2, [pc, #352]	; (8001a08 <HAL_COMP_Init+0x304>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d103      	bne.n	80018b4 <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 80018ac:	6938      	ldr	r0, [r7, #16]
 80018ae:	f7ff fea3 	bl	80015f8 <LL_EXTI_EnableFallingTrig_32_63>
 80018b2:	e014      	b.n	80018de <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80018b4:	6938      	ldr	r0, [r7, #16]
 80018b6:	f7ff fe8d 	bl	80015d4 <LL_EXTI_EnableFallingTrig_0_31>
 80018ba:	e010      	b.n	80018de <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a50      	ldr	r2, [pc, #320]	; (8001a04 <HAL_COMP_Init+0x300>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d004      	beq.n	80018d0 <HAL_COMP_Init+0x1cc>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a4f      	ldr	r2, [pc, #316]	; (8001a08 <HAL_COMP_Init+0x304>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d103      	bne.n	80018d8 <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 80018d0:	6938      	ldr	r0, [r7, #16]
 80018d2:	f7ff feb7 	bl	8001644 <LL_EXTI_DisableFallingTrig_32_63>
 80018d6:	e002      	b.n	80018de <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80018d8:	6938      	ldr	r0, [r7, #16]
 80018da:	f7ff fe9f 	bl	800161c <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a48      	ldr	r2, [pc, #288]	; (8001a04 <HAL_COMP_Init+0x300>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d004      	beq.n	80018f2 <HAL_COMP_Init+0x1ee>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a46      	ldr	r2, [pc, #280]	; (8001a08 <HAL_COMP_Init+0x304>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d103      	bne.n	80018fa <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 80018f2:	6938      	ldr	r0, [r7, #16]
 80018f4:	f7ff fef6 	bl	80016e4 <LL_EXTI_ClearFlag_32_63>
 80018f8:	e002      	b.n	8001900 <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 80018fa:	6938      	ldr	r0, [r7, #16]
 80018fc:	f7ff fee2 	bl	80016c4 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	f003 0302 	and.w	r3, r3, #2
 8001908:	2b00      	cmp	r3, #0
 800190a:	d011      	beq.n	8001930 <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a3c      	ldr	r2, [pc, #240]	; (8001a04 <HAL_COMP_Init+0x300>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d004      	beq.n	8001920 <HAL_COMP_Init+0x21c>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a3b      	ldr	r2, [pc, #236]	; (8001a08 <HAL_COMP_Init+0x304>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d103      	bne.n	8001928 <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8001920:	6938      	ldr	r0, [r7, #16]
 8001922:	f7ff fdd1 	bl	80014c8 <LL_EXTI_EnableEvent_32_63>
 8001926:	e014      	b.n	8001952 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8001928:	6938      	ldr	r0, [r7, #16]
 800192a:	f7ff fdbb 	bl	80014a4 <LL_EXTI_EnableEvent_0_31>
 800192e:	e010      	b.n	8001952 <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a33      	ldr	r2, [pc, #204]	; (8001a04 <HAL_COMP_Init+0x300>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d004      	beq.n	8001944 <HAL_COMP_Init+0x240>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a32      	ldr	r2, [pc, #200]	; (8001a08 <HAL_COMP_Init+0x304>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d103      	bne.n	800194c <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8001944:	6938      	ldr	r0, [r7, #16]
 8001946:	f7ff fde5 	bl	8001514 <LL_EXTI_DisableEvent_32_63>
 800194a:	e002      	b.n	8001952 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 800194c:	6938      	ldr	r0, [r7, #16]
 800194e:	f7ff fdcd 	bl	80014ec <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	699b      	ldr	r3, [r3, #24]
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	2b00      	cmp	r3, #0
 800195c:	d011      	beq.n	8001982 <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a28      	ldr	r2, [pc, #160]	; (8001a04 <HAL_COMP_Init+0x300>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d004      	beq.n	8001972 <HAL_COMP_Init+0x26e>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a26      	ldr	r2, [pc, #152]	; (8001a08 <HAL_COMP_Init+0x304>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d103      	bne.n	800197a <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8001972:	6938      	ldr	r0, [r7, #16]
 8001974:	f7ff fd5c 	bl	8001430 <LL_EXTI_EnableIT_32_63>
 8001978:	e04b      	b.n	8001a12 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 800197a:	6938      	ldr	r0, [r7, #16]
 800197c:	f7ff fd46 	bl	800140c <LL_EXTI_EnableIT_0_31>
 8001980:	e047      	b.n	8001a12 <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a1f      	ldr	r2, [pc, #124]	; (8001a04 <HAL_COMP_Init+0x300>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d004      	beq.n	8001996 <HAL_COMP_Init+0x292>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a1d      	ldr	r2, [pc, #116]	; (8001a08 <HAL_COMP_Init+0x304>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d103      	bne.n	800199e <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8001996:	6938      	ldr	r0, [r7, #16]
 8001998:	f7ff fd70 	bl	800147c <LL_EXTI_DisableIT_32_63>
 800199c:	e039      	b.n	8001a12 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 800199e:	6938      	ldr	r0, [r7, #16]
 80019a0:	f7ff fd58 	bl	8001454 <LL_EXTI_DisableIT_0_31>
 80019a4:	e035      	b.n	8001a12 <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a16      	ldr	r2, [pc, #88]	; (8001a04 <HAL_COMP_Init+0x300>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d004      	beq.n	80019ba <HAL_COMP_Init+0x2b6>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a14      	ldr	r2, [pc, #80]	; (8001a08 <HAL_COMP_Init+0x304>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d103      	bne.n	80019c2 <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 80019ba:	6938      	ldr	r0, [r7, #16]
 80019bc:	f7ff fdaa 	bl	8001514 <LL_EXTI_DisableEvent_32_63>
 80019c0:	e002      	b.n	80019c8 <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 80019c2:	6938      	ldr	r0, [r7, #16]
 80019c4:	f7ff fd92 	bl	80014ec <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a0d      	ldr	r2, [pc, #52]	; (8001a04 <HAL_COMP_Init+0x300>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d004      	beq.n	80019dc <HAL_COMP_Init+0x2d8>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a0c      	ldr	r2, [pc, #48]	; (8001a08 <HAL_COMP_Init+0x304>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d117      	bne.n	8001a0c <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 80019dc:	6938      	ldr	r0, [r7, #16]
 80019de:	f7ff fd4d 	bl	800147c <LL_EXTI_DisableIT_32_63>
 80019e2:	e016      	b.n	8001a12 <HAL_COMP_Init+0x30e>
 80019e4:	ff007e0f 	.word	0xff007e0f
 80019e8:	2000011c 	.word	0x2000011c
 80019ec:	053e2d63 	.word	0x053e2d63
 80019f0:	40010200 	.word	0x40010200
 80019f4:	40010204 	.word	0x40010204
 80019f8:	40010208 	.word	0x40010208
 80019fc:	4001020c 	.word	0x4001020c
 8001a00:	40010210 	.word	0x40010210
 8001a04:	40010214 	.word	0x40010214
 8001a08:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8001a0c:	6938      	ldr	r0, [r7, #16]
 8001a0e:	f7ff fd21 	bl	8001454 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	7f5b      	ldrb	r3, [r3, #29]
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d102      	bne.n	8001a22 <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8001a22:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3720      	adds	r7, #32
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a2f      	ldr	r2, [pc, #188]	; (8001af8 <HAL_COMP_IRQHandler+0xcc>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d028      	beq.n	8001a90 <HAL_COMP_IRQHandler+0x64>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a2e      	ldr	r2, [pc, #184]	; (8001afc <HAL_COMP_IRQHandler+0xd0>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d020      	beq.n	8001a8a <HAL_COMP_IRQHandler+0x5e>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a2c      	ldr	r2, [pc, #176]	; (8001b00 <HAL_COMP_IRQHandler+0xd4>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d018      	beq.n	8001a84 <HAL_COMP_IRQHandler+0x58>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a2b      	ldr	r2, [pc, #172]	; (8001b04 <HAL_COMP_IRQHandler+0xd8>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d010      	beq.n	8001a7e <HAL_COMP_IRQHandler+0x52>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a29      	ldr	r2, [pc, #164]	; (8001b08 <HAL_COMP_IRQHandler+0xdc>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d008      	beq.n	8001a78 <HAL_COMP_IRQHandler+0x4c>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a28      	ldr	r2, [pc, #160]	; (8001b0c <HAL_COMP_IRQHandler+0xe0>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d101      	bne.n	8001a74 <HAL_COMP_IRQHandler+0x48>
 8001a70:	2301      	movs	r3, #1
 8001a72:	e00f      	b.n	8001a94 <HAL_COMP_IRQHandler+0x68>
 8001a74:	2302      	movs	r3, #2
 8001a76:	e00d      	b.n	8001a94 <HAL_COMP_IRQHandler+0x68>
 8001a78:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001a7c:	e00a      	b.n	8001a94 <HAL_COMP_IRQHandler+0x68>
 8001a7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a82:	e007      	b.n	8001a94 <HAL_COMP_IRQHandler+0x68>
 8001a84:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001a88:	e004      	b.n	8001a94 <HAL_COMP_IRQHandler+0x68>
 8001a8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a8e:	e001      	b.n	8001a94 <HAL_COMP_IRQHandler+0x68>
 8001a90:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a94:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_comp_exti_flag_set = 0UL;
 8001a96:	2300      	movs	r3, #0
 8001a98:	60fb      	str	r3, [r7, #12]

  /* Check COMP EXTI flag */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
  if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a1b      	ldr	r2, [pc, #108]	; (8001b0c <HAL_COMP_IRQHandler+0xe0>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d004      	beq.n	8001aae <HAL_COMP_IRQHandler+0x82>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a19      	ldr	r2, [pc, #100]	; (8001b10 <HAL_COMP_IRQHandler+0xe4>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d108      	bne.n	8001ac0 <HAL_COMP_IRQHandler+0x94>
  {
    if(LL_EXTI_IsActiveFlag_32_63(exti_line) != 0UL)
 8001aae:	68b8      	ldr	r0, [r7, #8]
 8001ab0:	f7ff fdf2 	bl	8001698 <LL_EXTI_IsActiveFlag_32_63>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d00a      	beq.n	8001ad0 <HAL_COMP_IRQHandler+0xa4>
    {
      tmp_comp_exti_flag_set = 2UL;
 8001aba:	2302      	movs	r3, #2
 8001abc:	60fb      	str	r3, [r7, #12]
    if(LL_EXTI_IsActiveFlag_32_63(exti_line) != 0UL)
 8001abe:	e007      	b.n	8001ad0 <HAL_COMP_IRQHandler+0xa4>
    }
  }
  else
  {
    if(LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 8001ac0:	68b8      	ldr	r0, [r7, #8]
 8001ac2:	f7ff fdd3 	bl	800166c <LL_EXTI_IsActiveFlag_0_31>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <HAL_COMP_IRQHandler+0xa4>
    {
      tmp_comp_exti_flag_set = 1UL;
 8001acc:	2301      	movs	r3, #1
 8001ace:	60fb      	str	r3, [r7, #12]
  {
    tmp_comp_exti_flag_set = 1UL;
  }
#endif

  if(tmp_comp_exti_flag_set != 0UL)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d00c      	beq.n	8001af0 <HAL_COMP_IRQHandler+0xc4>
  {
      /* Clear COMP EXTI line pending bit */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if(tmp_comp_exti_flag_set == 2UL)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d103      	bne.n	8001ae4 <HAL_COMP_IRQHandler+0xb8>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8001adc:	68b8      	ldr	r0, [r7, #8]
 8001ade:	f7ff fe01 	bl	80016e4 <LL_EXTI_ClearFlag_32_63>
 8001ae2:	e002      	b.n	8001aea <HAL_COMP_IRQHandler+0xbe>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 8001ae4:	68b8      	ldr	r0, [r7, #8]
 8001ae6:	f7ff fded 	bl	80016c4 <LL_EXTI_ClearFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f000 f812 	bl	8001b14 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 8001af0:	bf00      	nop
 8001af2:	3710      	adds	r7, #16
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40010200 	.word	0x40010200
 8001afc:	40010204 	.word	0x40010204
 8001b00:	40010208 	.word	0x40010208
 8001b04:	4001020c 	.word	0x4001020c
 8001b08:	40010210 	.word	0x40010210
 8001b0c:	40010214 	.word	0x40010214
 8001b10:	40010218 	.word	0x40010218

08001b14 <HAL_COMP_TriggerCallback>:
  * @brief  Comparator trigger callback.
  * @param  hcomp  COMP handle
  * @retval None
  */
__weak void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  UNUSED(hcomp);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_COMP_TriggerCallback should be implemented in the user file
   */
}
 8001b1c:	bf00      	nop
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b38:	4b0c      	ldr	r3, [pc, #48]	; (8001b6c <__NVIC_SetPriorityGrouping+0x44>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b3e:	68ba      	ldr	r2, [r7, #8]
 8001b40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b44:	4013      	ands	r3, r2
 8001b46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b5a:	4a04      	ldr	r2, [pc, #16]	; (8001b6c <__NVIC_SetPriorityGrouping+0x44>)
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	60d3      	str	r3, [r2, #12]
}
 8001b60:	bf00      	nop
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b74:	4b04      	ldr	r3, [pc, #16]	; (8001b88 <__NVIC_GetPriorityGrouping+0x18>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	0a1b      	lsrs	r3, r3, #8
 8001b7a:	f003 0307 	and.w	r3, r3, #7
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	db0b      	blt.n	8001bb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b9e:	79fb      	ldrb	r3, [r7, #7]
 8001ba0:	f003 021f 	and.w	r2, r3, #31
 8001ba4:	4907      	ldr	r1, [pc, #28]	; (8001bc4 <__NVIC_EnableIRQ+0x38>)
 8001ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001baa:	095b      	lsrs	r3, r3, #5
 8001bac:	2001      	movs	r0, #1
 8001bae:	fa00 f202 	lsl.w	r2, r0, r2
 8001bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	e000e100 	.word	0xe000e100

08001bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	6039      	str	r1, [r7, #0]
 8001bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	db0a      	blt.n	8001bf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	490c      	ldr	r1, [pc, #48]	; (8001c14 <__NVIC_SetPriority+0x4c>)
 8001be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be6:	0112      	lsls	r2, r2, #4
 8001be8:	b2d2      	uxtb	r2, r2
 8001bea:	440b      	add	r3, r1
 8001bec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bf0:	e00a      	b.n	8001c08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	4908      	ldr	r1, [pc, #32]	; (8001c18 <__NVIC_SetPriority+0x50>)
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	3b04      	subs	r3, #4
 8001c00:	0112      	lsls	r2, r2, #4
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	440b      	add	r3, r1
 8001c06:	761a      	strb	r2, [r3, #24]
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	e000e100 	.word	0xe000e100
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b089      	sub	sp, #36	; 0x24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	f1c3 0307 	rsb	r3, r3, #7
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	bf28      	it	cs
 8001c3a:	2304      	movcs	r3, #4
 8001c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	3304      	adds	r3, #4
 8001c42:	2b06      	cmp	r3, #6
 8001c44:	d902      	bls.n	8001c4c <NVIC_EncodePriority+0x30>
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3b03      	subs	r3, #3
 8001c4a:	e000      	b.n	8001c4e <NVIC_EncodePriority+0x32>
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c50:	f04f 32ff 	mov.w	r2, #4294967295
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43da      	mvns	r2, r3
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	401a      	ands	r2, r3
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c64:	f04f 31ff 	mov.w	r1, #4294967295
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6e:	43d9      	mvns	r1, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c74:	4313      	orrs	r3, r2
         );
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3724      	adds	r7, #36	; 0x24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
	...

08001c84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c94:	d301      	bcc.n	8001c9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c96:	2301      	movs	r3, #1
 8001c98:	e00f      	b.n	8001cba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c9a:	4a0a      	ldr	r2, [pc, #40]	; (8001cc4 <SysTick_Config+0x40>)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ca2:	210f      	movs	r1, #15
 8001ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca8:	f7ff ff8e 	bl	8001bc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cac:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <SysTick_Config+0x40>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cb2:	4b04      	ldr	r3, [pc, #16]	; (8001cc4 <SysTick_Config+0x40>)
 8001cb4:	2207      	movs	r2, #7
 8001cb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	e000e010 	.word	0xe000e010

08001cc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f7ff ff29 	bl	8001b28 <__NVIC_SetPriorityGrouping>
}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b086      	sub	sp, #24
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	60b9      	str	r1, [r7, #8]
 8001ce8:	607a      	str	r2, [r7, #4]
 8001cea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cec:	f7ff ff40 	bl	8001b70 <__NVIC_GetPriorityGrouping>
 8001cf0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	68b9      	ldr	r1, [r7, #8]
 8001cf6:	6978      	ldr	r0, [r7, #20]
 8001cf8:	f7ff ff90 	bl	8001c1c <NVIC_EncodePriority>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d02:	4611      	mov	r1, r2
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff ff5f 	bl	8001bc8 <__NVIC_SetPriority>
}
 8001d0a:	bf00      	nop
 8001d0c:	3718      	adds	r7, #24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b082      	sub	sp, #8
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	4603      	mov	r3, r0
 8001d1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff ff33 	bl	8001b8c <__NVIC_EnableIRQ>
}
 8001d26:	bf00      	nop
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7ff ffa4 	bl	8001c84 <SysTick_Config>
 8001d3c:	4603      	mov	r3, r0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
	...

08001d48 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e147      	b.n	8001fea <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d106      	bne.n	8001d74 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f008 ff10 	bl	800ab94 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	699a      	ldr	r2, [r3, #24]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f022 0210 	bic.w	r2, r2, #16
 8001d82:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d84:	f7fe fada 	bl	800033c <HAL_GetTick>
 8001d88:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001d8a:	e012      	b.n	8001db2 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001d8c:	f7fe fad6 	bl	800033c <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b0a      	cmp	r3, #10
 8001d98:	d90b      	bls.n	8001db2 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d9e:	f043 0201 	orr.w	r2, r3, #1
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2203      	movs	r2, #3
 8001daa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e11b      	b.n	8001fea <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	f003 0308 	and.w	r3, r3, #8
 8001dbc:	2b08      	cmp	r3, #8
 8001dbe:	d0e5      	beq.n	8001d8c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	699a      	ldr	r2, [r3, #24]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f042 0201 	orr.w	r2, r2, #1
 8001dce:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001dd0:	f7fe fab4 	bl	800033c <HAL_GetTick>
 8001dd4:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001dd6:	e012      	b.n	8001dfe <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001dd8:	f7fe fab0 	bl	800033c <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b0a      	cmp	r3, #10
 8001de4:	d90b      	bls.n	8001dfe <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dea:	f043 0201 	orr.w	r2, r3, #1
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2203      	movs	r2, #3
 8001df6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e0f5      	b.n	8001fea <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d0e5      	beq.n	8001dd8 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	699a      	ldr	r2, [r3, #24]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f042 0202 	orr.w	r2, r2, #2
 8001e1a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a74      	ldr	r2, [pc, #464]	; (8001ff4 <HAL_FDCAN_Init+0x2ac>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d103      	bne.n	8001e2e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001e26:	4a74      	ldr	r2, [pc, #464]	; (8001ff8 <HAL_FDCAN_Init+0x2b0>)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	7c1b      	ldrb	r3, [r3, #16]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d108      	bne.n	8001e48 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	699a      	ldr	r2, [r3, #24]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e44:	619a      	str	r2, [r3, #24]
 8001e46:	e007      	b.n	8001e58 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	699a      	ldr	r2, [r3, #24]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e56:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	7c5b      	ldrb	r3, [r3, #17]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d108      	bne.n	8001e72 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	699a      	ldr	r2, [r3, #24]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e6e:	619a      	str	r2, [r3, #24]
 8001e70:	e007      	b.n	8001e82 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	699a      	ldr	r2, [r3, #24]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001e80:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	7c9b      	ldrb	r3, [r3, #18]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d108      	bne.n	8001e9c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	699a      	ldr	r2, [r3, #24]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e98:	619a      	str	r2, [r3, #24]
 8001e9a:	e007      	b.n	8001eac <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	699a      	ldr	r2, [r3, #24]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001eaa:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	689a      	ldr	r2, [r3, #8]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	699a      	ldr	r2, [r3, #24]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001ed0:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	691a      	ldr	r2, [r3, #16]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f022 0210 	bic.w	r2, r2, #16
 8001ee0:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d108      	bne.n	8001efc <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	699a      	ldr	r2, [r3, #24]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f042 0204 	orr.w	r2, r2, #4
 8001ef8:	619a      	str	r2, [r3, #24]
 8001efa:	e02c      	b.n	8001f56 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d028      	beq.n	8001f56 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d01c      	beq.n	8001f46 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	699a      	ldr	r2, [r3, #24]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f1a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	691a      	ldr	r2, [r3, #16]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f042 0210 	orr.w	r2, r2, #16
 8001f2a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	2b03      	cmp	r3, #3
 8001f32:	d110      	bne.n	8001f56 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	699a      	ldr	r2, [r3, #24]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f042 0220 	orr.w	r2, r2, #32
 8001f42:	619a      	str	r2, [r3, #24]
 8001f44:	e007      	b.n	8001f56 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	699a      	ldr	r2, [r3, #24]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f042 0220 	orr.w	r2, r2, #32
 8001f54:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	3b01      	subs	r3, #1
 8001f64:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001f66:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a1b      	ldr	r3, [r3, #32]
 8001f6c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001f6e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001f7e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001f80:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001f8a:	d115      	bne.n	8001fb8 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f90:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f96:	3b01      	subs	r3, #1
 8001f98:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001f9a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001fa4:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fac:	3b01      	subs	r3, #1
 8001fae:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001fb4:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001fb6:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 f814 	bl	8001ffc <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40006400 	.word	0x40006400
 8001ff8:	40006500 	.word	0x40006500

08001ffc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002004:	4b30      	ldr	r3, [pc, #192]	; (80020c8 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8002006:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a2f      	ldr	r2, [pc, #188]	; (80020cc <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d103      	bne.n	800201a <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8002018:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a2c      	ldr	r2, [pc, #176]	; (80020d0 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d103      	bne.n	800202c <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 800202a:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	68ba      	ldr	r2, [r7, #8]
 8002030:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800203a:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002042:	041a      	lsls	r2, r3, #16
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	430a      	orrs	r2, r1
 800204a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002060:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002068:	061a      	lsls	r2, r3, #24
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	430a      	orrs	r2, r1
 8002070:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	f503 7218 	add.w	r2, r3, #608	; 0x260
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	e005      	b.n	80020ae <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	3304      	adds	r3, #4
 80020ac:	60fb      	str	r3, [r7, #12]
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80020b4:	68fa      	ldr	r2, [r7, #12]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d3f3      	bcc.n	80020a2 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 80020ba:	bf00      	nop
 80020bc:	3714      	adds	r7, #20
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	4000a400 	.word	0x4000a400
 80020cc:	40006800 	.word	0x40006800
 80020d0:	40006c00 	.word	0x40006c00

080020d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b087      	sub	sp, #28
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80020de:	2300      	movs	r3, #0
 80020e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80020e2:	e15a      	b.n	800239a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	2101      	movs	r1, #1
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	fa01 f303 	lsl.w	r3, r1, r3
 80020f0:	4013      	ands	r3, r2
 80020f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f000 814c 	beq.w	8002394 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	2b02      	cmp	r3, #2
 8002102:	d003      	beq.n	800210c <HAL_GPIO_Init+0x38>
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	2b12      	cmp	r3, #18
 800210a:	d123      	bne.n	8002154 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	08da      	lsrs	r2, r3, #3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	3208      	adds	r2, #8
 8002114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002118:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	f003 0307 	and.w	r3, r3, #7
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	220f      	movs	r2, #15
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	43db      	mvns	r3, r3
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	4013      	ands	r3, r2
 800212e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	691a      	ldr	r2, [r3, #16]
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	f003 0307 	and.w	r3, r3, #7
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	4313      	orrs	r3, r2
 8002144:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	08da      	lsrs	r2, r3, #3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	3208      	adds	r2, #8
 800214e:	6939      	ldr	r1, [r7, #16]
 8002150:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	2203      	movs	r2, #3
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	43db      	mvns	r3, r3
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	4013      	ands	r3, r2
 800216a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f003 0203 	and.w	r2, r3, #3
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	4313      	orrs	r3, r2
 8002180:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d00b      	beq.n	80021a8 <HAL_GPIO_Init+0xd4>
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	2b02      	cmp	r3, #2
 8002196:	d007      	beq.n	80021a8 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800219c:	2b11      	cmp	r3, #17
 800219e:	d003      	beq.n	80021a8 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	2b12      	cmp	r3, #18
 80021a6:	d130      	bne.n	800220a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	2203      	movs	r2, #3
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	43db      	mvns	r3, r3
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	4013      	ands	r3, r2
 80021be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	68da      	ldr	r2, [r3, #12]
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021de:	2201      	movs	r2, #1
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	43db      	mvns	r3, r3
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	4013      	ands	r3, r2
 80021ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	091b      	lsrs	r3, r3, #4
 80021f4:	f003 0201 	and.w	r2, r3, #1
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	4313      	orrs	r3, r2
 8002202:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	2203      	movs	r2, #3
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	43db      	mvns	r3, r3
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	4013      	ands	r3, r2
 8002220:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	689a      	ldr	r2, [r3, #8]
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	4313      	orrs	r3, r2
 8002232:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002242:	2b00      	cmp	r3, #0
 8002244:	f000 80a6 	beq.w	8002394 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002248:	4b5b      	ldr	r3, [pc, #364]	; (80023b8 <HAL_GPIO_Init+0x2e4>)
 800224a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800224c:	4a5a      	ldr	r2, [pc, #360]	; (80023b8 <HAL_GPIO_Init+0x2e4>)
 800224e:	f043 0301 	orr.w	r3, r3, #1
 8002252:	6613      	str	r3, [r2, #96]	; 0x60
 8002254:	4b58      	ldr	r3, [pc, #352]	; (80023b8 <HAL_GPIO_Init+0x2e4>)
 8002256:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	60bb      	str	r3, [r7, #8]
 800225e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002260:	4a56      	ldr	r2, [pc, #344]	; (80023bc <HAL_GPIO_Init+0x2e8>)
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	089b      	lsrs	r3, r3, #2
 8002266:	3302      	adds	r3, #2
 8002268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800226c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	f003 0303 	and.w	r3, r3, #3
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	220f      	movs	r2, #15
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	43db      	mvns	r3, r3
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	4013      	ands	r3, r2
 8002282:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800228a:	d01f      	beq.n	80022cc <HAL_GPIO_Init+0x1f8>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a4c      	ldr	r2, [pc, #304]	; (80023c0 <HAL_GPIO_Init+0x2ec>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d019      	beq.n	80022c8 <HAL_GPIO_Init+0x1f4>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4a4b      	ldr	r2, [pc, #300]	; (80023c4 <HAL_GPIO_Init+0x2f0>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d013      	beq.n	80022c4 <HAL_GPIO_Init+0x1f0>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a4a      	ldr	r2, [pc, #296]	; (80023c8 <HAL_GPIO_Init+0x2f4>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d00d      	beq.n	80022c0 <HAL_GPIO_Init+0x1ec>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4a49      	ldr	r2, [pc, #292]	; (80023cc <HAL_GPIO_Init+0x2f8>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d007      	beq.n	80022bc <HAL_GPIO_Init+0x1e8>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a48      	ldr	r2, [pc, #288]	; (80023d0 <HAL_GPIO_Init+0x2fc>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d101      	bne.n	80022b8 <HAL_GPIO_Init+0x1e4>
 80022b4:	2305      	movs	r3, #5
 80022b6:	e00a      	b.n	80022ce <HAL_GPIO_Init+0x1fa>
 80022b8:	2306      	movs	r3, #6
 80022ba:	e008      	b.n	80022ce <HAL_GPIO_Init+0x1fa>
 80022bc:	2304      	movs	r3, #4
 80022be:	e006      	b.n	80022ce <HAL_GPIO_Init+0x1fa>
 80022c0:	2303      	movs	r3, #3
 80022c2:	e004      	b.n	80022ce <HAL_GPIO_Init+0x1fa>
 80022c4:	2302      	movs	r3, #2
 80022c6:	e002      	b.n	80022ce <HAL_GPIO_Init+0x1fa>
 80022c8:	2301      	movs	r3, #1
 80022ca:	e000      	b.n	80022ce <HAL_GPIO_Init+0x1fa>
 80022cc:	2300      	movs	r3, #0
 80022ce:	697a      	ldr	r2, [r7, #20]
 80022d0:	f002 0203 	and.w	r2, r2, #3
 80022d4:	0092      	lsls	r2, r2, #2
 80022d6:	4093      	lsls	r3, r2
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	4313      	orrs	r3, r2
 80022dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022de:	4937      	ldr	r1, [pc, #220]	; (80023bc <HAL_GPIO_Init+0x2e8>)
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	089b      	lsrs	r3, r3, #2
 80022e4:	3302      	adds	r3, #2
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80022ec:	4b39      	ldr	r3, [pc, #228]	; (80023d4 <HAL_GPIO_Init+0x300>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	43db      	mvns	r3, r3
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	4013      	ands	r3, r2
 80022fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d003      	beq.n	8002310 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	4313      	orrs	r3, r2
 800230e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002310:	4a30      	ldr	r2, [pc, #192]	; (80023d4 <HAL_GPIO_Init+0x300>)
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002316:	4b2f      	ldr	r3, [pc, #188]	; (80023d4 <HAL_GPIO_Init+0x300>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	43db      	mvns	r3, r3
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	4013      	ands	r3, r2
 8002324:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	4313      	orrs	r3, r2
 8002338:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800233a:	4a26      	ldr	r2, [pc, #152]	; (80023d4 <HAL_GPIO_Init+0x300>)
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002340:	4b24      	ldr	r3, [pc, #144]	; (80023d4 <HAL_GPIO_Init+0x300>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	43db      	mvns	r3, r3
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	4013      	ands	r3, r2
 800234e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d003      	beq.n	8002364 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	4313      	orrs	r3, r2
 8002362:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002364:	4a1b      	ldr	r2, [pc, #108]	; (80023d4 <HAL_GPIO_Init+0x300>)
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800236a:	4b1a      	ldr	r3, [pc, #104]	; (80023d4 <HAL_GPIO_Init+0x300>)
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	43db      	mvns	r3, r3
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	4013      	ands	r3, r2
 8002378:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d003      	beq.n	800238e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	4313      	orrs	r3, r2
 800238c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800238e:	4a11      	ldr	r2, [pc, #68]	; (80023d4 <HAL_GPIO_Init+0x300>)
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	3301      	adds	r3, #1
 8002398:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	fa22 f303 	lsr.w	r3, r2, r3
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f47f ae9d 	bne.w	80020e4 <HAL_GPIO_Init+0x10>
  }
}
 80023aa:	bf00      	nop
 80023ac:	371c      	adds	r7, #28
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	40021000 	.word	0x40021000
 80023bc:	40010000 	.word	0x40010000
 80023c0:	48000400 	.word	0x48000400
 80023c4:	48000800 	.word	0x48000800
 80023c8:	48000c00 	.word	0x48000c00
 80023cc:	48001000 	.word	0x48001000
 80023d0:	48001400 	.word	0x48001400
 80023d4:	40010400 	.word	0x40010400

080023d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	460b      	mov	r3, r1
 80023e2:	807b      	strh	r3, [r7, #2]
 80023e4:	4613      	mov	r3, r2
 80023e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023e8:	787b      	ldrb	r3, [r7, #1]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d003      	beq.n	80023f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023ee:	887a      	ldrh	r2, [r7, #2]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023f4:	e002      	b.n	80023fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023f6:	887a      	ldrh	r2, [r7, #2]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800240a:	b08b      	sub	sp, #44	; 0x2c
 800240c:	af06      	add	r7, sp, #24
 800240e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e0ad      	b.n	8002576 <HAL_PCD_Init+0x16e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d106      	bne.n	8002434 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f008 fd76 	bl	800af20 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2203      	movs	r2, #3
 8002438:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4618      	mov	r0, r3
 8002442:	f002 f9db 	bl	80047fc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002446:	2300      	movs	r3, #0
 8002448:	73fb      	strb	r3, [r7, #15]
 800244a:	e035      	b.n	80024b8 <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800244c:	7bfb      	ldrb	r3, [r7, #15]
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	015b      	lsls	r3, r3, #5
 8002452:	4413      	add	r3, r2
 8002454:	3329      	adds	r3, #41	; 0x29
 8002456:	2201      	movs	r2, #1
 8002458:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800245a:	7bfb      	ldrb	r3, [r7, #15]
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	015b      	lsls	r3, r3, #5
 8002460:	4413      	add	r3, r2
 8002462:	3328      	adds	r3, #40	; 0x28
 8002464:	7bfa      	ldrb	r2, [r7, #15]
 8002466:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002468:	7bfb      	ldrb	r3, [r7, #15]
 800246a:	7bfa      	ldrb	r2, [r7, #15]
 800246c:	b291      	uxth	r1, r2
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	015b      	lsls	r3, r3, #5
 8002472:	4413      	add	r3, r2
 8002474:	3336      	adds	r3, #54	; 0x36
 8002476:	460a      	mov	r2, r1
 8002478:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800247a:	7bfb      	ldrb	r3, [r7, #15]
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	015b      	lsls	r3, r3, #5
 8002480:	4413      	add	r3, r2
 8002482:	332b      	adds	r3, #43	; 0x2b
 8002484:	2200      	movs	r2, #0
 8002486:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002488:	7bfb      	ldrb	r3, [r7, #15]
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	015b      	lsls	r3, r3, #5
 800248e:	4413      	add	r3, r2
 8002490:	3338      	adds	r3, #56	; 0x38
 8002492:	2200      	movs	r2, #0
 8002494:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002496:	7bfb      	ldrb	r3, [r7, #15]
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	015b      	lsls	r3, r3, #5
 800249c:	4413      	add	r3, r2
 800249e:	333c      	adds	r3, #60	; 0x3c
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80024a4:	7bfb      	ldrb	r3, [r7, #15]
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	3302      	adds	r3, #2
 80024aa:	015b      	lsls	r3, r3, #5
 80024ac:	4413      	add	r3, r2
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024b2:	7bfb      	ldrb	r3, [r7, #15]
 80024b4:	3301      	adds	r3, #1
 80024b6:	73fb      	strb	r3, [r7, #15]
 80024b8:	7bfa      	ldrb	r2, [r7, #15]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d3c4      	bcc.n	800244c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024c2:	2300      	movs	r3, #0
 80024c4:	73fb      	strb	r3, [r7, #15]
 80024c6:	e031      	b.n	800252c <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80024c8:	7bfb      	ldrb	r3, [r7, #15]
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	015b      	lsls	r3, r3, #5
 80024ce:	4413      	add	r3, r2
 80024d0:	f203 1329 	addw	r3, r3, #297	; 0x129
 80024d4:	2200      	movs	r2, #0
 80024d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80024d8:	7bfb      	ldrb	r3, [r7, #15]
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	015b      	lsls	r3, r3, #5
 80024de:	4413      	add	r3, r2
 80024e0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80024e4:	7bfa      	ldrb	r2, [r7, #15]
 80024e6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80024e8:	7bfb      	ldrb	r3, [r7, #15]
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	015b      	lsls	r3, r3, #5
 80024ee:	4413      	add	r3, r2
 80024f0:	f203 132b 	addw	r3, r3, #299	; 0x12b
 80024f4:	2200      	movs	r2, #0
 80024f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80024f8:	7bfb      	ldrb	r3, [r7, #15]
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	015b      	lsls	r3, r3, #5
 80024fe:	4413      	add	r3, r2
 8002500:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002508:	7bfb      	ldrb	r3, [r7, #15]
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	015b      	lsls	r3, r3, #5
 800250e:	4413      	add	r3, r2
 8002510:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002518:	7bfb      	ldrb	r3, [r7, #15]
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	330a      	adds	r3, #10
 800251e:	015b      	lsls	r3, r3, #5
 8002520:	4413      	add	r3, r2
 8002522:	2200      	movs	r2, #0
 8002524:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002526:	7bfb      	ldrb	r3, [r7, #15]
 8002528:	3301      	adds	r3, #1
 800252a:	73fb      	strb	r3, [r7, #15]
 800252c:	7bfa      	ldrb	r2, [r7, #15]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	429a      	cmp	r2, r3
 8002534:	d3c8      	bcc.n	80024c8 <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	603b      	str	r3, [r7, #0]
 800253c:	687e      	ldr	r6, [r7, #4]
 800253e:	466d      	mov	r5, sp
 8002540:	f106 0410 	add.w	r4, r6, #16
 8002544:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002546:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002548:	6823      	ldr	r3, [r4, #0]
 800254a:	602b      	str	r3, [r5, #0]
 800254c:	1d33      	adds	r3, r6, #4
 800254e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002550:	6838      	ldr	r0, [r7, #0]
 8002552:	f002 f970 	bl	8004836 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2201      	movs	r2, #1
 8002562:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d102      	bne.n	8002574 <HAL_PCD_Init+0x16c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 fe41 	bl	80031f6 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3714      	adds	r7, #20
 800257a:	46bd      	mov	sp, r7
 800257c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800257e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b082      	sub	sp, #8
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800258c:	2b01      	cmp	r3, #1
 800258e:	d101      	bne.n	8002594 <HAL_PCD_Start+0x16>
 8002590:	2302      	movs	r3, #2
 8002592:	e012      	b.n	80025ba <HAL_PCD_Start+0x3c>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DevConnect(hpcd->Instance);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f003 f995 	bl	80058d0 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f002 f90e 	bl	80047cc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b082      	sub	sp, #8
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f003 f995 	bl	80058fe <USB_ReadInterrupts>
 80025d4:	4603      	mov	r3, r0
 80025d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025de:	d102      	bne.n	80025e6 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f000 fb3f 	bl	8002c64 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f003 f987 	bl	80058fe <USB_ReadInterrupts>
 80025f0:	4603      	mov	r3, r0
 80025f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025fa:	d112      	bne.n	8002622 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002604:	b29a      	uxth	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800260e:	b292      	uxth	r2, r2
 8002610:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f008 fcf8 	bl	800b00a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800261a:	2100      	movs	r1, #0
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f000 f929 	bl	8002874 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f003 f969 	bl	80058fe <USB_ReadInterrupts>
 800262c:	4603      	mov	r3, r0
 800262e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002632:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002636:	d10b      	bne.n	8002650 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002640:	b29a      	uxth	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800264a:	b292      	uxth	r2, r2
 800264c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4618      	mov	r0, r3
 8002656:	f003 f952 	bl	80058fe <USB_ReadInterrupts>
 800265a:	4603      	mov	r3, r0
 800265c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002660:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002664:	d10b      	bne.n	800267e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800266e:	b29a      	uxth	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002678:	b292      	uxth	r2, r2
 800267a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4618      	mov	r0, r3
 8002684:	f003 f93b 	bl	80058fe <USB_ReadInterrupts>
 8002688:	4603      	mov	r3, r0
 800268a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800268e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002692:	d133      	bne.n	80026fc <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800269c:	b29a      	uxth	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f022 0204 	bic.w	r2, r2, #4
 80026a6:	b292      	uxth	r2, r2
 80026a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f022 0208 	bic.w	r2, r2, #8
 80026be:	b292      	uxth	r2, r2
 80026c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d107      	bne.n	80026de <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80026d6:	2100      	movs	r1, #0
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f008 fe87 	bl	800b3ec <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f008 fccc 	bl	800b07c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80026f6:	b292      	uxth	r2, r2
 80026f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4618      	mov	r0, r3
 8002702:	f003 f8fc 	bl	80058fe <USB_ReadInterrupts>
 8002706:	4603      	mov	r3, r0
 8002708:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800270c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002710:	d131      	bne.n	8002776 <HAL_PCD_IRQHandler+0x1b4>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800271a:	b29a      	uxth	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f042 0208 	orr.w	r2, r2, #8
 8002724:	b292      	uxth	r2, r2
 8002726:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002732:	b29a      	uxth	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800273c:	b292      	uxth	r2, r2
 800273e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800274a:	b29a      	uxth	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f042 0204 	orr.w	r2, r2, #4
 8002754:	b292      	uxth	r2, r2
 8002756:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	f003 f8cd 	bl	80058fe <USB_ReadInterrupts>
 8002764:	4603      	mov	r3, r0
 8002766:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800276a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800276e:	d002      	beq.n	8002776 <HAL_PCD_IRQHandler+0x1b4>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f008 fc69 	bl	800b048 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f003 f8bf 	bl	80058fe <USB_ReadInterrupts>
 8002780:	4603      	mov	r3, r0
 8002782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002786:	2b80      	cmp	r3, #128	; 0x80
 8002788:	d13f      	bne.n	800280a <HAL_PCD_IRQHandler+0x248>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002792:	b29a      	uxth	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800279c:	b292      	uxth	r2, r2
 800279e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d12b      	bne.n	8002804 <HAL_PCD_IRQHandler+0x242>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f042 0204 	orr.w	r2, r2, #4
 80027be:	b292      	uxth	r2, r2
 80027c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f042 0208 	orr.w	r2, r2, #8
 80027d6:	b292      	uxth	r2, r2
 80027d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	089b      	lsrs	r3, r3, #2
 80027f0:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80027fa:	2101      	movs	r1, #1
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f008 fdf5 	bl	800b3ec <HAL_PCDEx_LPM_Callback>
 8002802:	e002      	b.n	800280a <HAL_PCD_IRQHandler+0x248>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f008 fc1f 	bl	800b048 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	f003 f875 	bl	80058fe <USB_ReadInterrupts>
 8002814:	4603      	mov	r3, r0
 8002816:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800281a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800281e:	d10e      	bne.n	800283e <HAL_PCD_IRQHandler+0x27c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002828:	b29a      	uxth	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002832:	b292      	uxth	r2, r2
 8002834:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f008 fbd8 	bl	800afee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f003 f85b 	bl	80058fe <USB_ReadInterrupts>
 8002848:	4603      	mov	r3, r0
 800284a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800284e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002852:	d10b      	bne.n	800286c <HAL_PCD_IRQHandler+0x2aa>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800285c:	b29a      	uxth	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002866:	b292      	uxth	r2, r2
 8002868:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800286c:	bf00      	nop
 800286e:	3708      	adds	r7, #8
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	460b      	mov	r3, r1
 800287e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002886:	2b01      	cmp	r3, #1
 8002888:	d101      	bne.n	800288e <HAL_PCD_SetAddress+0x1a>
 800288a:	2302      	movs	r3, #2
 800288c:	e013      	b.n	80028b6 <HAL_PCD_SetAddress+0x42>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	78fa      	ldrb	r2, [r7, #3]
 800289a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	78fa      	ldrb	r2, [r7, #3]
 80028a4:	4611      	mov	r1, r2
 80028a6:	4618      	mov	r0, r3
 80028a8:	f002 fffe 	bl	80058a8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b084      	sub	sp, #16
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
 80028c6:	4608      	mov	r0, r1
 80028c8:	4611      	mov	r1, r2
 80028ca:	461a      	mov	r2, r3
 80028cc:	4603      	mov	r3, r0
 80028ce:	70fb      	strb	r3, [r7, #3]
 80028d0:	460b      	mov	r3, r1
 80028d2:	803b      	strh	r3, [r7, #0]
 80028d4:	4613      	mov	r3, r2
 80028d6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80028d8:	2300      	movs	r3, #0
 80028da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80028dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	da0b      	bge.n	80028fc <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028e4:	78fb      	ldrb	r3, [r7, #3]
 80028e6:	f003 0307 	and.w	r3, r3, #7
 80028ea:	015b      	lsls	r3, r3, #5
 80028ec:	3328      	adds	r3, #40	; 0x28
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	4413      	add	r3, r2
 80028f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2201      	movs	r2, #1
 80028f8:	705a      	strb	r2, [r3, #1]
 80028fa:	e00b      	b.n	8002914 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028fc:	78fb      	ldrb	r3, [r7, #3]
 80028fe:	f003 0307 	and.w	r3, r3, #7
 8002902:	015b      	lsls	r3, r3, #5
 8002904:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	4413      	add	r3, r2
 800290c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2200      	movs	r2, #0
 8002912:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002914:	78fb      	ldrb	r3, [r7, #3]
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	b2da      	uxtb	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002920:	883a      	ldrh	r2, [r7, #0]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	78ba      	ldrb	r2, [r7, #2]
 800292a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	785b      	ldrb	r3, [r3, #1]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d004      	beq.n	800293e <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	b29a      	uxth	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800293e:	78bb      	ldrb	r3, [r7, #2]
 8002940:	2b02      	cmp	r3, #2
 8002942:	d102      	bne.n	800294a <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2200      	movs	r2, #0
 8002948:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002950:	2b01      	cmp	r3, #1
 8002952:	d101      	bne.n	8002958 <HAL_PCD_EP_Open+0x9a>
 8002954:	2302      	movs	r3, #2
 8002956:	e00e      	b.n	8002976 <HAL_PCD_EP_Open+0xb8>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68f9      	ldr	r1, [r7, #12]
 8002966:	4618      	mov	r0, r3
 8002968:	f001 ff8a 	bl	8004880 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8002974:	7afb      	ldrb	r3, [r7, #11]
}
 8002976:	4618      	mov	r0, r3
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b084      	sub	sp, #16
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
 8002986:	460b      	mov	r3, r1
 8002988:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800298a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800298e:	2b00      	cmp	r3, #0
 8002990:	da0b      	bge.n	80029aa <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002992:	78fb      	ldrb	r3, [r7, #3]
 8002994:	f003 0307 	and.w	r3, r3, #7
 8002998:	015b      	lsls	r3, r3, #5
 800299a:	3328      	adds	r3, #40	; 0x28
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	4413      	add	r3, r2
 80029a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2201      	movs	r2, #1
 80029a6:	705a      	strb	r2, [r3, #1]
 80029a8:	e00b      	b.n	80029c2 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029aa:	78fb      	ldrb	r3, [r7, #3]
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	015b      	lsls	r3, r3, #5
 80029b2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	4413      	add	r3, r2
 80029ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2200      	movs	r2, #0
 80029c0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80029c2:	78fb      	ldrb	r3, [r7, #3]
 80029c4:	f003 0307 	and.w	r3, r3, #7
 80029c8:	b2da      	uxtb	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d101      	bne.n	80029dc <HAL_PCD_EP_Close+0x5e>
 80029d8:	2302      	movs	r3, #2
 80029da:	e00e      	b.n	80029fa <HAL_PCD_EP_Close+0x7c>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68f9      	ldr	r1, [r7, #12]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f002 fa38 	bl	8004e60 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3710      	adds	r7, #16
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b086      	sub	sp, #24
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	60f8      	str	r0, [r7, #12]
 8002a0a:	607a      	str	r2, [r7, #4]
 8002a0c:	603b      	str	r3, [r7, #0]
 8002a0e:	460b      	mov	r3, r1
 8002a10:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a12:	7afb      	ldrb	r3, [r7, #11]
 8002a14:	f003 0307 	and.w	r3, r3, #7
 8002a18:	015b      	lsls	r3, r3, #5
 8002a1a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	4413      	add	r3, r2
 8002a22:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	2200      	movs	r2, #0
 8002a34:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a3c:	7afb      	ldrb	r3, [r7, #11]
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	b2da      	uxtb	r2, r3
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a48:	7afb      	ldrb	r3, [r7, #11]
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d106      	bne.n	8002a60 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	6979      	ldr	r1, [r7, #20]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f002 fb97 	bl	800518c <USB_EPStartXfer>
 8002a5e:	e005      	b.n	8002a6c <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	6979      	ldr	r1, [r7, #20]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f002 fb90 	bl	800518c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3718      	adds	r7, #24
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a76:	b480      	push	{r7}
 8002a78:	b083      	sub	sp, #12
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
 8002a7e:	460b      	mov	r3, r1
 8002a80:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002a82:	78fb      	ldrb	r3, [r7, #3]
 8002a84:	f003 0307 	and.w	r3, r3, #7
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	330a      	adds	r3, #10
 8002a8c:	015b      	lsls	r3, r3, #5
 8002a8e:	4413      	add	r3, r2
 8002a90:	3304      	adds	r3, #4
 8002a92:	681b      	ldr	r3, [r3, #0]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	607a      	str	r2, [r7, #4]
 8002aaa:	603b      	str	r3, [r7, #0]
 8002aac:	460b      	mov	r3, r1
 8002aae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ab0:	7afb      	ldrb	r3, [r7, #11]
 8002ab2:	f003 0307 	and.w	r3, r3, #7
 8002ab6:	015b      	lsls	r3, r3, #5
 8002ab8:	3328      	adds	r3, #40	; 0x28
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	4413      	add	r3, r2
 8002abe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ad8:	7afb      	ldrb	r3, [r7, #11]
 8002ada:	f003 0307 	and.w	r3, r3, #7
 8002ade:	b2da      	uxtb	r2, r3
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ae4:	7afb      	ldrb	r3, [r7, #11]
 8002ae6:	f003 0307 	and.w	r3, r3, #7
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d106      	bne.n	8002afc <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6979      	ldr	r1, [r7, #20]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f002 fb49 	bl	800518c <USB_EPStartXfer>
 8002afa:	e005      	b.n	8002b08 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6979      	ldr	r1, [r7, #20]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f002 fb42 	bl	800518c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3718      	adds	r7, #24
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b084      	sub	sp, #16
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002b1e:	78fb      	ldrb	r3, [r7, #3]
 8002b20:	f003 0207 	and.w	r2, r3, #7
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d901      	bls.n	8002b30 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e046      	b.n	8002bbe <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	da0b      	bge.n	8002b50 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b38:	78fb      	ldrb	r3, [r7, #3]
 8002b3a:	f003 0307 	and.w	r3, r3, #7
 8002b3e:	015b      	lsls	r3, r3, #5
 8002b40:	3328      	adds	r3, #40	; 0x28
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	4413      	add	r3, r2
 8002b46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	705a      	strb	r2, [r3, #1]
 8002b4e:	e009      	b.n	8002b64 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b50:	78fb      	ldrb	r3, [r7, #3]
 8002b52:	015b      	lsls	r3, r3, #5
 8002b54:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2201      	movs	r2, #1
 8002b68:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b6a:	78fb      	ldrb	r3, [r7, #3]
 8002b6c:	f003 0307 	and.w	r3, r3, #7
 8002b70:	b2da      	uxtb	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d101      	bne.n	8002b84 <HAL_PCD_EP_SetStall+0x72>
 8002b80:	2302      	movs	r3, #2
 8002b82:	e01c      	b.n	8002bbe <HAL_PCD_EP_SetStall+0xac>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68f9      	ldr	r1, [r7, #12]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f002 fdb2 	bl	80056fc <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b98:	78fb      	ldrb	r3, [r7, #3]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d108      	bne.n	8002bb4 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8002bac:	4619      	mov	r1, r3
 8002bae:	4610      	mov	r0, r2
 8002bb0:	f002 feb5 	bl	800591e <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b084      	sub	sp, #16
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
 8002bce:	460b      	mov	r3, r1
 8002bd0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002bd2:	78fb      	ldrb	r3, [r7, #3]
 8002bd4:	f003 020f 	and.w	r2, r3, #15
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d901      	bls.n	8002be4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e03a      	b.n	8002c5a <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002be4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	da0b      	bge.n	8002c04 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bec:	78fb      	ldrb	r3, [r7, #3]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	015b      	lsls	r3, r3, #5
 8002bf4:	3328      	adds	r3, #40	; 0x28
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	705a      	strb	r2, [r3, #1]
 8002c02:	e00b      	b.n	8002c1c <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c04:	78fb      	ldrb	r3, [r7, #3]
 8002c06:	f003 0307 	and.w	r3, r3, #7
 8002c0a:	015b      	lsls	r3, r3, #5
 8002c0c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	4413      	add	r3, r2
 8002c14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c22:	78fb      	ldrb	r3, [r7, #3]
 8002c24:	f003 0307 	and.w	r3, r3, #7
 8002c28:	b2da      	uxtb	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d101      	bne.n	8002c3c <HAL_PCD_EP_ClrStall+0x76>
 8002c38:	2302      	movs	r3, #2
 8002c3a:	e00e      	b.n	8002c5a <HAL_PCD_EP_ClrStall+0x94>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68f9      	ldr	r1, [r7, #12]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f002 fd98 	bl	8005780 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3710      	adds	r7, #16
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
	...

08002c64 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002c64:	b590      	push	{r4, r7, lr}
 8002c66:	b089      	sub	sp, #36	; 0x24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002c6c:	e274      	b.n	8003158 <PCD_EP_ISR_Handler+0x4f4>
  {
    wIstr = hpcd->Instance->ISTR;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c76:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002c78:	8afb      	ldrh	r3, [r7, #22]
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	f003 030f 	and.w	r3, r3, #15
 8002c80:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8002c82:	7d7b      	ldrb	r3, [r7, #21]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f040 813c 	bne.w	8002f02 <PCD_EP_ISR_Handler+0x29e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002c8a:	8afb      	ldrh	r3, [r7, #22]
 8002c8c:	f003 0310 	and.w	r3, r3, #16
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d14f      	bne.n	8002d34 <PCD_EP_ISR_Handler+0xd0>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	881b      	ldrh	r3, [r3, #0]
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002ca0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ca4:	b29c      	uxth	r4, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8002cae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	3328      	adds	r3, #40	; 0x28
 8002cba:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	00db      	lsls	r3, r3, #3
 8002cce:	4413      	add	r3, r2
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	6812      	ldr	r2, [r2, #0]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002cda:	881b      	ldrh	r3, [r3, #0]
 8002cdc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	695a      	ldr	r2, [r3, #20]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	69db      	ldr	r3, [r3, #28]
 8002cec:	441a      	add	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002cf2:	2100      	movs	r1, #0
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f008 f963 	bl	800afc0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f000 8228 	beq.w	8003158 <PCD_EP_ISR_Handler+0x4f4>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f040 8223 	bne.w	8003158 <PCD_EP_ISR_Handler+0x4f4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002d1e:	b2da      	uxtb	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	b292      	uxth	r2, r2
 8002d26:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002d32:	e211      	b.n	8003158 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002d3a:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	881b      	ldrh	r3, [r3, #0]
 8002d42:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002d44:	8a7b      	ldrh	r3, [r7, #18]
 8002d46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d031      	beq.n	8002db2 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	461a      	mov	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	4413      	add	r3, r2
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	6812      	ldr	r2, [r2, #0]
 8002d66:	4413      	add	r3, r2
 8002d68:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d6c:	881b      	ldrh	r3, [r3, #0]
 8002d6e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6818      	ldr	r0, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	f002 fe15 	bl	80059b8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	881b      	ldrh	r3, [r3, #0]
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	b29c      	uxth	r4, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002da6:	b292      	uxth	r2, r2
 8002da8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f008 f8de 	bl	800af6c <HAL_PCD_SetupStageCallback>
 8002db0:	e1d2      	b.n	8003158 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002db2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f280 81ce 	bge.w	8003158 <PCD_EP_ISR_Handler+0x4f4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	881b      	ldrh	r3, [r3, #0]
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002dc8:	4013      	ands	r3, r2
 8002dca:	b29c      	uxth	r4, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002dd4:	b292      	uxth	r2, r2
 8002dd6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	461a      	mov	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	00db      	lsls	r3, r3, #3
 8002dea:	4413      	add	r3, r2
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	6812      	ldr	r2, [r2, #0]
 8002df0:	4413      	add	r3, r2
 8002df2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002df6:	881b      	ldrh	r3, [r3, #0]
 8002df8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	69db      	ldr	r3, [r3, #28]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d019      	beq.n	8002e3c <PCD_EP_ISR_Handler+0x1d8>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	695b      	ldr	r3, [r3, #20]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d015      	beq.n	8002e3c <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6818      	ldr	r0, [r3, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6959      	ldr	r1, [r3, #20]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	f002 fdc9 	bl	80059b8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	695a      	ldr	r2, [r3, #20]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	441a      	add	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002e34:	2100      	movs	r1, #0
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f008 f8aa 	bl	800af90 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	461c      	mov	r4, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	441c      	add	r4, r3
 8002e4e:	f204 4306 	addw	r3, r4, #1030	; 0x406
 8002e52:	461c      	mov	r4, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d10e      	bne.n	8002e7a <PCD_EP_ISR_Handler+0x216>
 8002e5c:	8823      	ldrh	r3, [r4, #0]
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	8023      	strh	r3, [r4, #0]
 8002e68:	8823      	ldrh	r3, [r4, #0]
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	8023      	strh	r3, [r4, #0]
 8002e78:	e02d      	b.n	8002ed6 <PCD_EP_ISR_Handler+0x272>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	2b3e      	cmp	r3, #62	; 0x3e
 8002e80:	d812      	bhi.n	8002ea8 <PCD_EP_ISR_Handler+0x244>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	085b      	lsrs	r3, r3, #1
 8002e88:	61bb      	str	r3, [r7, #24]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d002      	beq.n	8002e9c <PCD_EP_ISR_Handler+0x238>
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	61bb      	str	r3, [r7, #24]
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	029b      	lsls	r3, r3, #10
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	8023      	strh	r3, [r4, #0]
 8002ea6:	e016      	b.n	8002ed6 <PCD_EP_ISR_Handler+0x272>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	095b      	lsrs	r3, r3, #5
 8002eae:	61bb      	str	r3, [r7, #24]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	f003 031f 	and.w	r3, r3, #31
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d102      	bne.n	8002ec2 <PCD_EP_ISR_Handler+0x25e>
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	61bb      	str	r3, [r7, #24]
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	029b      	lsls	r3, r3, #10
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ece:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	881b      	ldrh	r3, [r3, #0]
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ee6:	b29c      	uxth	r4, r3
 8002ee8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002eec:	b29c      	uxth	r4, r3
 8002eee:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002ef2:	b29c      	uxth	r4, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	4b9e      	ldr	r3, [pc, #632]	; (8003174 <PCD_EP_ISR_Handler+0x510>)
 8002efa:	4323      	orrs	r3, r4
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	8013      	strh	r3, [r2, #0]
 8002f00:	e12a      	b.n	8003158 <PCD_EP_ISR_Handler+0x4f4>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	461a      	mov	r2, r3
 8002f08:	7d7b      	ldrb	r3, [r7, #21]
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	4413      	add	r3, r2
 8002f0e:	881b      	ldrh	r3, [r3, #0]
 8002f10:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002f12:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f280 80cb 	bge.w	80030b2 <PCD_EP_ISR_Handler+0x44e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	461a      	mov	r2, r3
 8002f22:	7d7b      	ldrb	r3, [r7, #21]
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	4413      	add	r3, r2
 8002f28:	881b      	ldrh	r3, [r3, #0]
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002f30:	4013      	ands	r3, r2
 8002f32:	b29c      	uxth	r4, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	461a      	mov	r2, r3
 8002f3a:	7d7b      	ldrb	r3, [r7, #21]
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	4413      	add	r3, r2
 8002f40:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002f44:	b292      	uxth	r2, r2
 8002f46:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002f48:	7d7b      	ldrb	r3, [r7, #21]
 8002f4a:	015b      	lsls	r3, r3, #5
 8002f4c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	4413      	add	r3, r2
 8002f54:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	7b1b      	ldrb	r3, [r3, #12]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d11f      	bne.n	8002f9e <PCD_EP_ISR_Handler+0x33a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	461a      	mov	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	4413      	add	r3, r2
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	6812      	ldr	r2, [r2, #0]
 8002f76:	4413      	add	r3, r2
 8002f78:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002f7c:	881b      	ldrh	r3, [r3, #0]
 8002f7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f82:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8002f84:	8bfb      	ldrh	r3, [r7, #30]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d06e      	beq.n	8003068 <PCD_EP_ISR_Handler+0x404>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6818      	ldr	r0, [r3, #0]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6959      	ldr	r1, [r3, #20]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	88da      	ldrh	r2, [r3, #6]
 8002f96:	8bfb      	ldrh	r3, [r7, #30]
 8002f98:	f002 fd0e 	bl	80059b8 <USB_ReadPMA>
 8002f9c:	e064      	b.n	8003068 <PCD_EP_ISR_Handler+0x404>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	4413      	add	r3, r2
 8002fac:	881b      	ldrh	r3, [r3, #0]
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d01f      	beq.n	8002ff8 <PCD_EP_ISR_Handler+0x394>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	4413      	add	r3, r2
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	6812      	ldr	r2, [r2, #0]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002fd6:	881b      	ldrh	r3, [r3, #0]
 8002fd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fdc:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8002fde:	8bfb      	ldrh	r3, [r7, #30]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d028      	beq.n	8003036 <PCD_EP_ISR_Handler+0x3d2>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6818      	ldr	r0, [r3, #0]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6959      	ldr	r1, [r3, #20]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	891a      	ldrh	r2, [r3, #8]
 8002ff0:	8bfb      	ldrh	r3, [r7, #30]
 8002ff2:	f002 fce1 	bl	80059b8 <USB_ReadPMA>
 8002ff6:	e01e      	b.n	8003036 <PCD_EP_ISR_Handler+0x3d2>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003000:	b29b      	uxth	r3, r3
 8003002:	461a      	mov	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	4413      	add	r3, r2
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	6812      	ldr	r2, [r2, #0]
 8003010:	4413      	add	r3, r2
 8003012:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003016:	881b      	ldrh	r3, [r3, #0]
 8003018:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800301c:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800301e:	8bfb      	ldrh	r3, [r7, #30]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d008      	beq.n	8003036 <PCD_EP_ISR_Handler+0x3d2>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6818      	ldr	r0, [r3, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6959      	ldr	r1, [r3, #20]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	895a      	ldrh	r2, [r3, #10]
 8003030:	8bfb      	ldrh	r3, [r7, #30]
 8003032:	f002 fcc1 	bl	80059b8 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	461a      	mov	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	4413      	add	r3, r2
 8003044:	881b      	ldrh	r3, [r3, #0]
 8003046:	b29b      	uxth	r3, r3
 8003048:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800304c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003050:	b29c      	uxth	r4, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	461a      	mov	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	441a      	add	r2, r3
 8003060:	4b45      	ldr	r3, [pc, #276]	; (8003178 <PCD_EP_ISR_Handler+0x514>)
 8003062:	4323      	orrs	r3, r4
 8003064:	b29b      	uxth	r3, r3
 8003066:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	69da      	ldr	r2, [r3, #28]
 800306c:	8bfb      	ldrh	r3, [r7, #30]
 800306e:	441a      	add	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	695a      	ldr	r2, [r3, #20]
 8003078:	8bfb      	ldrh	r3, [r7, #30]
 800307a:	441a      	add	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d004      	beq.n	8003092 <PCD_EP_ISR_Handler+0x42e>
 8003088:	8bfa      	ldrh	r2, [r7, #30]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	429a      	cmp	r2, r3
 8003090:	d206      	bcs.n	80030a0 <PCD_EP_ISR_Handler+0x43c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	4619      	mov	r1, r3
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f007 ff79 	bl	800af90 <HAL_PCD_DataOutStageCallback>
 800309e:	e008      	b.n	80030b2 <PCD_EP_ISR_Handler+0x44e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	7819      	ldrb	r1, [r3, #0]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	695a      	ldr	r2, [r3, #20]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f7ff fca8 	bl	8002a02 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80030b2:	8a7b      	ldrh	r3, [r7, #18]
 80030b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d04d      	beq.n	8003158 <PCD_EP_ISR_Handler+0x4f4>
      {
        ep = &hpcd->IN_ep[epindex];
 80030bc:	7d7b      	ldrb	r3, [r7, #21]
 80030be:	015b      	lsls	r3, r3, #5
 80030c0:	3328      	adds	r3, #40	; 0x28
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	4413      	add	r3, r2
 80030c6:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	461a      	mov	r2, r3
 80030ce:	7d7b      	ldrb	r3, [r7, #21]
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	4413      	add	r3, r2
 80030d4:	881b      	ldrh	r3, [r3, #0]
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80030dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030e0:	b29c      	uxth	r4, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	461a      	mov	r2, r3
 80030e8:	7d7b      	ldrb	r3, [r7, #21]
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	441a      	add	r2, r3
 80030ee:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80030f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003102:	b29b      	uxth	r3, r3
 8003104:	461a      	mov	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	4413      	add	r3, r2
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	6812      	ldr	r2, [r2, #0]
 8003112:	4413      	add	r3, r2
 8003114:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003118:	881b      	ldrh	r3, [r3, #0]
 800311a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	695a      	ldr	r2, [r3, #20]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	69db      	ldr	r3, [r3, #28]
 800312a:	441a      	add	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d106      	bne.n	8003146 <PCD_EP_ISR_Handler+0x4e2>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	4619      	mov	r1, r3
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f007 ff3e 	bl	800afc0 <HAL_PCD_DataInStageCallback>
 8003144:	e008      	b.n	8003158 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	7819      	ldrb	r1, [r3, #0]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	695a      	ldr	r2, [r3, #20]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f7ff fca4 	bl	8002aa0 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003160:	b29b      	uxth	r3, r3
 8003162:	b21b      	sxth	r3, r3
 8003164:	2b00      	cmp	r3, #0
 8003166:	f6ff ad82 	blt.w	8002c6e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3724      	adds	r7, #36	; 0x24
 8003170:	46bd      	mov	sp, r7
 8003172:	bd90      	pop	{r4, r7, pc}
 8003174:	ffff8080 	.word	0xffff8080
 8003178:	ffff80c0 	.word	0xffff80c0

0800317c <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 800317c:	b480      	push	{r7}
 800317e:	b087      	sub	sp, #28
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	607b      	str	r3, [r7, #4]
 8003186:	460b      	mov	r3, r1
 8003188:	817b      	strh	r3, [r7, #10]
 800318a:	4613      	mov	r3, r2
 800318c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800318e:	897b      	ldrh	r3, [r7, #10]
 8003190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003194:	b29b      	uxth	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d008      	beq.n	80031ac <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800319a:	897b      	ldrh	r3, [r7, #10]
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	015b      	lsls	r3, r3, #5
 80031a2:	3328      	adds	r3, #40	; 0x28
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	4413      	add	r3, r2
 80031a8:	617b      	str	r3, [r7, #20]
 80031aa:	e006      	b.n	80031ba <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80031ac:	897b      	ldrh	r3, [r7, #10]
 80031ae:	015b      	lsls	r3, r3, #5
 80031b0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80031b4:	68fa      	ldr	r2, [r7, #12]
 80031b6:	4413      	add	r3, r2
 80031b8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80031ba:	893b      	ldrh	r3, [r7, #8]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d107      	bne.n	80031d0 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	2200      	movs	r2, #0
 80031c4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	80da      	strh	r2, [r3, #6]
 80031ce:	e00b      	b.n	80031e8 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	2201      	movs	r2, #1
 80031d4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	b29a      	uxth	r2, r3
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	0c1b      	lsrs	r3, r3, #16
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	371c      	adds	r7, #28
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr

080031f6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80031f6:	b480      	push	{r7}
 80031f8:	b085      	sub	sp, #20
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800321a:	b29b      	uxth	r3, r3
 800321c:	f043 0301 	orr.w	r3, r3, #1
 8003220:	b29a      	uxth	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800322e:	b29b      	uxth	r3, r3
 8003230:	f043 0302 	orr.w	r3, r3, #2
 8003234:	b29a      	uxth	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3714      	adds	r7, #20
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
	...

0800324c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d141      	bne.n	80032de <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800325a:	4b4b      	ldr	r3, [pc, #300]	; (8003388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003262:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003266:	d131      	bne.n	80032cc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003268:	4b47      	ldr	r3, [pc, #284]	; (8003388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800326a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800326e:	4a46      	ldr	r2, [pc, #280]	; (8003388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003270:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003274:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003278:	4b43      	ldr	r3, [pc, #268]	; (8003388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003280:	4a41      	ldr	r2, [pc, #260]	; (8003388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003282:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003286:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003288:	4b40      	ldr	r3, [pc, #256]	; (800338c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2232      	movs	r2, #50	; 0x32
 800328e:	fb02 f303 	mul.w	r3, r2, r3
 8003292:	4a3f      	ldr	r2, [pc, #252]	; (8003390 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003294:	fba2 2303 	umull	r2, r3, r2, r3
 8003298:	0c9b      	lsrs	r3, r3, #18
 800329a:	3301      	adds	r3, #1
 800329c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800329e:	e002      	b.n	80032a6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	3b01      	subs	r3, #1
 80032a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032a6:	4b38      	ldr	r3, [pc, #224]	; (8003388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032b2:	d102      	bne.n	80032ba <HAL_PWREx_ControlVoltageScaling+0x6e>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1f2      	bne.n	80032a0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032ba:	4b33      	ldr	r3, [pc, #204]	; (8003388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032c6:	d158      	bne.n	800337a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e057      	b.n	800337c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032cc:	4b2e      	ldr	r3, [pc, #184]	; (8003388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032d2:	4a2d      	ldr	r2, [pc, #180]	; (8003388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80032dc:	e04d      	b.n	800337a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032e4:	d141      	bne.n	800336a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80032e6:	4b28      	ldr	r3, [pc, #160]	; (8003388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032f2:	d131      	bne.n	8003358 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032f4:	4b24      	ldr	r3, [pc, #144]	; (8003388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032fa:	4a23      	ldr	r2, [pc, #140]	; (8003388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003300:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003304:	4b20      	ldr	r3, [pc, #128]	; (8003388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800330c:	4a1e      	ldr	r2, [pc, #120]	; (8003388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800330e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003312:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003314:	4b1d      	ldr	r3, [pc, #116]	; (800338c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2232      	movs	r2, #50	; 0x32
 800331a:	fb02 f303 	mul.w	r3, r2, r3
 800331e:	4a1c      	ldr	r2, [pc, #112]	; (8003390 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003320:	fba2 2303 	umull	r2, r3, r2, r3
 8003324:	0c9b      	lsrs	r3, r3, #18
 8003326:	3301      	adds	r3, #1
 8003328:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800332a:	e002      	b.n	8003332 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	3b01      	subs	r3, #1
 8003330:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003332:	4b15      	ldr	r3, [pc, #84]	; (8003388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800333a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800333e:	d102      	bne.n	8003346 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1f2      	bne.n	800332c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003346:	4b10      	ldr	r3, [pc, #64]	; (8003388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800334e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003352:	d112      	bne.n	800337a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e011      	b.n	800337c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003358:	4b0b      	ldr	r3, [pc, #44]	; (8003388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800335a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800335e:	4a0a      	ldr	r2, [pc, #40]	; (8003388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003364:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003368:	e007      	b.n	800337a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800336a:	4b07      	ldr	r3, [pc, #28]	; (8003388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003372:	4a05      	ldr	r2, [pc, #20]	; (8003388 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003374:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003378:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3714      	adds	r7, #20
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr
 8003388:	40007000 	.word	0x40007000
 800338c:	2000011c 	.word	0x2000011c
 8003390:	431bde83 	.word	0x431bde83

08003394 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b088      	sub	sp, #32
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e308      	b.n	80039b8 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d075      	beq.n	800349e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033b2:	4ba3      	ldr	r3, [pc, #652]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f003 030c 	and.w	r3, r3, #12
 80033ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033bc:	4ba0      	ldr	r3, [pc, #640]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	f003 0303 	and.w	r3, r3, #3
 80033c4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	2b0c      	cmp	r3, #12
 80033ca:	d102      	bne.n	80033d2 <HAL_RCC_OscConfig+0x3e>
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	2b03      	cmp	r3, #3
 80033d0:	d002      	beq.n	80033d8 <HAL_RCC_OscConfig+0x44>
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	2b08      	cmp	r3, #8
 80033d6:	d10b      	bne.n	80033f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033d8:	4b99      	ldr	r3, [pc, #612]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d05b      	beq.n	800349c <HAL_RCC_OscConfig+0x108>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d157      	bne.n	800349c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e2e3      	b.n	80039b8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033f8:	d106      	bne.n	8003408 <HAL_RCC_OscConfig+0x74>
 80033fa:	4b91      	ldr	r3, [pc, #580]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a90      	ldr	r2, [pc, #576]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 8003400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003404:	6013      	str	r3, [r2, #0]
 8003406:	e01d      	b.n	8003444 <HAL_RCC_OscConfig+0xb0>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003410:	d10c      	bne.n	800342c <HAL_RCC_OscConfig+0x98>
 8003412:	4b8b      	ldr	r3, [pc, #556]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a8a      	ldr	r2, [pc, #552]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 8003418:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800341c:	6013      	str	r3, [r2, #0]
 800341e:	4b88      	ldr	r3, [pc, #544]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a87      	ldr	r2, [pc, #540]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 8003424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003428:	6013      	str	r3, [r2, #0]
 800342a:	e00b      	b.n	8003444 <HAL_RCC_OscConfig+0xb0>
 800342c:	4b84      	ldr	r3, [pc, #528]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a83      	ldr	r2, [pc, #524]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 8003432:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003436:	6013      	str	r3, [r2, #0]
 8003438:	4b81      	ldr	r3, [pc, #516]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a80      	ldr	r2, [pc, #512]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 800343e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003442:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d013      	beq.n	8003474 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800344c:	f7fc ff76 	bl	800033c <HAL_GetTick>
 8003450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003452:	e008      	b.n	8003466 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003454:	f7fc ff72 	bl	800033c <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b64      	cmp	r3, #100	; 0x64
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e2a8      	b.n	80039b8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003466:	4b76      	ldr	r3, [pc, #472]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d0f0      	beq.n	8003454 <HAL_RCC_OscConfig+0xc0>
 8003472:	e014      	b.n	800349e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003474:	f7fc ff62 	bl	800033c <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800347a:	e008      	b.n	800348e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800347c:	f7fc ff5e 	bl	800033c <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b64      	cmp	r3, #100	; 0x64
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e294      	b.n	80039b8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800348e:	4b6c      	ldr	r3, [pc, #432]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1f0      	bne.n	800347c <HAL_RCC_OscConfig+0xe8>
 800349a:	e000      	b.n	800349e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800349c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d075      	beq.n	8003596 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034aa:	4b65      	ldr	r3, [pc, #404]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f003 030c 	and.w	r3, r3, #12
 80034b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034b4:	4b62      	ldr	r3, [pc, #392]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	f003 0303 	and.w	r3, r3, #3
 80034bc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	2b0c      	cmp	r3, #12
 80034c2:	d102      	bne.n	80034ca <HAL_RCC_OscConfig+0x136>
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d002      	beq.n	80034d0 <HAL_RCC_OscConfig+0x13c>
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	2b04      	cmp	r3, #4
 80034ce:	d11f      	bne.n	8003510 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034d0:	4b5b      	ldr	r3, [pc, #364]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d005      	beq.n	80034e8 <HAL_RCC_OscConfig+0x154>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d101      	bne.n	80034e8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e267      	b.n	80039b8 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e8:	4b55      	ldr	r3, [pc, #340]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	061b      	lsls	r3, r3, #24
 80034f6:	4952      	ldr	r1, [pc, #328]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80034fc:	4b51      	ldr	r3, [pc, #324]	; (8003644 <HAL_RCC_OscConfig+0x2b0>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4618      	mov	r0, r3
 8003502:	f7fc fecf 	bl	80002a4 <HAL_InitTick>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d043      	beq.n	8003594 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e253      	b.n	80039b8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d023      	beq.n	8003560 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003518:	4b49      	ldr	r3, [pc, #292]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a48      	ldr	r2, [pc, #288]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 800351e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003522:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003524:	f7fc ff0a 	bl	800033c <HAL_GetTick>
 8003528:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800352a:	e008      	b.n	800353e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800352c:	f7fc ff06 	bl	800033c <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d901      	bls.n	800353e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e23c      	b.n	80039b8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800353e:	4b40      	ldr	r3, [pc, #256]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003546:	2b00      	cmp	r3, #0
 8003548:	d0f0      	beq.n	800352c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800354a:	4b3d      	ldr	r3, [pc, #244]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	061b      	lsls	r3, r3, #24
 8003558:	4939      	ldr	r1, [pc, #228]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 800355a:	4313      	orrs	r3, r2
 800355c:	604b      	str	r3, [r1, #4]
 800355e:	e01a      	b.n	8003596 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003560:	4b37      	ldr	r3, [pc, #220]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a36      	ldr	r2, [pc, #216]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 8003566:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800356a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356c:	f7fc fee6 	bl	800033c <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003574:	f7fc fee2 	bl	800033c <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e218      	b.n	80039b8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003586:	4b2e      	ldr	r3, [pc, #184]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1f0      	bne.n	8003574 <HAL_RCC_OscConfig+0x1e0>
 8003592:	e000      	b.n	8003596 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003594:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0308 	and.w	r3, r3, #8
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d03c      	beq.n	800361c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d01c      	beq.n	80035e4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035aa:	4b25      	ldr	r3, [pc, #148]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 80035ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035b0:	4a23      	ldr	r2, [pc, #140]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 80035b2:	f043 0301 	orr.w	r3, r3, #1
 80035b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ba:	f7fc febf 	bl	800033c <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035c0:	e008      	b.n	80035d4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035c2:	f7fc febb 	bl	800033c <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d901      	bls.n	80035d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e1f1      	b.n	80039b8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035d4:	4b1a      	ldr	r3, [pc, #104]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 80035d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d0ef      	beq.n	80035c2 <HAL_RCC_OscConfig+0x22e>
 80035e2:	e01b      	b.n	800361c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035e4:	4b16      	ldr	r3, [pc, #88]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 80035e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035ea:	4a15      	ldr	r2, [pc, #84]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 80035ec:	f023 0301 	bic.w	r3, r3, #1
 80035f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f4:	f7fc fea2 	bl	800033c <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035fa:	e008      	b.n	800360e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035fc:	f7fc fe9e 	bl	800033c <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e1d4      	b.n	80039b8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800360e:	4b0c      	ldr	r3, [pc, #48]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 8003610:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1ef      	bne.n	80035fc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0304 	and.w	r3, r3, #4
 8003624:	2b00      	cmp	r3, #0
 8003626:	f000 80ab 	beq.w	8003780 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800362a:	2300      	movs	r3, #0
 800362c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800362e:	4b04      	ldr	r3, [pc, #16]	; (8003640 <HAL_RCC_OscConfig+0x2ac>)
 8003630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d106      	bne.n	8003648 <HAL_RCC_OscConfig+0x2b4>
 800363a:	2301      	movs	r3, #1
 800363c:	e005      	b.n	800364a <HAL_RCC_OscConfig+0x2b6>
 800363e:	bf00      	nop
 8003640:	40021000 	.word	0x40021000
 8003644:	20000000 	.word	0x20000000
 8003648:	2300      	movs	r3, #0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00d      	beq.n	800366a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800364e:	4baf      	ldr	r3, [pc, #700]	; (800390c <HAL_RCC_OscConfig+0x578>)
 8003650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003652:	4aae      	ldr	r2, [pc, #696]	; (800390c <HAL_RCC_OscConfig+0x578>)
 8003654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003658:	6593      	str	r3, [r2, #88]	; 0x58
 800365a:	4bac      	ldr	r3, [pc, #688]	; (800390c <HAL_RCC_OscConfig+0x578>)
 800365c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800365e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003662:	60fb      	str	r3, [r7, #12]
 8003664:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003666:	2301      	movs	r3, #1
 8003668:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800366a:	4ba9      	ldr	r3, [pc, #676]	; (8003910 <HAL_RCC_OscConfig+0x57c>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003672:	2b00      	cmp	r3, #0
 8003674:	d118      	bne.n	80036a8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003676:	4ba6      	ldr	r3, [pc, #664]	; (8003910 <HAL_RCC_OscConfig+0x57c>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4aa5      	ldr	r2, [pc, #660]	; (8003910 <HAL_RCC_OscConfig+0x57c>)
 800367c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003680:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003682:	f7fc fe5b 	bl	800033c <HAL_GetTick>
 8003686:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003688:	e008      	b.n	800369c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800368a:	f7fc fe57 	bl	800033c <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b02      	cmp	r3, #2
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e18d      	b.n	80039b8 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800369c:	4b9c      	ldr	r3, [pc, #624]	; (8003910 <HAL_RCC_OscConfig+0x57c>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d0f0      	beq.n	800368a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d108      	bne.n	80036c2 <HAL_RCC_OscConfig+0x32e>
 80036b0:	4b96      	ldr	r3, [pc, #600]	; (800390c <HAL_RCC_OscConfig+0x578>)
 80036b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b6:	4a95      	ldr	r2, [pc, #596]	; (800390c <HAL_RCC_OscConfig+0x578>)
 80036b8:	f043 0301 	orr.w	r3, r3, #1
 80036bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036c0:	e024      	b.n	800370c <HAL_RCC_OscConfig+0x378>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	2b05      	cmp	r3, #5
 80036c8:	d110      	bne.n	80036ec <HAL_RCC_OscConfig+0x358>
 80036ca:	4b90      	ldr	r3, [pc, #576]	; (800390c <HAL_RCC_OscConfig+0x578>)
 80036cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d0:	4a8e      	ldr	r2, [pc, #568]	; (800390c <HAL_RCC_OscConfig+0x578>)
 80036d2:	f043 0304 	orr.w	r3, r3, #4
 80036d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036da:	4b8c      	ldr	r3, [pc, #560]	; (800390c <HAL_RCC_OscConfig+0x578>)
 80036dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e0:	4a8a      	ldr	r2, [pc, #552]	; (800390c <HAL_RCC_OscConfig+0x578>)
 80036e2:	f043 0301 	orr.w	r3, r3, #1
 80036e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036ea:	e00f      	b.n	800370c <HAL_RCC_OscConfig+0x378>
 80036ec:	4b87      	ldr	r3, [pc, #540]	; (800390c <HAL_RCC_OscConfig+0x578>)
 80036ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f2:	4a86      	ldr	r2, [pc, #536]	; (800390c <HAL_RCC_OscConfig+0x578>)
 80036f4:	f023 0301 	bic.w	r3, r3, #1
 80036f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036fc:	4b83      	ldr	r3, [pc, #524]	; (800390c <HAL_RCC_OscConfig+0x578>)
 80036fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003702:	4a82      	ldr	r2, [pc, #520]	; (800390c <HAL_RCC_OscConfig+0x578>)
 8003704:	f023 0304 	bic.w	r3, r3, #4
 8003708:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d016      	beq.n	8003742 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003714:	f7fc fe12 	bl	800033c <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800371a:	e00a      	b.n	8003732 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800371c:	f7fc fe0e 	bl	800033c <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	f241 3288 	movw	r2, #5000	; 0x1388
 800372a:	4293      	cmp	r3, r2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e142      	b.n	80039b8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003732:	4b76      	ldr	r3, [pc, #472]	; (800390c <HAL_RCC_OscConfig+0x578>)
 8003734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003738:	f003 0302 	and.w	r3, r3, #2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d0ed      	beq.n	800371c <HAL_RCC_OscConfig+0x388>
 8003740:	e015      	b.n	800376e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003742:	f7fc fdfb 	bl	800033c <HAL_GetTick>
 8003746:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003748:	e00a      	b.n	8003760 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800374a:	f7fc fdf7 	bl	800033c <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	f241 3288 	movw	r2, #5000	; 0x1388
 8003758:	4293      	cmp	r3, r2
 800375a:	d901      	bls.n	8003760 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e12b      	b.n	80039b8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003760:	4b6a      	ldr	r3, [pc, #424]	; (800390c <HAL_RCC_OscConfig+0x578>)
 8003762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1ed      	bne.n	800374a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800376e:	7ffb      	ldrb	r3, [r7, #31]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d105      	bne.n	8003780 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003774:	4b65      	ldr	r3, [pc, #404]	; (800390c <HAL_RCC_OscConfig+0x578>)
 8003776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003778:	4a64      	ldr	r2, [pc, #400]	; (800390c <HAL_RCC_OscConfig+0x578>)
 800377a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800377e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0320 	and.w	r3, r3, #32
 8003788:	2b00      	cmp	r3, #0
 800378a:	d03c      	beq.n	8003806 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d01c      	beq.n	80037ce <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003794:	4b5d      	ldr	r3, [pc, #372]	; (800390c <HAL_RCC_OscConfig+0x578>)
 8003796:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800379a:	4a5c      	ldr	r2, [pc, #368]	; (800390c <HAL_RCC_OscConfig+0x578>)
 800379c:	f043 0301 	orr.w	r3, r3, #1
 80037a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a4:	f7fc fdca 	bl	800033c <HAL_GetTick>
 80037a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80037aa:	e008      	b.n	80037be <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037ac:	f7fc fdc6 	bl	800033c <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e0fc      	b.n	80039b8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80037be:	4b53      	ldr	r3, [pc, #332]	; (800390c <HAL_RCC_OscConfig+0x578>)
 80037c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d0ef      	beq.n	80037ac <HAL_RCC_OscConfig+0x418>
 80037cc:	e01b      	b.n	8003806 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80037ce:	4b4f      	ldr	r3, [pc, #316]	; (800390c <HAL_RCC_OscConfig+0x578>)
 80037d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037d4:	4a4d      	ldr	r2, [pc, #308]	; (800390c <HAL_RCC_OscConfig+0x578>)
 80037d6:	f023 0301 	bic.w	r3, r3, #1
 80037da:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037de:	f7fc fdad 	bl	800033c <HAL_GetTick>
 80037e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037e4:	e008      	b.n	80037f8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037e6:	f7fc fda9 	bl	800033c <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d901      	bls.n	80037f8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e0df      	b.n	80039b8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037f8:	4b44      	ldr	r3, [pc, #272]	; (800390c <HAL_RCC_OscConfig+0x578>)
 80037fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1ef      	bne.n	80037e6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	69db      	ldr	r3, [r3, #28]
 800380a:	2b00      	cmp	r3, #0
 800380c:	f000 80d3 	beq.w	80039b6 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003810:	4b3e      	ldr	r3, [pc, #248]	; (800390c <HAL_RCC_OscConfig+0x578>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f003 030c 	and.w	r3, r3, #12
 8003818:	2b0c      	cmp	r3, #12
 800381a:	f000 808d 	beq.w	8003938 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	69db      	ldr	r3, [r3, #28]
 8003822:	2b02      	cmp	r3, #2
 8003824:	d15a      	bne.n	80038dc <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003826:	4b39      	ldr	r3, [pc, #228]	; (800390c <HAL_RCC_OscConfig+0x578>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a38      	ldr	r2, [pc, #224]	; (800390c <HAL_RCC_OscConfig+0x578>)
 800382c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003830:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003832:	f7fc fd83 	bl	800033c <HAL_GetTick>
 8003836:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003838:	e008      	b.n	800384c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800383a:	f7fc fd7f 	bl	800033c <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	2b02      	cmp	r3, #2
 8003846:	d901      	bls.n	800384c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e0b5      	b.n	80039b8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800384c:	4b2f      	ldr	r3, [pc, #188]	; (800390c <HAL_RCC_OscConfig+0x578>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1f0      	bne.n	800383a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003858:	4b2c      	ldr	r3, [pc, #176]	; (800390c <HAL_RCC_OscConfig+0x578>)
 800385a:	68da      	ldr	r2, [r3, #12]
 800385c:	4b2d      	ldr	r3, [pc, #180]	; (8003914 <HAL_RCC_OscConfig+0x580>)
 800385e:	4013      	ands	r3, r2
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	6a11      	ldr	r1, [r2, #32]
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003868:	3a01      	subs	r2, #1
 800386a:	0112      	lsls	r2, r2, #4
 800386c:	4311      	orrs	r1, r2
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003872:	0212      	lsls	r2, r2, #8
 8003874:	4311      	orrs	r1, r2
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800387a:	0852      	lsrs	r2, r2, #1
 800387c:	3a01      	subs	r2, #1
 800387e:	0552      	lsls	r2, r2, #21
 8003880:	4311      	orrs	r1, r2
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003886:	0852      	lsrs	r2, r2, #1
 8003888:	3a01      	subs	r2, #1
 800388a:	0652      	lsls	r2, r2, #25
 800388c:	4311      	orrs	r1, r2
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003892:	06d2      	lsls	r2, r2, #27
 8003894:	430a      	orrs	r2, r1
 8003896:	491d      	ldr	r1, [pc, #116]	; (800390c <HAL_RCC_OscConfig+0x578>)
 8003898:	4313      	orrs	r3, r2
 800389a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800389c:	4b1b      	ldr	r3, [pc, #108]	; (800390c <HAL_RCC_OscConfig+0x578>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a1a      	ldr	r2, [pc, #104]	; (800390c <HAL_RCC_OscConfig+0x578>)
 80038a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038a6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038a8:	4b18      	ldr	r3, [pc, #96]	; (800390c <HAL_RCC_OscConfig+0x578>)
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	4a17      	ldr	r2, [pc, #92]	; (800390c <HAL_RCC_OscConfig+0x578>)
 80038ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038b2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b4:	f7fc fd42 	bl	800033c <HAL_GetTick>
 80038b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038ba:	e008      	b.n	80038ce <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038bc:	f7fc fd3e 	bl	800033c <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e074      	b.n	80039b8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038ce:	4b0f      	ldr	r3, [pc, #60]	; (800390c <HAL_RCC_OscConfig+0x578>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d0f0      	beq.n	80038bc <HAL_RCC_OscConfig+0x528>
 80038da:	e06c      	b.n	80039b6 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038dc:	4b0b      	ldr	r3, [pc, #44]	; (800390c <HAL_RCC_OscConfig+0x578>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a0a      	ldr	r2, [pc, #40]	; (800390c <HAL_RCC_OscConfig+0x578>)
 80038e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038e6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80038e8:	4b08      	ldr	r3, [pc, #32]	; (800390c <HAL_RCC_OscConfig+0x578>)
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	4a07      	ldr	r2, [pc, #28]	; (800390c <HAL_RCC_OscConfig+0x578>)
 80038ee:	f023 0303 	bic.w	r3, r3, #3
 80038f2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80038f4:	4b05      	ldr	r3, [pc, #20]	; (800390c <HAL_RCC_OscConfig+0x578>)
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	4a04      	ldr	r2, [pc, #16]	; (800390c <HAL_RCC_OscConfig+0x578>)
 80038fa:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80038fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003902:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003904:	f7fc fd1a 	bl	800033c <HAL_GetTick>
 8003908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800390a:	e00e      	b.n	800392a <HAL_RCC_OscConfig+0x596>
 800390c:	40021000 	.word	0x40021000
 8003910:	40007000 	.word	0x40007000
 8003914:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003918:	f7fc fd10 	bl	800033c <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b02      	cmp	r3, #2
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e046      	b.n	80039b8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800392a:	4b25      	ldr	r3, [pc, #148]	; (80039c0 <HAL_RCC_OscConfig+0x62c>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1f0      	bne.n	8003918 <HAL_RCC_OscConfig+0x584>
 8003936:	e03e      	b.n	80039b6 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	69db      	ldr	r3, [r3, #28]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d101      	bne.n	8003944 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e039      	b.n	80039b8 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003944:	4b1e      	ldr	r3, [pc, #120]	; (80039c0 <HAL_RCC_OscConfig+0x62c>)
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f003 0203 	and.w	r2, r3, #3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a1b      	ldr	r3, [r3, #32]
 8003954:	429a      	cmp	r2, r3
 8003956:	d12c      	bne.n	80039b2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003962:	3b01      	subs	r3, #1
 8003964:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003966:	429a      	cmp	r2, r3
 8003968:	d123      	bne.n	80039b2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003974:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003976:	429a      	cmp	r2, r3
 8003978:	d11b      	bne.n	80039b2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003984:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003986:	429a      	cmp	r2, r3
 8003988:	d113      	bne.n	80039b2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003994:	085b      	lsrs	r3, r3, #1
 8003996:	3b01      	subs	r3, #1
 8003998:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800399a:	429a      	cmp	r2, r3
 800399c:	d109      	bne.n	80039b2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039a8:	085b      	lsrs	r3, r3, #1
 80039aa:	3b01      	subs	r3, #1
 80039ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d001      	beq.n	80039b6 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e000      	b.n	80039b8 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3720      	adds	r7, #32
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	40021000 	.word	0x40021000

080039c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b086      	sub	sp, #24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80039ce:	2300      	movs	r3, #0
 80039d0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d101      	bne.n	80039dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e11e      	b.n	8003c1a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039dc:	4b91      	ldr	r3, [pc, #580]	; (8003c24 <HAL_RCC_ClockConfig+0x260>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 030f 	and.w	r3, r3, #15
 80039e4:	683a      	ldr	r2, [r7, #0]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d910      	bls.n	8003a0c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ea:	4b8e      	ldr	r3, [pc, #568]	; (8003c24 <HAL_RCC_ClockConfig+0x260>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f023 020f 	bic.w	r2, r3, #15
 80039f2:	498c      	ldr	r1, [pc, #560]	; (8003c24 <HAL_RCC_ClockConfig+0x260>)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039fa:	4b8a      	ldr	r3, [pc, #552]	; (8003c24 <HAL_RCC_ClockConfig+0x260>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 030f 	and.w	r3, r3, #15
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d001      	beq.n	8003a0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e106      	b.n	8003c1a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d073      	beq.n	8003b00 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	2b03      	cmp	r3, #3
 8003a1e:	d129      	bne.n	8003a74 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a20:	4b81      	ldr	r3, [pc, #516]	; (8003c28 <HAL_RCC_ClockConfig+0x264>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e0f4      	b.n	8003c1a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003a30:	f000 f966 	bl	8003d00 <RCC_GetSysClockFreqFromPLLSource>
 8003a34:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	4a7c      	ldr	r2, [pc, #496]	; (8003c2c <HAL_RCC_ClockConfig+0x268>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d93f      	bls.n	8003abe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003a3e:	4b7a      	ldr	r3, [pc, #488]	; (8003c28 <HAL_RCC_ClockConfig+0x264>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d009      	beq.n	8003a5e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d033      	beq.n	8003abe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d12f      	bne.n	8003abe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a5e:	4b72      	ldr	r3, [pc, #456]	; (8003c28 <HAL_RCC_ClockConfig+0x264>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a66:	4a70      	ldr	r2, [pc, #448]	; (8003c28 <HAL_RCC_ClockConfig+0x264>)
 8003a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a6c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003a6e:	2380      	movs	r3, #128	; 0x80
 8003a70:	617b      	str	r3, [r7, #20]
 8003a72:	e024      	b.n	8003abe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d107      	bne.n	8003a8c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a7c:	4b6a      	ldr	r3, [pc, #424]	; (8003c28 <HAL_RCC_ClockConfig+0x264>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d109      	bne.n	8003a9c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e0c6      	b.n	8003c1a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a8c:	4b66      	ldr	r3, [pc, #408]	; (8003c28 <HAL_RCC_ClockConfig+0x264>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d101      	bne.n	8003a9c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e0be      	b.n	8003c1a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003a9c:	f000 f8ce 	bl	8003c3c <HAL_RCC_GetSysClockFreq>
 8003aa0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	4a61      	ldr	r2, [pc, #388]	; (8003c2c <HAL_RCC_ClockConfig+0x268>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d909      	bls.n	8003abe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003aaa:	4b5f      	ldr	r3, [pc, #380]	; (8003c28 <HAL_RCC_ClockConfig+0x264>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ab2:	4a5d      	ldr	r2, [pc, #372]	; (8003c28 <HAL_RCC_ClockConfig+0x264>)
 8003ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ab8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003aba:	2380      	movs	r3, #128	; 0x80
 8003abc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003abe:	4b5a      	ldr	r3, [pc, #360]	; (8003c28 <HAL_RCC_ClockConfig+0x264>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f023 0203 	bic.w	r2, r3, #3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	4957      	ldr	r1, [pc, #348]	; (8003c28 <HAL_RCC_ClockConfig+0x264>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ad0:	f7fc fc34 	bl	800033c <HAL_GetTick>
 8003ad4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ad6:	e00a      	b.n	8003aee <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ad8:	f7fc fc30 	bl	800033c <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e095      	b.n	8003c1a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aee:	4b4e      	ldr	r3, [pc, #312]	; (8003c28 <HAL_RCC_ClockConfig+0x264>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 020c 	and.w	r2, r3, #12
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d1eb      	bne.n	8003ad8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0302 	and.w	r3, r3, #2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d023      	beq.n	8003b54 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0304 	and.w	r3, r3, #4
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d005      	beq.n	8003b24 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b18:	4b43      	ldr	r3, [pc, #268]	; (8003c28 <HAL_RCC_ClockConfig+0x264>)
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	4a42      	ldr	r2, [pc, #264]	; (8003c28 <HAL_RCC_ClockConfig+0x264>)
 8003b1e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b22:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0308 	and.w	r3, r3, #8
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d007      	beq.n	8003b40 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003b30:	4b3d      	ldr	r3, [pc, #244]	; (8003c28 <HAL_RCC_ClockConfig+0x264>)
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003b38:	4a3b      	ldr	r2, [pc, #236]	; (8003c28 <HAL_RCC_ClockConfig+0x264>)
 8003b3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b3e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b40:	4b39      	ldr	r3, [pc, #228]	; (8003c28 <HAL_RCC_ClockConfig+0x264>)
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	4936      	ldr	r1, [pc, #216]	; (8003c28 <HAL_RCC_ClockConfig+0x264>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	608b      	str	r3, [r1, #8]
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	2b80      	cmp	r3, #128	; 0x80
 8003b58:	d105      	bne.n	8003b66 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003b5a:	4b33      	ldr	r3, [pc, #204]	; (8003c28 <HAL_RCC_ClockConfig+0x264>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	4a32      	ldr	r2, [pc, #200]	; (8003c28 <HAL_RCC_ClockConfig+0x264>)
 8003b60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b64:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b66:	4b2f      	ldr	r3, [pc, #188]	; (8003c24 <HAL_RCC_ClockConfig+0x260>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 030f 	and.w	r3, r3, #15
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d21d      	bcs.n	8003bb0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b74:	4b2b      	ldr	r3, [pc, #172]	; (8003c24 <HAL_RCC_ClockConfig+0x260>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f023 020f 	bic.w	r2, r3, #15
 8003b7c:	4929      	ldr	r1, [pc, #164]	; (8003c24 <HAL_RCC_ClockConfig+0x260>)
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003b84:	f7fc fbda 	bl	800033c <HAL_GetTick>
 8003b88:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b8a:	e00a      	b.n	8003ba2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b8c:	f7fc fbd6 	bl	800033c <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e03b      	b.n	8003c1a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ba2:	4b20      	ldr	r3, [pc, #128]	; (8003c24 <HAL_RCC_ClockConfig+0x260>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 030f 	and.w	r3, r3, #15
 8003baa:	683a      	ldr	r2, [r7, #0]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d1ed      	bne.n	8003b8c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0304 	and.w	r3, r3, #4
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d008      	beq.n	8003bce <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bbc:	4b1a      	ldr	r3, [pc, #104]	; (8003c28 <HAL_RCC_ClockConfig+0x264>)
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	4917      	ldr	r1, [pc, #92]	; (8003c28 <HAL_RCC_ClockConfig+0x264>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0308 	and.w	r3, r3, #8
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d009      	beq.n	8003bee <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bda:	4b13      	ldr	r3, [pc, #76]	; (8003c28 <HAL_RCC_ClockConfig+0x264>)
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	490f      	ldr	r1, [pc, #60]	; (8003c28 <HAL_RCC_ClockConfig+0x264>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003bee:	f000 f825 	bl	8003c3c <HAL_RCC_GetSysClockFreq>
 8003bf2:	4601      	mov	r1, r0
 8003bf4:	4b0c      	ldr	r3, [pc, #48]	; (8003c28 <HAL_RCC_ClockConfig+0x264>)
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	091b      	lsrs	r3, r3, #4
 8003bfa:	f003 030f 	and.w	r3, r3, #15
 8003bfe:	4a0c      	ldr	r2, [pc, #48]	; (8003c30 <HAL_RCC_ClockConfig+0x26c>)
 8003c00:	5cd3      	ldrb	r3, [r2, r3]
 8003c02:	f003 031f 	and.w	r3, r3, #31
 8003c06:	fa21 f303 	lsr.w	r3, r1, r3
 8003c0a:	4a0a      	ldr	r2, [pc, #40]	; (8003c34 <HAL_RCC_ClockConfig+0x270>)
 8003c0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003c0e:	4b0a      	ldr	r3, [pc, #40]	; (8003c38 <HAL_RCC_ClockConfig+0x274>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7fc fb46 	bl	80002a4 <HAL_InitTick>
 8003c18:	4603      	mov	r3, r0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3718      	adds	r7, #24
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	40022000 	.word	0x40022000
 8003c28:	40021000 	.word	0x40021000
 8003c2c:	04c4b400 	.word	0x04c4b400
 8003c30:	0800b8ac 	.word	0x0800b8ac
 8003c34:	2000011c 	.word	0x2000011c
 8003c38:	20000000 	.word	0x20000000

08003c3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b087      	sub	sp, #28
 8003c40:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003c42:	4b2c      	ldr	r3, [pc, #176]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f003 030c 	and.w	r3, r3, #12
 8003c4a:	2b04      	cmp	r3, #4
 8003c4c:	d102      	bne.n	8003c54 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c4e:	4b2a      	ldr	r3, [pc, #168]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c50:	613b      	str	r3, [r7, #16]
 8003c52:	e047      	b.n	8003ce4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003c54:	4b27      	ldr	r3, [pc, #156]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f003 030c 	and.w	r3, r3, #12
 8003c5c:	2b08      	cmp	r3, #8
 8003c5e:	d102      	bne.n	8003c66 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c60:	4b26      	ldr	r3, [pc, #152]	; (8003cfc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c62:	613b      	str	r3, [r7, #16]
 8003c64:	e03e      	b.n	8003ce4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003c66:	4b23      	ldr	r3, [pc, #140]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f003 030c 	and.w	r3, r3, #12
 8003c6e:	2b0c      	cmp	r3, #12
 8003c70:	d136      	bne.n	8003ce0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c72:	4b20      	ldr	r3, [pc, #128]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	f003 0303 	and.w	r3, r3, #3
 8003c7a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c7c:	4b1d      	ldr	r3, [pc, #116]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	091b      	lsrs	r3, r3, #4
 8003c82:	f003 030f 	and.w	r3, r3, #15
 8003c86:	3301      	adds	r3, #1
 8003c88:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2b03      	cmp	r3, #3
 8003c8e:	d10c      	bne.n	8003caa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c90:	4a1a      	ldr	r2, [pc, #104]	; (8003cfc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c98:	4a16      	ldr	r2, [pc, #88]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c9a:	68d2      	ldr	r2, [r2, #12]
 8003c9c:	0a12      	lsrs	r2, r2, #8
 8003c9e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ca2:	fb02 f303 	mul.w	r3, r2, r3
 8003ca6:	617b      	str	r3, [r7, #20]
      break;
 8003ca8:	e00c      	b.n	8003cc4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003caa:	4a13      	ldr	r2, [pc, #76]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb2:	4a10      	ldr	r2, [pc, #64]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cb4:	68d2      	ldr	r2, [r2, #12]
 8003cb6:	0a12      	lsrs	r2, r2, #8
 8003cb8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003cbc:	fb02 f303 	mul.w	r3, r2, r3
 8003cc0:	617b      	str	r3, [r7, #20]
      break;
 8003cc2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003cc4:	4b0b      	ldr	r3, [pc, #44]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	0e5b      	lsrs	r3, r3, #25
 8003cca:	f003 0303 	and.w	r3, r3, #3
 8003cce:	3301      	adds	r3, #1
 8003cd0:	005b      	lsls	r3, r3, #1
 8003cd2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003cd4:	697a      	ldr	r2, [r7, #20]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cdc:	613b      	str	r3, [r7, #16]
 8003cde:	e001      	b.n	8003ce4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003ce4:	693b      	ldr	r3, [r7, #16]
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	371c      	adds	r7, #28
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	40021000 	.word	0x40021000
 8003cf8:	00f42400 	.word	0x00f42400
 8003cfc:	02dc6c00 	.word	0x02dc6c00

08003d00 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b087      	sub	sp, #28
 8003d04:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d06:	4b1e      	ldr	r3, [pc, #120]	; (8003d80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	f003 0303 	and.w	r3, r3, #3
 8003d0e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d10:	4b1b      	ldr	r3, [pc, #108]	; (8003d80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	091b      	lsrs	r3, r3, #4
 8003d16:	f003 030f 	and.w	r3, r3, #15
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	2b03      	cmp	r3, #3
 8003d22:	d10c      	bne.n	8003d3e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d24:	4a17      	ldr	r2, [pc, #92]	; (8003d84 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d2c:	4a14      	ldr	r2, [pc, #80]	; (8003d80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d2e:	68d2      	ldr	r2, [r2, #12]
 8003d30:	0a12      	lsrs	r2, r2, #8
 8003d32:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d36:	fb02 f303 	mul.w	r3, r2, r3
 8003d3a:	617b      	str	r3, [r7, #20]
    break;
 8003d3c:	e00c      	b.n	8003d58 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d3e:	4a12      	ldr	r2, [pc, #72]	; (8003d88 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d46:	4a0e      	ldr	r2, [pc, #56]	; (8003d80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d48:	68d2      	ldr	r2, [r2, #12]
 8003d4a:	0a12      	lsrs	r2, r2, #8
 8003d4c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d50:	fb02 f303 	mul.w	r3, r2, r3
 8003d54:	617b      	str	r3, [r7, #20]
    break;
 8003d56:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d58:	4b09      	ldr	r3, [pc, #36]	; (8003d80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	0e5b      	lsrs	r3, r3, #25
 8003d5e:	f003 0303 	and.w	r3, r3, #3
 8003d62:	3301      	adds	r3, #1
 8003d64:	005b      	lsls	r3, r3, #1
 8003d66:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003d68:	697a      	ldr	r2, [r7, #20]
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d70:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003d72:	687b      	ldr	r3, [r7, #4]
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	371c      	adds	r7, #28
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr
 8003d80:	40021000 	.word	0x40021000
 8003d84:	02dc6c00 	.word	0x02dc6c00
 8003d88:	00f42400 	.word	0x00f42400

08003d8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b086      	sub	sp, #24
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d94:	2300      	movs	r3, #0
 8003d96:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d98:	2300      	movs	r3, #0
 8003d9a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	f000 8098 	beq.w	8003eda <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003daa:	2300      	movs	r3, #0
 8003dac:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dae:	4b43      	ldr	r3, [pc, #268]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d10d      	bne.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dba:	4b40      	ldr	r3, [pc, #256]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dbe:	4a3f      	ldr	r2, [pc, #252]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dc4:	6593      	str	r3, [r2, #88]	; 0x58
 8003dc6:	4b3d      	ldr	r3, [pc, #244]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dce:	60bb      	str	r3, [r7, #8]
 8003dd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dd6:	4b3a      	ldr	r3, [pc, #232]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a39      	ldr	r2, [pc, #228]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003ddc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003de0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003de2:	f7fc faab 	bl	800033c <HAL_GetTick>
 8003de6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003de8:	e009      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dea:	f7fc faa7 	bl	800033c <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d902      	bls.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	74fb      	strb	r3, [r7, #19]
        break;
 8003dfc:	e005      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dfe:	4b30      	ldr	r3, [pc, #192]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d0ef      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003e0a:	7cfb      	ldrb	r3, [r7, #19]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d159      	bne.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e10:	4b2a      	ldr	r3, [pc, #168]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e1a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d01e      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e26:	697a      	ldr	r2, [r7, #20]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d019      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e2c:	4b23      	ldr	r3, [pc, #140]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e36:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e38:	4b20      	ldr	r3, [pc, #128]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e3e:	4a1f      	ldr	r2, [pc, #124]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e48:	4b1c      	ldr	r3, [pc, #112]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e4e:	4a1b      	ldr	r2, [pc, #108]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e58:	4a18      	ldr	r2, [pc, #96]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	f003 0301 	and.w	r3, r3, #1
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d016      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e6a:	f7fc fa67 	bl	800033c <HAL_GetTick>
 8003e6e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e70:	e00b      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e72:	f7fc fa63 	bl	800033c <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d902      	bls.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	74fb      	strb	r3, [r7, #19]
            break;
 8003e88:	e006      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e8a:	4b0c      	ldr	r3, [pc, #48]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d0ec      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003e98:	7cfb      	ldrb	r3, [r7, #19]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d10b      	bne.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e9e:	4b07      	ldr	r3, [pc, #28]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eac:	4903      	ldr	r1, [pc, #12]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003eb4:	e008      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003eb6:	7cfb      	ldrb	r3, [r7, #19]
 8003eb8:	74bb      	strb	r3, [r7, #18]
 8003eba:	e005      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003ebc:	40021000 	.word	0x40021000
 8003ec0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec4:	7cfb      	ldrb	r3, [r7, #19]
 8003ec6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ec8:	7c7b      	ldrb	r3, [r7, #17]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d105      	bne.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ece:	4baf      	ldr	r3, [pc, #700]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed2:	4aae      	ldr	r2, [pc, #696]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003ed4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ed8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00a      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ee6:	4ba9      	ldr	r3, [pc, #676]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eec:	f023 0203 	bic.w	r2, r3, #3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	49a5      	ldr	r1, [pc, #660]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0302 	and.w	r3, r3, #2
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d00a      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f08:	4ba0      	ldr	r3, [pc, #640]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f0e:	f023 020c 	bic.w	r2, r3, #12
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	499d      	ldr	r1, [pc, #628]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0304 	and.w	r3, r3, #4
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00a      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f2a:	4b98      	ldr	r3, [pc, #608]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f30:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	4994      	ldr	r1, [pc, #592]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0308 	and.w	r3, r3, #8
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00a      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f4c:	4b8f      	ldr	r3, [pc, #572]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f52:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	498c      	ldr	r1, [pc, #560]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0310 	and.w	r3, r3, #16
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00a      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f6e:	4b87      	ldr	r3, [pc, #540]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	695b      	ldr	r3, [r3, #20]
 8003f7c:	4983      	ldr	r1, [pc, #524]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0320 	and.w	r3, r3, #32
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00a      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f90:	4b7e      	ldr	r3, [pc, #504]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f96:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	497b      	ldr	r1, [pc, #492]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00a      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fb2:	4b76      	ldr	r3, [pc, #472]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	69db      	ldr	r3, [r3, #28]
 8003fc0:	4972      	ldr	r1, [pc, #456]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d00a      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fd4:	4b6d      	ldr	r3, [pc, #436]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fda:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	496a      	ldr	r1, [pc, #424]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00a      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ff6:	4b65      	ldr	r3, [pc, #404]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ffc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004004:	4961      	ldr	r1, [pc, #388]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004006:	4313      	orrs	r3, r2
 8004008:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00a      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004018:	4b5c      	ldr	r3, [pc, #368]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800401a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800401e:	f023 0203 	bic.w	r2, r3, #3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004026:	4959      	ldr	r1, [pc, #356]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004028:	4313      	orrs	r3, r2
 800402a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00a      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800403a:	4b54      	ldr	r3, [pc, #336]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800403c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004040:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004048:	4950      	ldr	r1, [pc, #320]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800404a:	4313      	orrs	r3, r2
 800404c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004058:	2b00      	cmp	r3, #0
 800405a:	d015      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800405c:	4b4b      	ldr	r3, [pc, #300]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800405e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004062:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406a:	4948      	ldr	r1, [pc, #288]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800406c:	4313      	orrs	r3, r2
 800406e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004076:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800407a:	d105      	bne.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800407c:	4b43      	ldr	r3, [pc, #268]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	4a42      	ldr	r2, [pc, #264]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004082:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004086:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004090:	2b00      	cmp	r3, #0
 8004092:	d015      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004094:	4b3d      	ldr	r3, [pc, #244]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800409a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040a2:	493a      	ldr	r1, [pc, #232]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040b2:	d105      	bne.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040b4:	4b35      	ldr	r3, [pc, #212]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	4a34      	ldr	r2, [pc, #208]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80040ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040be:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d015      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80040cc:	4b2f      	ldr	r3, [pc, #188]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80040ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040da:	492c      	ldr	r1, [pc, #176]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040ea:	d105      	bne.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040ec:	4b27      	ldr	r3, [pc, #156]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	4a26      	ldr	r2, [pc, #152]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80040f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040f6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d015      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004104:	4b21      	ldr	r3, [pc, #132]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800410a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004112:	491e      	ldr	r1, [pc, #120]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004114:	4313      	orrs	r3, r2
 8004116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800411e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004122:	d105      	bne.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004124:	4b19      	ldr	r3, [pc, #100]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	4a18      	ldr	r2, [pc, #96]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800412a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800412e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d015      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800413c:	4b13      	ldr	r3, [pc, #76]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800413e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004142:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414a:	4910      	ldr	r1, [pc, #64]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800414c:	4313      	orrs	r3, r2
 800414e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004156:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800415a:	d105      	bne.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800415c:	4b0b      	ldr	r3, [pc, #44]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	4a0a      	ldr	r2, [pc, #40]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004162:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004166:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d018      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004174:	4b05      	ldr	r3, [pc, #20]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800417a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004182:	4902      	ldr	r1, [pc, #8]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004184:	4313      	orrs	r3, r2
 8004186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800418a:	e001      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800418c:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004194:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004198:	d105      	bne.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800419a:	4b21      	ldr	r3, [pc, #132]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	4a20      	ldr	r2, [pc, #128]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80041a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041a4:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d015      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80041b2:	4b1b      	ldr	r3, [pc, #108]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80041b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b8:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041c0:	4917      	ldr	r1, [pc, #92]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041d0:	d105      	bne.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80041d2:	4b13      	ldr	r3, [pc, #76]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	4a12      	ldr	r2, [pc, #72]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80041d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041dc:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d015      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80041ea:	4b0d      	ldr	r3, [pc, #52]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80041ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041f8:	4909      	ldr	r1, [pc, #36]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004204:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004208:	d105      	bne.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800420a:	4b05      	ldr	r3, [pc, #20]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	4a04      	ldr	r2, [pc, #16]	; (8004220 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004210:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004214:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004216:	7cbb      	ldrb	r3, [r7, #18]
}
 8004218:	4618      	mov	r0, r3
 800421a:	3718      	adds	r7, #24
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	40021000 	.word	0x40021000

08004224 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d05c      	beq.n	80042f0 <HAL_RTC_Init+0xcc>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d106      	bne.n	8004250 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f006 fce6 	bl	800ac1c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2202      	movs	r2, #2
 8004254:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004258:	4b28      	ldr	r3, [pc, #160]	; (80042fc <HAL_RTC_Init+0xd8>)
 800425a:	22ca      	movs	r2, #202	; 0xca
 800425c:	625a      	str	r2, [r3, #36]	; 0x24
 800425e:	4b27      	ldr	r3, [pc, #156]	; (80042fc <HAL_RTC_Init+0xd8>)
 8004260:	2253      	movs	r2, #83	; 0x53
 8004262:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 f98d 	bl	8004584 <RTC_EnterInitMode>
 800426a:	4603      	mov	r3, r0
 800426c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800426e:	7bfb      	ldrb	r3, [r7, #15]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d133      	bne.n	80042dc <HAL_RTC_Init+0xb8>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8004274:	4b21      	ldr	r3, [pc, #132]	; (80042fc <HAL_RTC_Init+0xd8>)
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	4a20      	ldr	r2, [pc, #128]	; (80042fc <HAL_RTC_Init+0xd8>)
 800427a:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800427e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004282:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8004284:	4b1d      	ldr	r3, [pc, #116]	; (80042fc <HAL_RTC_Init+0xd8>)
 8004286:	699a      	ldr	r2, [r3, #24]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6859      	ldr	r1, [r3, #4]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	4319      	orrs	r1, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	430b      	orrs	r3, r1
 8004298:	4918      	ldr	r1, [pc, #96]	; (80042fc <HAL_RTC_Init+0xd8>)
 800429a:	4313      	orrs	r3, r2
 800429c:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68da      	ldr	r2, [r3, #12]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	041b      	lsls	r3, r3, #16
 80042a8:	4914      	ldr	r1, [pc, #80]	; (80042fc <HAL_RTC_Init+0xd8>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	610b      	str	r3, [r1, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 f99c 	bl	80045ec <RTC_ExitInitMode>
 80042b4:	4603      	mov	r3, r0
 80042b6:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80042b8:	7bfb      	ldrb	r3, [r7, #15]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10e      	bne.n	80042dc <HAL_RTC_Init+0xb8>
      {
        MODIFY_REG(RTC->CR, \
 80042be:	4b0f      	ldr	r3, [pc, #60]	; (80042fc <HAL_RTC_Init+0xd8>)
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a19      	ldr	r1, [r3, #32]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	69db      	ldr	r3, [r3, #28]
 80042ce:	4319      	orrs	r1, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	695b      	ldr	r3, [r3, #20]
 80042d4:	430b      	orrs	r3, r1
 80042d6:	4909      	ldr	r1, [pc, #36]	; (80042fc <HAL_RTC_Init+0xd8>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042dc:	4b07      	ldr	r3, [pc, #28]	; (80042fc <HAL_RTC_Init+0xd8>)
 80042de:	22ff      	movs	r2, #255	; 0xff
 80042e0:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 80042e2:	7bfb      	ldrb	r3, [r7, #15]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d103      	bne.n	80042f0 <HAL_RTC_Init+0xcc>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 80042f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3710      	adds	r7, #16
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	40002800 	.word	0x40002800

08004300 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004300:	b590      	push	{r4, r7, lr}
 8004302:	b087      	sub	sp, #28
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004312:	2b01      	cmp	r3, #1
 8004314:	d101      	bne.n	800431a <HAL_RTC_SetTime+0x1a>
 8004316:	2302      	movs	r3, #2
 8004318:	e081      	b.n	800441e <HAL_RTC_SetTime+0x11e>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2201      	movs	r2, #1
 800431e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2202      	movs	r2, #2
 8004326:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800432a:	4b3f      	ldr	r3, [pc, #252]	; (8004428 <HAL_RTC_SetTime+0x128>)
 800432c:	22ca      	movs	r2, #202	; 0xca
 800432e:	625a      	str	r2, [r3, #36]	; 0x24
 8004330:	4b3d      	ldr	r3, [pc, #244]	; (8004428 <HAL_RTC_SetTime+0x128>)
 8004332:	2253      	movs	r2, #83	; 0x53
 8004334:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f000 f924 	bl	8004584 <RTC_EnterInitMode>
 800433c:	4603      	mov	r3, r0
 800433e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004340:	7cfb      	ldrb	r3, [r7, #19]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d15c      	bne.n	8004400 <HAL_RTC_SetTime+0x100>
  {
    if (Format == RTC_FORMAT_BIN)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d125      	bne.n	8004398 <HAL_RTC_SetTime+0x98>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800434c:	4b36      	ldr	r3, [pc, #216]	; (8004428 <HAL_RTC_SetTime+0x128>)
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004354:	2b00      	cmp	r3, #0
 8004356:	d102      	bne.n	800435e <HAL_RTC_SetTime+0x5e>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	2200      	movs	r2, #0
 800435c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	4618      	mov	r0, r3
 8004364:	f000 f980 	bl	8004668 <RTC_ByteToBcd2>
 8004368:	4603      	mov	r3, r0
 800436a:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	785b      	ldrb	r3, [r3, #1]
 8004370:	4618      	mov	r0, r3
 8004372:	f000 f979 	bl	8004668 <RTC_ByteToBcd2>
 8004376:	4603      	mov	r3, r0
 8004378:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800437a:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	789b      	ldrb	r3, [r3, #2]
 8004380:	4618      	mov	r0, r3
 8004382:	f000 f971 	bl	8004668 <RTC_ByteToBcd2>
 8004386:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004388:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	78db      	ldrb	r3, [r3, #3]
 8004390:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004392:	4313      	orrs	r3, r2
 8004394:	617b      	str	r3, [r7, #20]
 8004396:	e017      	b.n	80043c8 <HAL_RTC_SetTime+0xc8>
    }
    else
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8004398:	4b23      	ldr	r3, [pc, #140]	; (8004428 <HAL_RTC_SetTime+0x128>)
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d102      	bne.n	80043aa <HAL_RTC_SetTime+0xaa>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	2200      	movs	r2, #0
 80043a8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	785b      	ldrb	r3, [r3, #1]
 80043b4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80043b6:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80043b8:	68ba      	ldr	r2, [r7, #8]
 80043ba:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80043bc:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	78db      	ldrb	r3, [r3, #3]
 80043c2:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80043c4:	4313      	orrs	r3, r2
 80043c6:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 80043c8:	4a17      	ldr	r2, [pc, #92]	; (8004428 <HAL_RTC_SetTime+0x128>)
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80043d0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80043d4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 80043d6:	4b14      	ldr	r3, [pc, #80]	; (8004428 <HAL_RTC_SetTime+0x128>)
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	4a13      	ldr	r2, [pc, #76]	; (8004428 <HAL_RTC_SetTime+0x128>)
 80043dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043e0:	6193      	str	r3, [r2, #24]

    /* Configure the RTC_CR register */
    SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 80043e2:	4b11      	ldr	r3, [pc, #68]	; (8004428 <HAL_RTC_SetTime+0x128>)
 80043e4:	699a      	ldr	r2, [r3, #24]
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	68d9      	ldr	r1, [r3, #12]
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	430b      	orrs	r3, r1
 80043f0:	490d      	ldr	r1, [pc, #52]	; (8004428 <HAL_RTC_SetTime+0x128>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	618b      	str	r3, [r1, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f000 f8f8 	bl	80045ec <RTC_ExitInitMode>
 80043fc:	4603      	mov	r3, r0
 80043fe:	74fb      	strb	r3, [r7, #19]
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004400:	4b09      	ldr	r3, [pc, #36]	; (8004428 <HAL_RTC_SetTime+0x128>)
 8004402:	22ff      	movs	r2, #255	; 0xff
 8004404:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004406:	7cfb      	ldrb	r3, [r7, #19]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d103      	bne.n	8004414 <HAL_RTC_SetTime+0x114>
  {
     hrtc->State = HAL_RTC_STATE_READY;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }
    __HAL_UNLOCK(hrtc);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800441c:	7cfb      	ldrb	r3, [r7, #19]
}
 800441e:	4618      	mov	r0, r3
 8004420:	371c      	adds	r7, #28
 8004422:	46bd      	mov	sp, r7
 8004424:	bd90      	pop	{r4, r7, pc}
 8004426:	bf00      	nop
 8004428:	40002800 	.word	0x40002800

0800442c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800442c:	b590      	push	{r4, r7, lr}
 800442e:	b087      	sub	sp, #28
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800443e:	2b01      	cmp	r3, #1
 8004440:	d101      	bne.n	8004446 <HAL_RTC_SetDate+0x1a>
 8004442:	2302      	movs	r3, #2
 8004444:	e071      	b.n	800452a <HAL_RTC_SetDate+0xfe>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2201      	movs	r2, #1
 800444a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2202      	movs	r2, #2
 8004452:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d10e      	bne.n	800447a <HAL_RTC_SetDate+0x4e>
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	785b      	ldrb	r3, [r3, #1]
 8004460:	f003 0310 	and.w	r3, r3, #16
 8004464:	2b00      	cmp	r3, #0
 8004466:	d008      	beq.n	800447a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	785b      	ldrb	r3, [r3, #1]
 800446c:	f023 0310 	bic.w	r3, r3, #16
 8004470:	b2db      	uxtb	r3, r3
 8004472:	330a      	adds	r3, #10
 8004474:	b2da      	uxtb	r2, r3
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d11c      	bne.n	80044ba <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	78db      	ldrb	r3, [r3, #3]
 8004484:	4618      	mov	r0, r3
 8004486:	f000 f8ef 	bl	8004668 <RTC_ByteToBcd2>
 800448a:	4603      	mov	r3, r0
 800448c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	785b      	ldrb	r3, [r3, #1]
 8004492:	4618      	mov	r0, r3
 8004494:	f000 f8e8 	bl	8004668 <RTC_ByteToBcd2>
 8004498:	4603      	mov	r3, r0
 800449a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800449c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	789b      	ldrb	r3, [r3, #2]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f000 f8e0 	bl	8004668 <RTC_ByteToBcd2>
 80044a8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80044aa:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80044b4:	4313      	orrs	r3, r2
 80044b6:	617b      	str	r3, [r7, #20]
 80044b8:	e00e      	b.n	80044d8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	78db      	ldrb	r3, [r3, #3]
 80044be:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	785b      	ldrb	r3, [r3, #1]
 80044c4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80044c6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80044c8:	68ba      	ldr	r2, [r7, #8]
 80044ca:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80044cc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80044d4:	4313      	orrs	r3, r2
 80044d6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80044d8:	4b16      	ldr	r3, [pc, #88]	; (8004534 <HAL_RTC_SetDate+0x108>)
 80044da:	22ca      	movs	r2, #202	; 0xca
 80044dc:	625a      	str	r2, [r3, #36]	; 0x24
 80044de:	4b15      	ldr	r3, [pc, #84]	; (8004534 <HAL_RTC_SetDate+0x108>)
 80044e0:	2253      	movs	r2, #83	; 0x53
 80044e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f000 f84d 	bl	8004584 <RTC_EnterInitMode>
 80044ea:	4603      	mov	r3, r0
 80044ec:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80044ee:	7cfb      	ldrb	r3, [r7, #19]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d10b      	bne.n	800450c <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 80044f4:	4a0f      	ldr	r2, [pc, #60]	; (8004534 <HAL_RTC_SetDate+0x108>)
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80044fc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004500:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	f000 f872 	bl	80045ec <RTC_ExitInitMode>
 8004508:	4603      	mov	r3, r0
 800450a:	74fb      	strb	r3, [r7, #19]
  }
	
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800450c:	4b09      	ldr	r3, [pc, #36]	; (8004534 <HAL_RTC_SetDate+0x108>)
 800450e:	22ff      	movs	r2, #255	; 0xff
 8004510:	625a      	str	r2, [r3, #36]	; 0x24
 
  if (status == HAL_OK)
 8004512:	7cfb      	ldrb	r3, [r7, #19]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d103      	bne.n	8004520 <HAL_RTC_SetDate+0xf4>
  {

    hrtc->State = HAL_RTC_STATE_READY ;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8004528:	7cfb      	ldrb	r3, [r7, #19]
}
 800452a:	4618      	mov	r0, r3
 800452c:	371c      	adds	r7, #28
 800452e:	46bd      	mov	sp, r7
 8004530:	bd90      	pop	{r4, r7, pc}
 8004532:	bf00      	nop
 8004534:	40002800 	.word	0x40002800

08004538 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);

  /* Clear RSF flag */
  SET_BIT(RTC->ICSR, RTC_RSF_MASK);
 8004540:	4b0f      	ldr	r3, [pc, #60]	; (8004580 <HAL_RTC_WaitForSynchro+0x48>)
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	4a0e      	ldr	r2, [pc, #56]	; (8004580 <HAL_RTC_WaitForSynchro+0x48>)
 8004546:	f063 03a0 	orn	r3, r3, #160	; 0xa0
 800454a:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800454c:	f7fb fef6 	bl	800033c <HAL_GetTick>
 8004550:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004552:	e009      	b.n	8004568 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004554:	f7fb fef2 	bl	800033c <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004562:	d901      	bls.n	8004568 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e006      	b.n	8004576 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004568:	4b05      	ldr	r3, [pc, #20]	; (8004580 <HAL_RTC_WaitForSynchro+0x48>)
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	f003 0320 	and.w	r3, r3, #32
 8004570:	2b00      	cmp	r3, #0
 8004572:	d0ef      	beq.n	8004554 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	40002800 	.word	0x40002800

08004584 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800458c:	2300      	movs	r3, #0
 800458e:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8004590:	4b15      	ldr	r3, [pc, #84]	; (80045e8 <RTC_EnterInitMode+0x64>)
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004598:	2b00      	cmp	r3, #0
 800459a:	d120      	bne.n	80045de <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800459c:	4b12      	ldr	r3, [pc, #72]	; (80045e8 <RTC_EnterInitMode+0x64>)
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	4a11      	ldr	r2, [pc, #68]	; (80045e8 <RTC_EnterInitMode+0x64>)
 80045a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045a6:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80045a8:	f7fb fec8 	bl	800033c <HAL_GetTick>
 80045ac:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80045ae:	e00d      	b.n	80045cc <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80045b0:	f7fb fec4 	bl	800033c <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045be:	d905      	bls.n	80045cc <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2203      	movs	r2, #3
 80045c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80045cc:	4b06      	ldr	r3, [pc, #24]	; (80045e8 <RTC_EnterInitMode+0x64>)
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d102      	bne.n	80045de <RTC_EnterInitMode+0x5a>
 80045d8:	7bfb      	ldrb	r3, [r7, #15]
 80045da:	2b03      	cmp	r3, #3
 80045dc:	d1e8      	bne.n	80045b0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80045de:	7bfb      	ldrb	r3, [r7, #15]
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3710      	adds	r7, #16
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	40002800 	.word	0x40002800

080045ec <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045f4:	2300      	movs	r3, #0
 80045f6:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80045f8:	4b1a      	ldr	r3, [pc, #104]	; (8004664 <RTC_ExitInitMode+0x78>)
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	4a19      	ldr	r2, [pc, #100]	; (8004664 <RTC_ExitInitMode+0x78>)
 80045fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004602:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004604:	4b17      	ldr	r3, [pc, #92]	; (8004664 <RTC_ExitInitMode+0x78>)
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	f003 0320 	and.w	r3, r3, #32
 800460c:	2b00      	cmp	r3, #0
 800460e:	d10c      	bne.n	800462a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f7ff ff91 	bl	8004538 <HAL_RTC_WaitForSynchro>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d01e      	beq.n	800465a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2203      	movs	r2, #3
 8004620:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	73fb      	strb	r3, [r7, #15]
 8004628:	e017      	b.n	800465a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800462a:	4b0e      	ldr	r3, [pc, #56]	; (8004664 <RTC_ExitInitMode+0x78>)
 800462c:	699b      	ldr	r3, [r3, #24]
 800462e:	4a0d      	ldr	r2, [pc, #52]	; (8004664 <RTC_ExitInitMode+0x78>)
 8004630:	f023 0320 	bic.w	r3, r3, #32
 8004634:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f7ff ff7e 	bl	8004538 <HAL_RTC_WaitForSynchro>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d005      	beq.n	800464e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2203      	movs	r2, #3
 8004646:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800464e:	4b05      	ldr	r3, [pc, #20]	; (8004664 <RTC_ExitInitMode+0x78>)
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	4a04      	ldr	r2, [pc, #16]	; (8004664 <RTC_ExitInitMode+0x78>)
 8004654:	f043 0320 	orr.w	r3, r3, #32
 8004658:	6193      	str	r3, [r2, #24]
  }

  return status;
 800465a:	7bfb      	ldrb	r3, [r7, #15]
}
 800465c:	4618      	mov	r0, r3
 800465e:	3710      	adds	r7, #16
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}
 8004664:	40002800 	.word	0x40002800

08004668 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	4603      	mov	r3, r0
 8004670:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004672:	2300      	movs	r3, #0
 8004674:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8004676:	79fb      	ldrb	r3, [r7, #7]
 8004678:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 800467a:	e005      	b.n	8004688 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	3301      	adds	r3, #1
 8004680:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8004682:	7afb      	ldrb	r3, [r7, #11]
 8004684:	3b0a      	subs	r3, #10
 8004686:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8004688:	7afb      	ldrb	r3, [r7, #11]
 800468a:	2b09      	cmp	r3, #9
 800468c:	d8f6      	bhi.n	800467c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	b2db      	uxtb	r3, r3
 8004692:	011b      	lsls	r3, r3, #4
 8004694:	b2da      	uxtb	r2, r3
 8004696:	7afb      	ldrb	r3, [r7, #11]
 8004698:	4313      	orrs	r3, r2
 800469a:	b2db      	uxtb	r3, r3
}
 800469c:	4618      	mov	r0, r3
 800469e:	3714      	adds	r7, #20
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d101      	bne.n	80046ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e084      	b.n	80047c4 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d106      	bne.n	80046da <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f006 fabd 	bl	800ac54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2202      	movs	r2, #2
 80046de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046f0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80046fa:	d902      	bls.n	8004702 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80046fc:	2300      	movs	r3, #0
 80046fe:	60fb      	str	r3, [r7, #12]
 8004700:	e002      	b.n	8004708 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004702:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004706:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004710:	d007      	beq.n	8004722 <HAL_SPI_Init+0x7a>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800471a:	d002      	beq.n	8004722 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004726:	2b00      	cmp	r3, #0
 8004728:	d10b      	bne.n	8004742 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004732:	d903      	bls.n	800473c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2202      	movs	r2, #2
 8004738:	631a      	str	r2, [r3, #48]	; 0x30
 800473a:	e002      	b.n	8004742 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685a      	ldr	r2, [r3, #4]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	431a      	orrs	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	431a      	orrs	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	431a      	orrs	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	699b      	ldr	r3, [r3, #24]
 800475c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004760:	431a      	orrs	r2, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	69db      	ldr	r3, [r3, #28]
 8004766:	431a      	orrs	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a1b      	ldr	r3, [r3, #32]
 800476c:	ea42 0103 	orr.w	r1, r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	430a      	orrs	r2, r1
 800477a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	699b      	ldr	r3, [r3, #24]
 8004780:	0c1b      	lsrs	r3, r3, #16
 8004782:	f003 0204 	and.w	r2, r3, #4
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478a:	431a      	orrs	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004790:	431a      	orrs	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	ea42 0103 	orr.w	r1, r2, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	430a      	orrs	r2, r1
 80047a2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	69da      	ldr	r2, [r3, #28]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047b2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3710      	adds	r7, #16
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80047d4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80047d8:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80047e0:	b29a      	uxth	r2, r3
 80047e2:	89fb      	ldrh	r3, [r7, #14]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3714      	adds	r7, #20
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004804:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004808:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004810:	b29b      	uxth	r3, r3
 8004812:	b21a      	sxth	r2, r3
 8004814:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004818:	43db      	mvns	r3, r3
 800481a:	b21b      	sxth	r3, r3
 800481c:	4013      	ands	r3, r2
 800481e:	b21b      	sxth	r3, r3
 8004820:	b29a      	uxth	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3714      	adds	r7, #20
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr

08004836 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004836:	b084      	sub	sp, #16
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	f107 0014 	add.w	r0, r7, #20
 8004844:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f7ff ffaf 	bl	80047cc <USB_EnableGlobalInt>

  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3708      	adds	r7, #8
 8004874:	46bd      	mov	sp, r7
 8004876:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800487a:	b004      	add	sp, #16
 800487c:	4770      	bx	lr
	...

08004880 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004880:	b490      	push	{r4, r7}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800488a:	2300      	movs	r3, #0
 800488c:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	4413      	add	r3, r2
 8004898:	881b      	ldrh	r3, [r3, #0]
 800489a:	b29b      	uxth	r3, r3
 800489c:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80048a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048a4:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	78db      	ldrb	r3, [r3, #3]
 80048aa:	2b03      	cmp	r3, #3
 80048ac:	d819      	bhi.n	80048e2 <USB_ActivateEndpoint+0x62>
 80048ae:	a201      	add	r2, pc, #4	; (adr r2, 80048b4 <USB_ActivateEndpoint+0x34>)
 80048b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b4:	080048c5 	.word	0x080048c5
 80048b8:	080048d9 	.word	0x080048d9
 80048bc:	080048e9 	.word	0x080048e9
 80048c0:	080048cf 	.word	0x080048cf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80048c4:	89bb      	ldrh	r3, [r7, #12]
 80048c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048ca:	81bb      	strh	r3, [r7, #12]
      break;
 80048cc:	e00d      	b.n	80048ea <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80048ce:	89bb      	ldrh	r3, [r7, #12]
 80048d0:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80048d4:	81bb      	strh	r3, [r7, #12]
      break;
 80048d6:	e008      	b.n	80048ea <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80048d8:	89bb      	ldrh	r3, [r7, #12]
 80048da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048de:	81bb      	strh	r3, [r7, #12]
      break;
 80048e0:	e003      	b.n	80048ea <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	73fb      	strb	r3, [r7, #15]
      break;
 80048e6:	e000      	b.n	80048ea <USB_ActivateEndpoint+0x6a>
      break;
 80048e8:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	441a      	add	r2, r3
 80048f4:	89bb      	ldrh	r3, [r7, #12]
 80048f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004902:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004906:	b29b      	uxth	r3, r3
 8004908:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	4413      	add	r3, r2
 8004914:	881b      	ldrh	r3, [r3, #0]
 8004916:	b29b      	uxth	r3, r3
 8004918:	b21b      	sxth	r3, r3
 800491a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800491e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004922:	b21a      	sxth	r2, r3
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	b21b      	sxth	r3, r3
 800492a:	4313      	orrs	r3, r2
 800492c:	b21b      	sxth	r3, r3
 800492e:	b29c      	uxth	r4, r3
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	441a      	add	r2, r3
 800493a:	4b8a      	ldr	r3, [pc, #552]	; (8004b64 <USB_ActivateEndpoint+0x2e4>)
 800493c:	4323      	orrs	r3, r4
 800493e:	b29b      	uxth	r3, r3
 8004940:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	7b1b      	ldrb	r3, [r3, #12]
 8004946:	2b00      	cmp	r3, #0
 8004948:	f040 8112 	bne.w	8004b70 <USB_ActivateEndpoint+0x2f0>
  {
    if (ep->is_in != 0U)
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	785b      	ldrb	r3, [r3, #1]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d067      	beq.n	8004a24 <USB_ActivateEndpoint+0x1a4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004954:	687c      	ldr	r4, [r7, #4]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800495c:	b29b      	uxth	r3, r3
 800495e:	441c      	add	r4, r3
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	00db      	lsls	r3, r3, #3
 8004966:	4423      	add	r3, r4
 8004968:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800496c:	461c      	mov	r4, r3
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	88db      	ldrh	r3, [r3, #6]
 8004972:	085b      	lsrs	r3, r3, #1
 8004974:	b29b      	uxth	r3, r3
 8004976:	005b      	lsls	r3, r3, #1
 8004978:	b29b      	uxth	r3, r3
 800497a:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	4413      	add	r3, r2
 8004986:	881b      	ldrh	r3, [r3, #0]
 8004988:	b29c      	uxth	r4, r3
 800498a:	4623      	mov	r3, r4
 800498c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004990:	2b00      	cmp	r3, #0
 8004992:	d014      	beq.n	80049be <USB_ActivateEndpoint+0x13e>
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	4413      	add	r3, r2
 800499e:	881b      	ldrh	r3, [r3, #0]
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049aa:	b29c      	uxth	r4, r3
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	441a      	add	r2, r3
 80049b6:	4b6c      	ldr	r3, [pc, #432]	; (8004b68 <USB_ActivateEndpoint+0x2e8>)
 80049b8:	4323      	orrs	r3, r4
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	78db      	ldrb	r3, [r3, #3]
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d018      	beq.n	80049f8 <USB_ActivateEndpoint+0x178>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	4413      	add	r3, r2
 80049d0:	881b      	ldrh	r3, [r3, #0]
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049dc:	b29c      	uxth	r4, r3
 80049de:	f084 0320 	eor.w	r3, r4, #32
 80049e2:	b29c      	uxth	r4, r3
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	441a      	add	r2, r3
 80049ee:	4b5d      	ldr	r3, [pc, #372]	; (8004b64 <USB_ActivateEndpoint+0x2e4>)
 80049f0:	4323      	orrs	r3, r4
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	8013      	strh	r3, [r2, #0]
 80049f6:	e22b      	b.n	8004e50 <USB_ActivateEndpoint+0x5d0>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	4413      	add	r3, r2
 8004a02:	881b      	ldrh	r3, [r3, #0]
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a0e:	b29c      	uxth	r4, r3
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	441a      	add	r2, r3
 8004a1a:	4b52      	ldr	r3, [pc, #328]	; (8004b64 <USB_ActivateEndpoint+0x2e4>)
 8004a1c:	4323      	orrs	r3, r4
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	8013      	strh	r3, [r2, #0]
 8004a22:	e215      	b.n	8004e50 <USB_ActivateEndpoint+0x5d0>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004a24:	687c      	ldr	r4, [r7, #4]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	441c      	add	r4, r3
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	00db      	lsls	r3, r3, #3
 8004a36:	4423      	add	r3, r4
 8004a38:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a3c:	461c      	mov	r4, r3
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	88db      	ldrh	r3, [r3, #6]
 8004a42:	085b      	lsrs	r3, r3, #1
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	005b      	lsls	r3, r3, #1
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004a4c:	687c      	ldr	r4, [r7, #4]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	441c      	add	r4, r3
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	00db      	lsls	r3, r3, #3
 8004a5e:	4423      	add	r3, r4
 8004a60:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004a64:	461c      	mov	r4, r3
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d10e      	bne.n	8004a8c <USB_ActivateEndpoint+0x20c>
 8004a6e:	8823      	ldrh	r3, [r4, #0]
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	8023      	strh	r3, [r4, #0]
 8004a7a:	8823      	ldrh	r3, [r4, #0]
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	8023      	strh	r3, [r4, #0]
 8004a8a:	e02d      	b.n	8004ae8 <USB_ActivateEndpoint+0x268>
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	2b3e      	cmp	r3, #62	; 0x3e
 8004a92:	d812      	bhi.n	8004aba <USB_ActivateEndpoint+0x23a>
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	085b      	lsrs	r3, r3, #1
 8004a9a:	60bb      	str	r3, [r7, #8]
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	f003 0301 	and.w	r3, r3, #1
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d002      	beq.n	8004aae <USB_ActivateEndpoint+0x22e>
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	3301      	adds	r3, #1
 8004aac:	60bb      	str	r3, [r7, #8]
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	029b      	lsls	r3, r3, #10
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	8023      	strh	r3, [r4, #0]
 8004ab8:	e016      	b.n	8004ae8 <USB_ActivateEndpoint+0x268>
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	095b      	lsrs	r3, r3, #5
 8004ac0:	60bb      	str	r3, [r7, #8]
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	f003 031f 	and.w	r3, r3, #31
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d102      	bne.n	8004ad4 <USB_ActivateEndpoint+0x254>
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	3b01      	subs	r3, #1
 8004ad2:	60bb      	str	r3, [r7, #8]
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	029b      	lsls	r3, r3, #10
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ae0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	4413      	add	r3, r2
 8004af2:	881b      	ldrh	r3, [r3, #0]
 8004af4:	b29c      	uxth	r4, r3
 8004af6:	4623      	mov	r3, r4
 8004af8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d014      	beq.n	8004b2a <USB_ActivateEndpoint+0x2aa>
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	4413      	add	r3, r2
 8004b0a:	881b      	ldrh	r3, [r3, #0]
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b16:	b29c      	uxth	r4, r3
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	441a      	add	r2, r3
 8004b22:	4b12      	ldr	r3, [pc, #72]	; (8004b6c <USB_ActivateEndpoint+0x2ec>)
 8004b24:	4323      	orrs	r3, r4
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	4413      	add	r3, r2
 8004b34:	881b      	ldrh	r3, [r3, #0]
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b40:	b29c      	uxth	r4, r3
 8004b42:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004b46:	b29c      	uxth	r4, r3
 8004b48:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004b4c:	b29c      	uxth	r4, r3
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	441a      	add	r2, r3
 8004b58:	4b02      	ldr	r3, [pc, #8]	; (8004b64 <USB_ActivateEndpoint+0x2e4>)
 8004b5a:	4323      	orrs	r3, r4
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	8013      	strh	r3, [r2, #0]
 8004b60:	e176      	b.n	8004e50 <USB_ActivateEndpoint+0x5d0>
 8004b62:	bf00      	nop
 8004b64:	ffff8080 	.word	0xffff8080
 8004b68:	ffff80c0 	.word	0xffff80c0
 8004b6c:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	4413      	add	r3, r2
 8004b7a:	881b      	ldrh	r3, [r3, #0]
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b86:	b29c      	uxth	r4, r3
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	441a      	add	r2, r3
 8004b92:	4b96      	ldr	r3, [pc, #600]	; (8004dec <USB_ActivateEndpoint+0x56c>)
 8004b94:	4323      	orrs	r3, r4
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004b9a:	687c      	ldr	r4, [r7, #4]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	441c      	add	r4, r3
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	00db      	lsls	r3, r3, #3
 8004bac:	4423      	add	r3, r4
 8004bae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bb2:	461c      	mov	r4, r3
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	891b      	ldrh	r3, [r3, #8]
 8004bb8:	085b      	lsrs	r3, r3, #1
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	005b      	lsls	r3, r3, #1
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	8023      	strh	r3, [r4, #0]
 8004bc2:	687c      	ldr	r4, [r7, #4]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	441c      	add	r4, r3
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	00db      	lsls	r3, r3, #3
 8004bd4:	4423      	add	r3, r4
 8004bd6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004bda:	461c      	mov	r4, r3
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	895b      	ldrh	r3, [r3, #10]
 8004be0:	085b      	lsrs	r3, r3, #1
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	005b      	lsls	r3, r3, #1
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	785b      	ldrb	r3, [r3, #1]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	f040 8088 	bne.w	8004d04 <USB_ActivateEndpoint+0x484>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	4413      	add	r3, r2
 8004bfe:	881b      	ldrh	r3, [r3, #0]
 8004c00:	b29c      	uxth	r4, r3
 8004c02:	4623      	mov	r3, r4
 8004c04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d014      	beq.n	8004c36 <USB_ActivateEndpoint+0x3b6>
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	4413      	add	r3, r2
 8004c16:	881b      	ldrh	r3, [r3, #0]
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c22:	b29c      	uxth	r4, r3
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	441a      	add	r2, r3
 8004c2e:	4b70      	ldr	r3, [pc, #448]	; (8004df0 <USB_ActivateEndpoint+0x570>)
 8004c30:	4323      	orrs	r3, r4
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	4413      	add	r3, r2
 8004c40:	881b      	ldrh	r3, [r3, #0]
 8004c42:	b29c      	uxth	r4, r3
 8004c44:	4623      	mov	r3, r4
 8004c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d014      	beq.n	8004c78 <USB_ActivateEndpoint+0x3f8>
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	4413      	add	r3, r2
 8004c58:	881b      	ldrh	r3, [r3, #0]
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c64:	b29c      	uxth	r4, r3
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	441a      	add	r2, r3
 8004c70:	4b60      	ldr	r3, [pc, #384]	; (8004df4 <USB_ActivateEndpoint+0x574>)
 8004c72:	4323      	orrs	r3, r4
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	4413      	add	r3, r2
 8004c82:	881b      	ldrh	r3, [r3, #0]
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c8e:	b29c      	uxth	r4, r3
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	441a      	add	r2, r3
 8004c9a:	4b56      	ldr	r3, [pc, #344]	; (8004df4 <USB_ActivateEndpoint+0x574>)
 8004c9c:	4323      	orrs	r3, r4
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	4413      	add	r3, r2
 8004cac:	881b      	ldrh	r3, [r3, #0]
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cb8:	b29c      	uxth	r4, r3
 8004cba:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004cbe:	b29c      	uxth	r4, r3
 8004cc0:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004cc4:	b29c      	uxth	r4, r3
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	441a      	add	r2, r3
 8004cd0:	4b49      	ldr	r3, [pc, #292]	; (8004df8 <USB_ActivateEndpoint+0x578>)
 8004cd2:	4323      	orrs	r3, r4
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	4413      	add	r3, r2
 8004ce2:	881b      	ldrh	r3, [r3, #0]
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cee:	b29c      	uxth	r4, r3
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	441a      	add	r2, r3
 8004cfa:	4b3f      	ldr	r3, [pc, #252]	; (8004df8 <USB_ActivateEndpoint+0x578>)
 8004cfc:	4323      	orrs	r3, r4
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	8013      	strh	r3, [r2, #0]
 8004d02:	e0a5      	b.n	8004e50 <USB_ActivateEndpoint+0x5d0>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	4413      	add	r3, r2
 8004d0e:	881b      	ldrh	r3, [r3, #0]
 8004d10:	b29c      	uxth	r4, r3
 8004d12:	4623      	mov	r3, r4
 8004d14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d014      	beq.n	8004d46 <USB_ActivateEndpoint+0x4c6>
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	4413      	add	r3, r2
 8004d26:	881b      	ldrh	r3, [r3, #0]
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d32:	b29c      	uxth	r4, r3
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	441a      	add	r2, r3
 8004d3e:	4b2c      	ldr	r3, [pc, #176]	; (8004df0 <USB_ActivateEndpoint+0x570>)
 8004d40:	4323      	orrs	r3, r4
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	4413      	add	r3, r2
 8004d50:	881b      	ldrh	r3, [r3, #0]
 8004d52:	b29c      	uxth	r4, r3
 8004d54:	4623      	mov	r3, r4
 8004d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d014      	beq.n	8004d88 <USB_ActivateEndpoint+0x508>
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	4413      	add	r3, r2
 8004d68:	881b      	ldrh	r3, [r3, #0]
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d74:	b29c      	uxth	r4, r3
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	441a      	add	r2, r3
 8004d80:	4b1c      	ldr	r3, [pc, #112]	; (8004df4 <USB_ActivateEndpoint+0x574>)
 8004d82:	4323      	orrs	r3, r4
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	4413      	add	r3, r2
 8004d92:	881b      	ldrh	r3, [r3, #0]
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d9e:	b29c      	uxth	r4, r3
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	441a      	add	r2, r3
 8004daa:	4b11      	ldr	r3, [pc, #68]	; (8004df0 <USB_ActivateEndpoint+0x570>)
 8004dac:	4323      	orrs	r3, r4
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	78db      	ldrb	r3, [r3, #3]
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d020      	beq.n	8004dfc <USB_ActivateEndpoint+0x57c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	4413      	add	r3, r2
 8004dc4:	881b      	ldrh	r3, [r3, #0]
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dd0:	b29c      	uxth	r4, r3
 8004dd2:	f084 0320 	eor.w	r3, r4, #32
 8004dd6:	b29c      	uxth	r4, r3
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	441a      	add	r2, r3
 8004de2:	4b05      	ldr	r3, [pc, #20]	; (8004df8 <USB_ActivateEndpoint+0x578>)
 8004de4:	4323      	orrs	r3, r4
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	8013      	strh	r3, [r2, #0]
 8004dea:	e01c      	b.n	8004e26 <USB_ActivateEndpoint+0x5a6>
 8004dec:	ffff8180 	.word	0xffff8180
 8004df0:	ffffc080 	.word	0xffffc080
 8004df4:	ffff80c0 	.word	0xffff80c0
 8004df8:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	4413      	add	r3, r2
 8004e06:	881b      	ldrh	r3, [r3, #0]
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e12:	b29c      	uxth	r4, r3
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	441a      	add	r2, r3
 8004e1e:	4b0f      	ldr	r3, [pc, #60]	; (8004e5c <USB_ActivateEndpoint+0x5dc>)
 8004e20:	4323      	orrs	r3, r4
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	4413      	add	r3, r2
 8004e30:	881b      	ldrh	r3, [r3, #0]
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e3c:	b29c      	uxth	r4, r3
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	441a      	add	r2, r3
 8004e48:	4b04      	ldr	r3, [pc, #16]	; (8004e5c <USB_ActivateEndpoint+0x5dc>)
 8004e4a:	4323      	orrs	r3, r4
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3710      	adds	r7, #16
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bc90      	pop	{r4, r7}
 8004e5a:	4770      	bx	lr
 8004e5c:	ffff8080 	.word	0xffff8080

08004e60 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004e60:	b490      	push	{r4, r7}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	7b1b      	ldrb	r3, [r3, #12]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d171      	bne.n	8004f56 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	785b      	ldrb	r3, [r3, #1]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d036      	beq.n	8004ee8 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	4413      	add	r3, r2
 8004e84:	881b      	ldrh	r3, [r3, #0]
 8004e86:	b29c      	uxth	r4, r3
 8004e88:	4623      	mov	r3, r4
 8004e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d014      	beq.n	8004ebc <USB_DeactivateEndpoint+0x5c>
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	4413      	add	r3, r2
 8004e9c:	881b      	ldrh	r3, [r3, #0]
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ea4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea8:	b29c      	uxth	r4, r3
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	441a      	add	r2, r3
 8004eb4:	4b6b      	ldr	r3, [pc, #428]	; (8005064 <USB_DeactivateEndpoint+0x204>)
 8004eb6:	4323      	orrs	r3, r4
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	4413      	add	r3, r2
 8004ec6:	881b      	ldrh	r3, [r3, #0]
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ece:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ed2:	b29c      	uxth	r4, r3
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	441a      	add	r2, r3
 8004ede:	4b62      	ldr	r3, [pc, #392]	; (8005068 <USB_DeactivateEndpoint+0x208>)
 8004ee0:	4323      	orrs	r3, r4
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	8013      	strh	r3, [r2, #0]
 8004ee6:	e144      	b.n	8005172 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	4413      	add	r3, r2
 8004ef2:	881b      	ldrh	r3, [r3, #0]
 8004ef4:	b29c      	uxth	r4, r3
 8004ef6:	4623      	mov	r3, r4
 8004ef8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d014      	beq.n	8004f2a <USB_DeactivateEndpoint+0xca>
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	4413      	add	r3, r2
 8004f0a:	881b      	ldrh	r3, [r3, #0]
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f16:	b29c      	uxth	r4, r3
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	441a      	add	r2, r3
 8004f22:	4b52      	ldr	r3, [pc, #328]	; (800506c <USB_DeactivateEndpoint+0x20c>)
 8004f24:	4323      	orrs	r3, r4
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	4413      	add	r3, r2
 8004f34:	881b      	ldrh	r3, [r3, #0]
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f40:	b29c      	uxth	r4, r3
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	441a      	add	r2, r3
 8004f4c:	4b46      	ldr	r3, [pc, #280]	; (8005068 <USB_DeactivateEndpoint+0x208>)
 8004f4e:	4323      	orrs	r3, r4
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	8013      	strh	r3, [r2, #0]
 8004f54:	e10d      	b.n	8005172 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	785b      	ldrb	r3, [r3, #1]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	f040 8088 	bne.w	8005070 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	4413      	add	r3, r2
 8004f6a:	881b      	ldrh	r3, [r3, #0]
 8004f6c:	b29c      	uxth	r4, r3
 8004f6e:	4623      	mov	r3, r4
 8004f70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d014      	beq.n	8004fa2 <USB_DeactivateEndpoint+0x142>
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	4413      	add	r3, r2
 8004f82:	881b      	ldrh	r3, [r3, #0]
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f8e:	b29c      	uxth	r4, r3
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	441a      	add	r2, r3
 8004f9a:	4b34      	ldr	r3, [pc, #208]	; (800506c <USB_DeactivateEndpoint+0x20c>)
 8004f9c:	4323      	orrs	r3, r4
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	4413      	add	r3, r2
 8004fac:	881b      	ldrh	r3, [r3, #0]
 8004fae:	b29c      	uxth	r4, r3
 8004fb0:	4623      	mov	r3, r4
 8004fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d014      	beq.n	8004fe4 <USB_DeactivateEndpoint+0x184>
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	4413      	add	r3, r2
 8004fc4:	881b      	ldrh	r3, [r3, #0]
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd0:	b29c      	uxth	r4, r3
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	441a      	add	r2, r3
 8004fdc:	4b21      	ldr	r3, [pc, #132]	; (8005064 <USB_DeactivateEndpoint+0x204>)
 8004fde:	4323      	orrs	r3, r4
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	4413      	add	r3, r2
 8004fee:	881b      	ldrh	r3, [r3, #0]
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ffa:	b29c      	uxth	r4, r3
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	441a      	add	r2, r3
 8005006:	4b17      	ldr	r3, [pc, #92]	; (8005064 <USB_DeactivateEndpoint+0x204>)
 8005008:	4323      	orrs	r3, r4
 800500a:	b29b      	uxth	r3, r3
 800500c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	4413      	add	r3, r2
 8005018:	881b      	ldrh	r3, [r3, #0]
 800501a:	b29b      	uxth	r3, r3
 800501c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005020:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005024:	b29c      	uxth	r4, r3
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	441a      	add	r2, r3
 8005030:	4b0d      	ldr	r3, [pc, #52]	; (8005068 <USB_DeactivateEndpoint+0x208>)
 8005032:	4323      	orrs	r3, r4
 8005034:	b29b      	uxth	r3, r3
 8005036:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	4413      	add	r3, r2
 8005042:	881b      	ldrh	r3, [r3, #0]
 8005044:	b29b      	uxth	r3, r3
 8005046:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800504a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800504e:	b29c      	uxth	r4, r3
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	441a      	add	r2, r3
 800505a:	4b03      	ldr	r3, [pc, #12]	; (8005068 <USB_DeactivateEndpoint+0x208>)
 800505c:	4323      	orrs	r3, r4
 800505e:	b29b      	uxth	r3, r3
 8005060:	8013      	strh	r3, [r2, #0]
 8005062:	e086      	b.n	8005172 <USB_DeactivateEndpoint+0x312>
 8005064:	ffff80c0 	.word	0xffff80c0
 8005068:	ffff8080 	.word	0xffff8080
 800506c:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	4413      	add	r3, r2
 800507a:	881b      	ldrh	r3, [r3, #0]
 800507c:	b29c      	uxth	r4, r3
 800507e:	4623      	mov	r3, r4
 8005080:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d014      	beq.n	80050b2 <USB_DeactivateEndpoint+0x252>
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	4413      	add	r3, r2
 8005092:	881b      	ldrh	r3, [r3, #0]
 8005094:	b29b      	uxth	r3, r3
 8005096:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800509a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800509e:	b29c      	uxth	r4, r3
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	441a      	add	r2, r3
 80050aa:	4b35      	ldr	r3, [pc, #212]	; (8005180 <USB_DeactivateEndpoint+0x320>)
 80050ac:	4323      	orrs	r3, r4
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	4413      	add	r3, r2
 80050bc:	881b      	ldrh	r3, [r3, #0]
 80050be:	b29c      	uxth	r4, r3
 80050c0:	4623      	mov	r3, r4
 80050c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d014      	beq.n	80050f4 <USB_DeactivateEndpoint+0x294>
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	4413      	add	r3, r2
 80050d4:	881b      	ldrh	r3, [r3, #0]
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050e0:	b29c      	uxth	r4, r3
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	441a      	add	r2, r3
 80050ec:	4b25      	ldr	r3, [pc, #148]	; (8005184 <USB_DeactivateEndpoint+0x324>)
 80050ee:	4323      	orrs	r3, r4
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	4413      	add	r3, r2
 80050fe:	881b      	ldrh	r3, [r3, #0]
 8005100:	b29b      	uxth	r3, r3
 8005102:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800510a:	b29c      	uxth	r4, r3
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	441a      	add	r2, r3
 8005116:	4b1a      	ldr	r3, [pc, #104]	; (8005180 <USB_DeactivateEndpoint+0x320>)
 8005118:	4323      	orrs	r3, r4
 800511a:	b29b      	uxth	r3, r3
 800511c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	4413      	add	r3, r2
 8005128:	881b      	ldrh	r3, [r3, #0]
 800512a:	b29b      	uxth	r3, r3
 800512c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005130:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005134:	b29c      	uxth	r4, r3
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	441a      	add	r2, r3
 8005140:	4b11      	ldr	r3, [pc, #68]	; (8005188 <USB_DeactivateEndpoint+0x328>)
 8005142:	4323      	orrs	r3, r4
 8005144:	b29b      	uxth	r3, r3
 8005146:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	4413      	add	r3, r2
 8005152:	881b      	ldrh	r3, [r3, #0]
 8005154:	b29b      	uxth	r3, r3
 8005156:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800515a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800515e:	b29c      	uxth	r4, r3
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	441a      	add	r2, r3
 800516a:	4b07      	ldr	r3, [pc, #28]	; (8005188 <USB_DeactivateEndpoint+0x328>)
 800516c:	4323      	orrs	r3, r4
 800516e:	b29b      	uxth	r3, r3
 8005170:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3708      	adds	r7, #8
 8005178:	46bd      	mov	sp, r7
 800517a:	bc90      	pop	{r4, r7}
 800517c:	4770      	bx	lr
 800517e:	bf00      	nop
 8005180:	ffffc080 	.word	0xffffc080
 8005184:	ffff80c0 	.word	0xffff80c0
 8005188:	ffff8080 	.word	0xffff8080

0800518c <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800518c:	b590      	push	{r4, r7, lr}
 800518e:	b08d      	sub	sp, #52	; 0x34
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	785b      	ldrb	r3, [r3, #1]
 800519a:	2b01      	cmp	r3, #1
 800519c:	f040 8160 	bne.w	8005460 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	699a      	ldr	r2, [r3, #24]
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d909      	bls.n	80051c0 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	699a      	ldr	r2, [r3, #24]
 80051b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b8:	1ad2      	subs	r2, r2, r3
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	619a      	str	r2, [r3, #24]
 80051be:	e005      	b.n	80051cc <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	2200      	movs	r2, #0
 80051ca:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	7b1b      	ldrb	r3, [r3, #12]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d119      	bne.n	8005208 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	6959      	ldr	r1, [r3, #20]
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	88da      	ldrh	r2, [r3, #6]
 80051dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051de:	b29b      	uxth	r3, r3
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 fba8 	bl	8005936 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80051e6:	687c      	ldr	r4, [r7, #4]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	441c      	add	r4, r3
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	00db      	lsls	r3, r3, #3
 80051f8:	4423      	add	r3, r4
 80051fa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80051fe:	461c      	mov	r4, r3
 8005200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005202:	b29b      	uxth	r3, r3
 8005204:	8023      	strh	r3, [r4, #0]
 8005206:	e10f      	b.n	8005428 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	4413      	add	r3, r2
 8005212:	881b      	ldrh	r3, [r3, #0]
 8005214:	b29b      	uxth	r3, r3
 8005216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800521a:	2b00      	cmp	r3, #0
 800521c:	d065      	beq.n	80052ea <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800521e:	687c      	ldr	r4, [r7, #4]
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	785b      	ldrb	r3, [r3, #1]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d148      	bne.n	80052ba <USB_EPStartXfer+0x12e>
 8005228:	687c      	ldr	r4, [r7, #4]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005230:	b29b      	uxth	r3, r3
 8005232:	441c      	add	r4, r3
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	00db      	lsls	r3, r3, #3
 800523a:	4423      	add	r3, r4
 800523c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005240:	461c      	mov	r4, r3
 8005242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005244:	2b00      	cmp	r3, #0
 8005246:	d10e      	bne.n	8005266 <USB_EPStartXfer+0xda>
 8005248:	8823      	ldrh	r3, [r4, #0]
 800524a:	b29b      	uxth	r3, r3
 800524c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005250:	b29b      	uxth	r3, r3
 8005252:	8023      	strh	r3, [r4, #0]
 8005254:	8823      	ldrh	r3, [r4, #0]
 8005256:	b29b      	uxth	r3, r3
 8005258:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800525c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005260:	b29b      	uxth	r3, r3
 8005262:	8023      	strh	r3, [r4, #0]
 8005264:	e03d      	b.n	80052e2 <USB_EPStartXfer+0x156>
 8005266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005268:	2b3e      	cmp	r3, #62	; 0x3e
 800526a:	d810      	bhi.n	800528e <USB_EPStartXfer+0x102>
 800526c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526e:	085b      	lsrs	r3, r3, #1
 8005270:	627b      	str	r3, [r7, #36]	; 0x24
 8005272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005274:	f003 0301 	and.w	r3, r3, #1
 8005278:	2b00      	cmp	r3, #0
 800527a:	d002      	beq.n	8005282 <USB_EPStartXfer+0xf6>
 800527c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527e:	3301      	adds	r3, #1
 8005280:	627b      	str	r3, [r7, #36]	; 0x24
 8005282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005284:	b29b      	uxth	r3, r3
 8005286:	029b      	lsls	r3, r3, #10
 8005288:	b29b      	uxth	r3, r3
 800528a:	8023      	strh	r3, [r4, #0]
 800528c:	e029      	b.n	80052e2 <USB_EPStartXfer+0x156>
 800528e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005290:	095b      	lsrs	r3, r3, #5
 8005292:	627b      	str	r3, [r7, #36]	; 0x24
 8005294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005296:	f003 031f 	and.w	r3, r3, #31
 800529a:	2b00      	cmp	r3, #0
 800529c:	d102      	bne.n	80052a4 <USB_EPStartXfer+0x118>
 800529e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a0:	3b01      	subs	r3, #1
 80052a2:	627b      	str	r3, [r7, #36]	; 0x24
 80052a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	029b      	lsls	r3, r3, #10
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	8023      	strh	r3, [r4, #0]
 80052b8:	e013      	b.n	80052e2 <USB_EPStartXfer+0x156>
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	785b      	ldrb	r3, [r3, #1]
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d10f      	bne.n	80052e2 <USB_EPStartXfer+0x156>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	441c      	add	r4, r3
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	00db      	lsls	r3, r3, #3
 80052d2:	4423      	add	r3, r4
 80052d4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80052d8:	60fb      	str	r3, [r7, #12]
 80052da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052dc:	b29a      	uxth	r2, r3
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	895b      	ldrh	r3, [r3, #10]
 80052e6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80052e8:	e063      	b.n	80053b2 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	785b      	ldrb	r3, [r3, #1]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d148      	bne.n	8005384 <USB_EPStartXfer+0x1f8>
 80052f2:	687c      	ldr	r4, [r7, #4]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	441c      	add	r4, r3
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	00db      	lsls	r3, r3, #3
 8005304:	4423      	add	r3, r4
 8005306:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800530a:	461c      	mov	r4, r3
 800530c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530e:	2b00      	cmp	r3, #0
 8005310:	d10e      	bne.n	8005330 <USB_EPStartXfer+0x1a4>
 8005312:	8823      	ldrh	r3, [r4, #0]
 8005314:	b29b      	uxth	r3, r3
 8005316:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800531a:	b29b      	uxth	r3, r3
 800531c:	8023      	strh	r3, [r4, #0]
 800531e:	8823      	ldrh	r3, [r4, #0]
 8005320:	b29b      	uxth	r3, r3
 8005322:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005326:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800532a:	b29b      	uxth	r3, r3
 800532c:	8023      	strh	r3, [r4, #0]
 800532e:	e03d      	b.n	80053ac <USB_EPStartXfer+0x220>
 8005330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005332:	2b3e      	cmp	r3, #62	; 0x3e
 8005334:	d810      	bhi.n	8005358 <USB_EPStartXfer+0x1cc>
 8005336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005338:	085b      	lsrs	r3, r3, #1
 800533a:	623b      	str	r3, [r7, #32]
 800533c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800533e:	f003 0301 	and.w	r3, r3, #1
 8005342:	2b00      	cmp	r3, #0
 8005344:	d002      	beq.n	800534c <USB_EPStartXfer+0x1c0>
 8005346:	6a3b      	ldr	r3, [r7, #32]
 8005348:	3301      	adds	r3, #1
 800534a:	623b      	str	r3, [r7, #32]
 800534c:	6a3b      	ldr	r3, [r7, #32]
 800534e:	b29b      	uxth	r3, r3
 8005350:	029b      	lsls	r3, r3, #10
 8005352:	b29b      	uxth	r3, r3
 8005354:	8023      	strh	r3, [r4, #0]
 8005356:	e029      	b.n	80053ac <USB_EPStartXfer+0x220>
 8005358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800535a:	095b      	lsrs	r3, r3, #5
 800535c:	623b      	str	r3, [r7, #32]
 800535e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005360:	f003 031f 	and.w	r3, r3, #31
 8005364:	2b00      	cmp	r3, #0
 8005366:	d102      	bne.n	800536e <USB_EPStartXfer+0x1e2>
 8005368:	6a3b      	ldr	r3, [r7, #32]
 800536a:	3b01      	subs	r3, #1
 800536c:	623b      	str	r3, [r7, #32]
 800536e:	6a3b      	ldr	r3, [r7, #32]
 8005370:	b29b      	uxth	r3, r3
 8005372:	029b      	lsls	r3, r3, #10
 8005374:	b29b      	uxth	r3, r3
 8005376:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800537a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800537e:	b29b      	uxth	r3, r3
 8005380:	8023      	strh	r3, [r4, #0]
 8005382:	e013      	b.n	80053ac <USB_EPStartXfer+0x220>
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	785b      	ldrb	r3, [r3, #1]
 8005388:	2b01      	cmp	r3, #1
 800538a:	d10f      	bne.n	80053ac <USB_EPStartXfer+0x220>
 800538c:	687c      	ldr	r4, [r7, #4]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005394:	b29b      	uxth	r3, r3
 8005396:	441c      	add	r4, r3
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	00db      	lsls	r3, r3, #3
 800539e:	4423      	add	r3, r4
 80053a0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80053a4:	461c      	mov	r4, r3
 80053a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	891b      	ldrh	r3, [r3, #8]
 80053b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	6959      	ldr	r1, [r3, #20]
 80053b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 faba 	bl	8005936 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	785b      	ldrb	r3, [r3, #1]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d115      	bne.n	80053f6 <USB_EPStartXfer+0x26a>
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	4413      	add	r3, r2
 80053d4:	881b      	ldrh	r3, [r3, #0]
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053e0:	b29c      	uxth	r4, r3
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	441a      	add	r2, r3
 80053ec:	4b9a      	ldr	r3, [pc, #616]	; (8005658 <USB_EPStartXfer+0x4cc>)
 80053ee:	4323      	orrs	r3, r4
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	8013      	strh	r3, [r2, #0]
 80053f4:	e018      	b.n	8005428 <USB_EPStartXfer+0x29c>
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	785b      	ldrb	r3, [r3, #1]
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d114      	bne.n	8005428 <USB_EPStartXfer+0x29c>
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	4413      	add	r3, r2
 8005408:	881b      	ldrh	r3, [r3, #0]
 800540a:	b29b      	uxth	r3, r3
 800540c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005410:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005414:	b29c      	uxth	r4, r3
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	441a      	add	r2, r3
 8005420:	4b8e      	ldr	r3, [pc, #568]	; (800565c <USB_EPStartXfer+0x4d0>)
 8005422:	4323      	orrs	r3, r4
 8005424:	b29b      	uxth	r3, r3
 8005426:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	4413      	add	r3, r2
 8005432:	881b      	ldrh	r3, [r3, #0]
 8005434:	b29b      	uxth	r3, r3
 8005436:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800543a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800543e:	b29c      	uxth	r4, r3
 8005440:	f084 0310 	eor.w	r3, r4, #16
 8005444:	b29c      	uxth	r4, r3
 8005446:	f084 0320 	eor.w	r3, r4, #32
 800544a:	b29c      	uxth	r4, r3
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	441a      	add	r2, r3
 8005456:	4b82      	ldr	r3, [pc, #520]	; (8005660 <USB_EPStartXfer+0x4d4>)
 8005458:	4323      	orrs	r3, r4
 800545a:	b29b      	uxth	r3, r3
 800545c:	8013      	strh	r3, [r2, #0]
 800545e:	e146      	b.n	80056ee <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	699a      	ldr	r2, [r3, #24]
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	429a      	cmp	r2, r3
 800546a:	d909      	bls.n	8005480 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	699a      	ldr	r2, [r3, #24]
 8005476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005478:	1ad2      	subs	r2, r2, r3
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	619a      	str	r2, [r3, #24]
 800547e:	e005      	b.n	800548c <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	2200      	movs	r2, #0
 800548a:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	7b1b      	ldrb	r3, [r3, #12]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d148      	bne.n	8005526 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005494:	687c      	ldr	r4, [r7, #4]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800549c:	b29b      	uxth	r3, r3
 800549e:	441c      	add	r4, r3
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	00db      	lsls	r3, r3, #3
 80054a6:	4423      	add	r3, r4
 80054a8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80054ac:	461c      	mov	r4, r3
 80054ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d10e      	bne.n	80054d2 <USB_EPStartXfer+0x346>
 80054b4:	8823      	ldrh	r3, [r4, #0]
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054bc:	b29b      	uxth	r3, r3
 80054be:	8023      	strh	r3, [r4, #0]
 80054c0:	8823      	ldrh	r3, [r4, #0]
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	8023      	strh	r3, [r4, #0]
 80054d0:	e0f2      	b.n	80056b8 <USB_EPStartXfer+0x52c>
 80054d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d4:	2b3e      	cmp	r3, #62	; 0x3e
 80054d6:	d810      	bhi.n	80054fa <USB_EPStartXfer+0x36e>
 80054d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054da:	085b      	lsrs	r3, r3, #1
 80054dc:	61fb      	str	r3, [r7, #28]
 80054de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e0:	f003 0301 	and.w	r3, r3, #1
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d002      	beq.n	80054ee <USB_EPStartXfer+0x362>
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	3301      	adds	r3, #1
 80054ec:	61fb      	str	r3, [r7, #28]
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	029b      	lsls	r3, r3, #10
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	8023      	strh	r3, [r4, #0]
 80054f8:	e0de      	b.n	80056b8 <USB_EPStartXfer+0x52c>
 80054fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fc:	095b      	lsrs	r3, r3, #5
 80054fe:	61fb      	str	r3, [r7, #28]
 8005500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005502:	f003 031f 	and.w	r3, r3, #31
 8005506:	2b00      	cmp	r3, #0
 8005508:	d102      	bne.n	8005510 <USB_EPStartXfer+0x384>
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	3b01      	subs	r3, #1
 800550e:	61fb      	str	r3, [r7, #28]
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	b29b      	uxth	r3, r3
 8005514:	029b      	lsls	r3, r3, #10
 8005516:	b29b      	uxth	r3, r3
 8005518:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800551c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005520:	b29b      	uxth	r3, r3
 8005522:	8023      	strh	r3, [r4, #0]
 8005524:	e0c8      	b.n	80056b8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	785b      	ldrb	r3, [r3, #1]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d148      	bne.n	80055c0 <USB_EPStartXfer+0x434>
 800552e:	687c      	ldr	r4, [r7, #4]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005536:	b29b      	uxth	r3, r3
 8005538:	441c      	add	r4, r3
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	00db      	lsls	r3, r3, #3
 8005540:	4423      	add	r3, r4
 8005542:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005546:	461c      	mov	r4, r3
 8005548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800554a:	2b00      	cmp	r3, #0
 800554c:	d10e      	bne.n	800556c <USB_EPStartXfer+0x3e0>
 800554e:	8823      	ldrh	r3, [r4, #0]
 8005550:	b29b      	uxth	r3, r3
 8005552:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005556:	b29b      	uxth	r3, r3
 8005558:	8023      	strh	r3, [r4, #0]
 800555a:	8823      	ldrh	r3, [r4, #0]
 800555c:	b29b      	uxth	r3, r3
 800555e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005562:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005566:	b29b      	uxth	r3, r3
 8005568:	8023      	strh	r3, [r4, #0]
 800556a:	e03d      	b.n	80055e8 <USB_EPStartXfer+0x45c>
 800556c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556e:	2b3e      	cmp	r3, #62	; 0x3e
 8005570:	d810      	bhi.n	8005594 <USB_EPStartXfer+0x408>
 8005572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005574:	085b      	lsrs	r3, r3, #1
 8005576:	61bb      	str	r3, [r7, #24]
 8005578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800557a:	f003 0301 	and.w	r3, r3, #1
 800557e:	2b00      	cmp	r3, #0
 8005580:	d002      	beq.n	8005588 <USB_EPStartXfer+0x3fc>
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	3301      	adds	r3, #1
 8005586:	61bb      	str	r3, [r7, #24]
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	b29b      	uxth	r3, r3
 800558c:	029b      	lsls	r3, r3, #10
 800558e:	b29b      	uxth	r3, r3
 8005590:	8023      	strh	r3, [r4, #0]
 8005592:	e029      	b.n	80055e8 <USB_EPStartXfer+0x45c>
 8005594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005596:	095b      	lsrs	r3, r3, #5
 8005598:	61bb      	str	r3, [r7, #24]
 800559a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800559c:	f003 031f 	and.w	r3, r3, #31
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d102      	bne.n	80055aa <USB_EPStartXfer+0x41e>
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	3b01      	subs	r3, #1
 80055a8:	61bb      	str	r3, [r7, #24]
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	029b      	lsls	r3, r3, #10
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	8023      	strh	r3, [r4, #0]
 80055be:	e013      	b.n	80055e8 <USB_EPStartXfer+0x45c>
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	785b      	ldrb	r3, [r3, #1]
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d10f      	bne.n	80055e8 <USB_EPStartXfer+0x45c>
 80055c8:	687c      	ldr	r4, [r7, #4]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	441c      	add	r4, r3
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	00db      	lsls	r3, r3, #3
 80055da:	4423      	add	r3, r4
 80055dc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80055e0:	461c      	mov	r4, r3
 80055e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	8023      	strh	r3, [r4, #0]
 80055e8:	687c      	ldr	r4, [r7, #4]
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	785b      	ldrb	r3, [r3, #1]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d14e      	bne.n	8005690 <USB_EPStartXfer+0x504>
 80055f2:	687c      	ldr	r4, [r7, #4]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	441c      	add	r4, r3
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	00db      	lsls	r3, r3, #3
 8005604:	4423      	add	r3, r4
 8005606:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800560a:	461c      	mov	r4, r3
 800560c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560e:	2b00      	cmp	r3, #0
 8005610:	d10e      	bne.n	8005630 <USB_EPStartXfer+0x4a4>
 8005612:	8823      	ldrh	r3, [r4, #0]
 8005614:	b29b      	uxth	r3, r3
 8005616:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800561a:	b29b      	uxth	r3, r3
 800561c:	8023      	strh	r3, [r4, #0]
 800561e:	8823      	ldrh	r3, [r4, #0]
 8005620:	b29b      	uxth	r3, r3
 8005622:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005626:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800562a:	b29b      	uxth	r3, r3
 800562c:	8023      	strh	r3, [r4, #0]
 800562e:	e043      	b.n	80056b8 <USB_EPStartXfer+0x52c>
 8005630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005632:	2b3e      	cmp	r3, #62	; 0x3e
 8005634:	d816      	bhi.n	8005664 <USB_EPStartXfer+0x4d8>
 8005636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005638:	085b      	lsrs	r3, r3, #1
 800563a:	617b      	str	r3, [r7, #20]
 800563c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563e:	f003 0301 	and.w	r3, r3, #1
 8005642:	2b00      	cmp	r3, #0
 8005644:	d002      	beq.n	800564c <USB_EPStartXfer+0x4c0>
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	3301      	adds	r3, #1
 800564a:	617b      	str	r3, [r7, #20]
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	b29b      	uxth	r3, r3
 8005650:	029b      	lsls	r3, r3, #10
 8005652:	b29b      	uxth	r3, r3
 8005654:	8023      	strh	r3, [r4, #0]
 8005656:	e02f      	b.n	80056b8 <USB_EPStartXfer+0x52c>
 8005658:	ffff80c0 	.word	0xffff80c0
 800565c:	ffffc080 	.word	0xffffc080
 8005660:	ffff8080 	.word	0xffff8080
 8005664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005666:	095b      	lsrs	r3, r3, #5
 8005668:	617b      	str	r3, [r7, #20]
 800566a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800566c:	f003 031f 	and.w	r3, r3, #31
 8005670:	2b00      	cmp	r3, #0
 8005672:	d102      	bne.n	800567a <USB_EPStartXfer+0x4ee>
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	3b01      	subs	r3, #1
 8005678:	617b      	str	r3, [r7, #20]
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	b29b      	uxth	r3, r3
 800567e:	029b      	lsls	r3, r3, #10
 8005680:	b29b      	uxth	r3, r3
 8005682:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005686:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800568a:	b29b      	uxth	r3, r3
 800568c:	8023      	strh	r3, [r4, #0]
 800568e:	e013      	b.n	80056b8 <USB_EPStartXfer+0x52c>
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	785b      	ldrb	r3, [r3, #1]
 8005694:	2b01      	cmp	r3, #1
 8005696:	d10f      	bne.n	80056b8 <USB_EPStartXfer+0x52c>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800569e:	b29b      	uxth	r3, r3
 80056a0:	441c      	add	r4, r3
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	00db      	lsls	r3, r3, #3
 80056a8:	4423      	add	r3, r4
 80056aa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80056ae:	613b      	str	r3, [r7, #16]
 80056b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b2:	b29a      	uxth	r2, r3
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	4413      	add	r3, r2
 80056c2:	881b      	ldrh	r3, [r3, #0]
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ce:	b29c      	uxth	r4, r3
 80056d0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80056d4:	b29c      	uxth	r4, r3
 80056d6:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80056da:	b29c      	uxth	r4, r3
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	441a      	add	r2, r3
 80056e6:	4b04      	ldr	r3, [pc, #16]	; (80056f8 <USB_EPStartXfer+0x56c>)
 80056e8:	4323      	orrs	r3, r4
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3734      	adds	r7, #52	; 0x34
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd90      	pop	{r4, r7, pc}
 80056f8:	ffff8080 	.word	0xffff8080

080056fc <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80056fc:	b490      	push	{r4, r7}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	785b      	ldrb	r3, [r3, #1]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d018      	beq.n	8005740 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	4413      	add	r3, r2
 8005718:	881b      	ldrh	r3, [r3, #0]
 800571a:	b29b      	uxth	r3, r3
 800571c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005720:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005724:	b29c      	uxth	r4, r3
 8005726:	f084 0310 	eor.w	r3, r4, #16
 800572a:	b29c      	uxth	r4, r3
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	441a      	add	r2, r3
 8005736:	4b11      	ldr	r3, [pc, #68]	; (800577c <USB_EPSetStall+0x80>)
 8005738:	4323      	orrs	r3, r4
 800573a:	b29b      	uxth	r3, r3
 800573c:	8013      	strh	r3, [r2, #0]
 800573e:	e017      	b.n	8005770 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	4413      	add	r3, r2
 800574a:	881b      	ldrh	r3, [r3, #0]
 800574c:	b29b      	uxth	r3, r3
 800574e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005756:	b29c      	uxth	r4, r3
 8005758:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800575c:	b29c      	uxth	r4, r3
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	441a      	add	r2, r3
 8005768:	4b04      	ldr	r3, [pc, #16]	; (800577c <USB_EPSetStall+0x80>)
 800576a:	4323      	orrs	r3, r4
 800576c:	b29b      	uxth	r3, r3
 800576e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3708      	adds	r7, #8
 8005776:	46bd      	mov	sp, r7
 8005778:	bc90      	pop	{r4, r7}
 800577a:	4770      	bx	lr
 800577c:	ffff8080 	.word	0xffff8080

08005780 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005780:	b490      	push	{r4, r7}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	7b1b      	ldrb	r3, [r3, #12]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d17d      	bne.n	800588e <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	785b      	ldrb	r3, [r3, #1]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d03d      	beq.n	8005816 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	4413      	add	r3, r2
 80057a4:	881b      	ldrh	r3, [r3, #0]
 80057a6:	b29c      	uxth	r4, r3
 80057a8:	4623      	mov	r3, r4
 80057aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d014      	beq.n	80057dc <USB_EPClearStall+0x5c>
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	4413      	add	r3, r2
 80057bc:	881b      	ldrh	r3, [r3, #0]
 80057be:	b29b      	uxth	r3, r3
 80057c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057c8:	b29c      	uxth	r4, r3
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	441a      	add	r2, r3
 80057d4:	4b31      	ldr	r3, [pc, #196]	; (800589c <USB_EPClearStall+0x11c>)
 80057d6:	4323      	orrs	r3, r4
 80057d8:	b29b      	uxth	r3, r3
 80057da:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	78db      	ldrb	r3, [r3, #3]
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d054      	beq.n	800588e <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	4413      	add	r3, r2
 80057ee:	881b      	ldrh	r3, [r3, #0]
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057fa:	b29c      	uxth	r4, r3
 80057fc:	f084 0320 	eor.w	r3, r4, #32
 8005800:	b29c      	uxth	r4, r3
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	441a      	add	r2, r3
 800580c:	4b24      	ldr	r3, [pc, #144]	; (80058a0 <USB_EPClearStall+0x120>)
 800580e:	4323      	orrs	r3, r4
 8005810:	b29b      	uxth	r3, r3
 8005812:	8013      	strh	r3, [r2, #0]
 8005814:	e03b      	b.n	800588e <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	4413      	add	r3, r2
 8005820:	881b      	ldrh	r3, [r3, #0]
 8005822:	b29c      	uxth	r4, r3
 8005824:	4623      	mov	r3, r4
 8005826:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d014      	beq.n	8005858 <USB_EPClearStall+0xd8>
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	4413      	add	r3, r2
 8005838:	881b      	ldrh	r3, [r3, #0]
 800583a:	b29b      	uxth	r3, r3
 800583c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005840:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005844:	b29c      	uxth	r4, r3
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	441a      	add	r2, r3
 8005850:	4b14      	ldr	r3, [pc, #80]	; (80058a4 <USB_EPClearStall+0x124>)
 8005852:	4323      	orrs	r3, r4
 8005854:	b29b      	uxth	r3, r3
 8005856:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	4413      	add	r3, r2
 8005862:	881b      	ldrh	r3, [r3, #0]
 8005864:	b29b      	uxth	r3, r3
 8005866:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800586a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800586e:	b29c      	uxth	r4, r3
 8005870:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005874:	b29c      	uxth	r4, r3
 8005876:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800587a:	b29c      	uxth	r4, r3
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	441a      	add	r2, r3
 8005886:	4b06      	ldr	r3, [pc, #24]	; (80058a0 <USB_EPClearStall+0x120>)
 8005888:	4323      	orrs	r3, r4
 800588a:	b29b      	uxth	r3, r3
 800588c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800588e:	2300      	movs	r3, #0
}
 8005890:	4618      	mov	r0, r3
 8005892:	3708      	adds	r7, #8
 8005894:	46bd      	mov	sp, r7
 8005896:	bc90      	pop	{r4, r7}
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop
 800589c:	ffff80c0 	.word	0xffff80c0
 80058a0:	ffff8080 	.word	0xffff8080
 80058a4:	ffffc080 	.word	0xffffc080

080058a8 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	460b      	mov	r3, r1
 80058b2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80058b4:	78fb      	ldrb	r3, [r7, #3]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d103      	bne.n	80058c2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2280      	movs	r2, #128	; 0x80
 80058be:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80058c2:	2300      	movs	r3, #0
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80058de:	b29b      	uxth	r3, r3
 80058e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058e8:	b29a      	uxth	r2, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	370c      	adds	r7, #12
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr

080058fe <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80058fe:	b480      	push	{r7}
 8005900:	b085      	sub	sp, #20
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800590c:	b29b      	uxth	r3, r3
 800590e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005910:	68fb      	ldr	r3, [r7, #12]
}
 8005912:	4618      	mov	r0, r3
 8005914:	3714      	adds	r7, #20
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr

0800591e <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800591e:	b480      	push	{r7}
 8005920:	b083      	sub	sp, #12
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
 8005926:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	370c      	adds	r7, #12
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr

08005936 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005936:	b480      	push	{r7}
 8005938:	b08d      	sub	sp, #52	; 0x34
 800593a:	af00      	add	r7, sp, #0
 800593c:	60f8      	str	r0, [r7, #12]
 800593e:	60b9      	str	r1, [r7, #8]
 8005940:	4611      	mov	r1, r2
 8005942:	461a      	mov	r2, r3
 8005944:	460b      	mov	r3, r1
 8005946:	80fb      	strh	r3, [r7, #6]
 8005948:	4613      	mov	r3, r2
 800594a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800594c:	88bb      	ldrh	r3, [r7, #4]
 800594e:	3301      	adds	r3, #1
 8005950:	085b      	lsrs	r3, r3, #1
 8005952:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800595c:	88fa      	ldrh	r2, [r7, #6]
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	4413      	add	r3, r2
 8005962:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005966:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005968:	6a3b      	ldr	r3, [r7, #32]
 800596a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800596c:	e01b      	b.n	80059a6 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800596e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005976:	3301      	adds	r3, #1
 8005978:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800597a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	b29b      	uxth	r3, r3
 8005980:	021b      	lsls	r3, r3, #8
 8005982:	b29b      	uxth	r3, r3
 8005984:	461a      	mov	r2, r3
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	4313      	orrs	r3, r2
 800598a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	b29a      	uxth	r2, r3
 8005990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005992:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005996:	3302      	adds	r3, #2
 8005998:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800599a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599c:	3301      	adds	r3, #1
 800599e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80059a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a2:	3b01      	subs	r3, #1
 80059a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d1e0      	bne.n	800596e <USB_WritePMA+0x38>
  }
}
 80059ac:	bf00      	nop
 80059ae:	3734      	adds	r7, #52	; 0x34
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b08b      	sub	sp, #44	; 0x2c
 80059bc:	af00      	add	r7, sp, #0
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	4611      	mov	r1, r2
 80059c4:	461a      	mov	r2, r3
 80059c6:	460b      	mov	r3, r1
 80059c8:	80fb      	strh	r3, [r7, #6]
 80059ca:	4613      	mov	r3, r2
 80059cc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80059ce:	88bb      	ldrh	r3, [r7, #4]
 80059d0:	085b      	lsrs	r3, r3, #1
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80059de:	88fa      	ldrh	r2, [r7, #6]
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	4413      	add	r3, r2
 80059e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059e8:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	627b      	str	r3, [r7, #36]	; 0x24
 80059ee:	e018      	b.n	8005a22 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80059f0:	6a3b      	ldr	r3, [r7, #32]
 80059f2:	881b      	ldrh	r3, [r3, #0]
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80059f8:	6a3b      	ldr	r3, [r7, #32]
 80059fa:	3302      	adds	r3, #2
 80059fc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	b2da      	uxtb	r2, r3
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	3301      	adds	r3, #1
 8005a0a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	0a1b      	lsrs	r3, r3, #8
 8005a10:	b2da      	uxtb	r2, r3
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	3301      	adds	r3, #1
 8005a1a:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8005a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	627b      	str	r3, [r7, #36]	; 0x24
 8005a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d1e3      	bne.n	80059f0 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005a28:	88bb      	ldrh	r3, [r7, #4]
 8005a2a:	f003 0301 	and.w	r3, r3, #1
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d007      	beq.n	8005a44 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8005a34:	6a3b      	ldr	r3, [r7, #32]
 8005a36:	881b      	ldrh	r3, [r3, #0]
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	b2da      	uxtb	r2, r3
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	701a      	strb	r2, [r3, #0]
  }
}
 8005a44:	bf00      	nop
 8005a46:	372c      	adds	r7, #44	; 0x2c
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	460b      	mov	r3, r1
 8005a5a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	7c1b      	ldrb	r3, [r3, #16]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d115      	bne.n	8005a94 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005a68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a6c:	2202      	movs	r2, #2
 8005a6e:	2181      	movs	r1, #129	; 0x81
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f005 fb9a 	bl	800b1aa <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005a7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a80:	2202      	movs	r2, #2
 8005a82:	2101      	movs	r1, #1
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f005 fb90 	bl	800b1aa <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8005a92:	e012      	b.n	8005aba <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005a94:	2340      	movs	r3, #64	; 0x40
 8005a96:	2202      	movs	r2, #2
 8005a98:	2181      	movs	r1, #129	; 0x81
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f005 fb85 	bl	800b1aa <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005aa6:	2340      	movs	r3, #64	; 0x40
 8005aa8:	2202      	movs	r2, #2
 8005aaa:	2101      	movs	r1, #1
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f005 fb7c 	bl	800b1aa <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005aba:	2308      	movs	r3, #8
 8005abc:	2203      	movs	r2, #3
 8005abe:	2182      	movs	r1, #130	; 0x82
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f005 fb72 	bl	800b1aa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2201      	movs	r2, #1
 8005aca:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005acc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005ad0:	f005 fcc2 	bl	800b458 <USBD_static_malloc>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d102      	bne.n	8005aec <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	73fb      	strb	r3, [r7, #15]
 8005aea:	e026      	b.n	8005b3a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005af2:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	7c1b      	ldrb	r3, [r3, #16]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d109      	bne.n	8005b2a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b20:	2101      	movs	r1, #1
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f005 fc2c 	bl	800b380 <USBD_LL_PrepareReceive>
 8005b28:	e007      	b.n	8005b3a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b30:	2340      	movs	r3, #64	; 0x40
 8005b32:	2101      	movs	r1, #1
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f005 fc23 	bl	800b380 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3710      	adds	r7, #16
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005b50:	2300      	movs	r3, #0
 8005b52:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005b54:	2181      	movs	r1, #129	; 0x81
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f005 fb4d 	bl	800b1f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005b62:	2101      	movs	r1, #1
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f005 fb46 	bl	800b1f6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005b72:	2182      	movs	r1, #130	; 0x82
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f005 fb3e 	bl	800b1f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00e      	beq.n	8005ba8 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f005 fc6a 	bl	800b474 <USBD_static_free>
    pdev->pClassData = NULL;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8005ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3710      	adds	r7, #16
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}

08005bb2 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005bb2:	b580      	push	{r7, lr}
 8005bb4:	b086      	sub	sp, #24
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
 8005bba:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bc2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d039      	beq.n	8005c50 <USBD_CDC_Setup+0x9e>
 8005bdc:	2b20      	cmp	r3, #32
 8005bde:	d17c      	bne.n	8005cda <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	88db      	ldrh	r3, [r3, #6]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d029      	beq.n	8005c3c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	b25b      	sxtb	r3, r3
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	da11      	bge.n	8005c16 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	683a      	ldr	r2, [r7, #0]
 8005bfc:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8005bfe:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005c00:	683a      	ldr	r2, [r7, #0]
 8005c02:	88d2      	ldrh	r2, [r2, #6]
 8005c04:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005c06:	6939      	ldr	r1, [r7, #16]
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	88db      	ldrh	r3, [r3, #6]
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f001 f9fa 	bl	8007008 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8005c14:	e068      	b.n	8005ce8 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	785a      	ldrb	r2, [r3, #1]
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	88db      	ldrh	r3, [r3, #6]
 8005c24:	b2da      	uxtb	r2, r3
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005c2c:	6939      	ldr	r1, [r7, #16]
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	88db      	ldrh	r3, [r3, #6]
 8005c32:	461a      	mov	r2, r3
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f001 fa15 	bl	8007064 <USBD_CtlPrepareRx>
      break;
 8005c3a:	e055      	b.n	8005ce8 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	683a      	ldr	r2, [r7, #0]
 8005c46:	7850      	ldrb	r0, [r2, #1]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	6839      	ldr	r1, [r7, #0]
 8005c4c:	4798      	blx	r3
      break;
 8005c4e:	e04b      	b.n	8005ce8 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	785b      	ldrb	r3, [r3, #1]
 8005c54:	2b0a      	cmp	r3, #10
 8005c56:	d017      	beq.n	8005c88 <USBD_CDC_Setup+0xd6>
 8005c58:	2b0b      	cmp	r3, #11
 8005c5a:	d029      	beq.n	8005cb0 <USBD_CDC_Setup+0xfe>
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d133      	bne.n	8005cc8 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c66:	2b03      	cmp	r3, #3
 8005c68:	d107      	bne.n	8005c7a <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005c6a:	f107 030c 	add.w	r3, r7, #12
 8005c6e:	2202      	movs	r2, #2
 8005c70:	4619      	mov	r1, r3
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f001 f9c8 	bl	8007008 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005c78:	e02e      	b.n	8005cd8 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8005c7a:	6839      	ldr	r1, [r7, #0]
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f001 f958 	bl	8006f32 <USBD_CtlError>
            ret = USBD_FAIL;
 8005c82:	2302      	movs	r3, #2
 8005c84:	75fb      	strb	r3, [r7, #23]
          break;
 8005c86:	e027      	b.n	8005cd8 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c8e:	2b03      	cmp	r3, #3
 8005c90:	d107      	bne.n	8005ca2 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005c92:	f107 030f 	add.w	r3, r7, #15
 8005c96:	2201      	movs	r2, #1
 8005c98:	4619      	mov	r1, r3
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f001 f9b4 	bl	8007008 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005ca0:	e01a      	b.n	8005cd8 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8005ca2:	6839      	ldr	r1, [r7, #0]
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f001 f944 	bl	8006f32 <USBD_CtlError>
            ret = USBD_FAIL;
 8005caa:	2302      	movs	r3, #2
 8005cac:	75fb      	strb	r3, [r7, #23]
          break;
 8005cae:	e013      	b.n	8005cd8 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cb6:	2b03      	cmp	r3, #3
 8005cb8:	d00d      	beq.n	8005cd6 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8005cba:	6839      	ldr	r1, [r7, #0]
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f001 f938 	bl	8006f32 <USBD_CtlError>
            ret = USBD_FAIL;
 8005cc2:	2302      	movs	r3, #2
 8005cc4:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005cc6:	e006      	b.n	8005cd6 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8005cc8:	6839      	ldr	r1, [r7, #0]
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f001 f931 	bl	8006f32 <USBD_CtlError>
          ret = USBD_FAIL;
 8005cd0:	2302      	movs	r3, #2
 8005cd2:	75fb      	strb	r3, [r7, #23]
          break;
 8005cd4:	e000      	b.n	8005cd8 <USBD_CDC_Setup+0x126>
          break;
 8005cd6:	bf00      	nop
      }
      break;
 8005cd8:	e006      	b.n	8005ce8 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8005cda:	6839      	ldr	r1, [r7, #0]
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f001 f928 	bl	8006f32 <USBD_CtlError>
      ret = USBD_FAIL;
 8005ce2:	2302      	movs	r3, #2
 8005ce4:	75fb      	strb	r3, [r7, #23]
      break;
 8005ce6:	bf00      	nop
  }

  return ret;
 8005ce8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3718      	adds	r7, #24
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b084      	sub	sp, #16
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d04:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d0c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d037      	beq.n	8005d88 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005d18:	78fa      	ldrb	r2, [r7, #3]
 8005d1a:	6879      	ldr	r1, [r7, #4]
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	4413      	add	r3, r2
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	440b      	add	r3, r1
 8005d26:	331c      	adds	r3, #28
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d026      	beq.n	8005d7c <USBD_CDC_DataIn+0x8a>
 8005d2e:	78fa      	ldrb	r2, [r7, #3]
 8005d30:	6879      	ldr	r1, [r7, #4]
 8005d32:	4613      	mov	r3, r2
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	4413      	add	r3, r2
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	440b      	add	r3, r1
 8005d3c:	331c      	adds	r3, #28
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	78fa      	ldrb	r2, [r7, #3]
 8005d42:	68b9      	ldr	r1, [r7, #8]
 8005d44:	0152      	lsls	r2, r2, #5
 8005d46:	440a      	add	r2, r1
 8005d48:	3238      	adds	r2, #56	; 0x38
 8005d4a:	6812      	ldr	r2, [r2, #0]
 8005d4c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d50:	fb02 f201 	mul.w	r2, r2, r1
 8005d54:	1a9b      	subs	r3, r3, r2
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d110      	bne.n	8005d7c <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005d5a:	78fa      	ldrb	r2, [r7, #3]
 8005d5c:	6879      	ldr	r1, [r7, #4]
 8005d5e:	4613      	mov	r3, r2
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	4413      	add	r3, r2
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	440b      	add	r3, r1
 8005d68:	331c      	adds	r3, #28
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005d6e:	78f9      	ldrb	r1, [r7, #3]
 8005d70:	2300      	movs	r3, #0
 8005d72:	2200      	movs	r2, #0
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f005 fae0 	bl	800b33a <USBD_LL_Transmit>
 8005d7a:	e003      	b.n	8005d84 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8005d84:	2300      	movs	r3, #0
 8005d86:	e000      	b.n	8005d8a <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8005d88:	2302      	movs	r3, #2
  }
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3710      	adds	r7, #16
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}

08005d92 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005d92:	b580      	push	{r7, lr}
 8005d94:	b084      	sub	sp, #16
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]
 8005d9a:	460b      	mov	r3, r1
 8005d9c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005da4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005da6:	78fb      	ldrb	r3, [r7, #3]
 8005da8:	4619      	mov	r1, r3
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f005 fb0b 	bl	800b3c6 <USBD_LL_GetRxDataSize>
 8005db0:	4602      	mov	r2, r0
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d00d      	beq.n	8005dde <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005dd6:	4611      	mov	r1, r2
 8005dd8:	4798      	blx	r3

    return USBD_OK;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	e000      	b.n	8005de0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005dde:	2302      	movs	r3, #2
  }
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3710      	adds	r7, #16
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005df6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d015      	beq.n	8005e2e <USBD_CDC_EP0_RxReady+0x46>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005e08:	2bff      	cmp	r3, #255	; 0xff
 8005e0a:	d010      	beq.n	8005e2e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005e1a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005e22:	b292      	uxth	r2, r2
 8005e24:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	22ff      	movs	r2, #255	; 0xff
 8005e2a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8005e2e:	2300      	movs	r3, #0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3710      	adds	r7, #16
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2243      	movs	r2, #67	; 0x43
 8005e44:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005e46:	4b03      	ldr	r3, [pc, #12]	; (8005e54 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	370c      	adds	r7, #12
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr
 8005e54:	20000090 	.word	0x20000090

08005e58 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2243      	movs	r2, #67	; 0x43
 8005e64:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005e66:	4b03      	ldr	r3, [pc, #12]	; (8005e74 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	370c      	adds	r7, #12
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr
 8005e74:	2000004c 	.word	0x2000004c

08005e78 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2243      	movs	r2, #67	; 0x43
 8005e84:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005e86:	4b03      	ldr	r3, [pc, #12]	; (8005e94 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	370c      	adds	r7, #12
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr
 8005e94:	200000d4 	.word	0x200000d4

08005e98 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	220a      	movs	r2, #10
 8005ea4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005ea6:	4b03      	ldr	r3, [pc, #12]	; (8005eb4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr
 8005eb4:	20000008 	.word	0x20000008

08005eb8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b085      	sub	sp, #20
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005ec2:	2302      	movs	r3, #2
 8005ec4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d005      	beq.n	8005ed8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	683a      	ldr	r2, [r7, #0]
 8005ed0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3714      	adds	r7, #20
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr

08005ee6 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005ee6:	b480      	push	{r7}
 8005ee8:	b087      	sub	sp, #28
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	60f8      	str	r0, [r7, #12]
 8005eee:	60b9      	str	r1, [r7, #8]
 8005ef0:	4613      	mov	r3, r2
 8005ef2:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005efa:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	68ba      	ldr	r2, [r7, #8]
 8005f00:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005f04:	88fa      	ldrh	r2, [r7, #6]
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	371c      	adds	r7, #28
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr

08005f1a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	b085      	sub	sp, #20
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
 8005f22:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f2a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	683a      	ldr	r2, [r7, #0]
 8005f30:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3714      	adds	r7, #20
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr

08005f42 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005f42:	b580      	push	{r7, lr}
 8005f44:	b084      	sub	sp, #16
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f50:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d017      	beq.n	8005f8c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	7c1b      	ldrb	r3, [r3, #16]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d109      	bne.n	8005f78 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f6e:	2101      	movs	r1, #1
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f005 fa05 	bl	800b380 <USBD_LL_PrepareReceive>
 8005f76:	e007      	b.n	8005f88 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f7e:	2340      	movs	r3, #64	; 0x40
 8005f80:	2101      	movs	r1, #1
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f005 f9fc 	bl	800b380 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	e000      	b.n	8005f8e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005f8c:	2302      	movs	r3, #2
  }
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3710      	adds	r7, #16
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005f96:	b580      	push	{r7, lr}
 8005f98:	b084      	sub	sp, #16
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	60f8      	str	r0, [r7, #12]
 8005f9e:	60b9      	str	r1, [r7, #8]
 8005fa0:	4613      	mov	r3, r2
 8005fa2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d101      	bne.n	8005fae <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005faa:	2302      	movs	r3, #2
 8005fac:	e01a      	b.n	8005fe4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d003      	beq.n	8005fc0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d003      	beq.n	8005fce <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	68ba      	ldr	r2, [r7, #8]
 8005fca:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	79fa      	ldrb	r2, [r7, #7]
 8005fda:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005fdc:	68f8      	ldr	r0, [r7, #12]
 8005fde:	f005 f869 	bl	800b0b4 <USBD_LL_Init>

  return USBD_OK;
 8005fe2:	2300      	movs	r3, #0
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3710      	adds	r7, #16
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b085      	sub	sp, #20
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d006      	beq.n	800600e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	683a      	ldr	r2, [r7, #0]
 8006004:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006008:	2300      	movs	r3, #0
 800600a:	73fb      	strb	r3, [r7, #15]
 800600c:	e001      	b.n	8006012 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800600e:	2302      	movs	r3, #2
 8006010:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006012:	7bfb      	ldrb	r3, [r7, #15]
}
 8006014:	4618      	mov	r0, r3
 8006016:	3714      	adds	r7, #20
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b082      	sub	sp, #8
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f005 f8a3 	bl	800b174 <USBD_LL_Start>

  return USBD_OK;
 800602e:	2300      	movs	r3, #0
}
 8006030:	4618      	mov	r0, r3
 8006032:	3708      	adds	r7, #8
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006040:	2300      	movs	r3, #0
}
 8006042:	4618      	mov	r0, r3
 8006044:	370c      	adds	r7, #12
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr

0800604e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800604e:	b580      	push	{r7, lr}
 8006050:	b084      	sub	sp, #16
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
 8006056:	460b      	mov	r3, r1
 8006058:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800605a:	2302      	movs	r3, #2
 800605c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006064:	2b00      	cmp	r3, #0
 8006066:	d00c      	beq.n	8006082 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	78fa      	ldrb	r2, [r7, #3]
 8006072:	4611      	mov	r1, r2
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	4798      	blx	r3
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d101      	bne.n	8006082 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800607e:	2300      	movs	r3, #0
 8006080:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006082:	7bfb      	ldrb	r3, [r7, #15]
}
 8006084:	4618      	mov	r0, r3
 8006086:	3710      	adds	r7, #16
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	460b      	mov	r3, r1
 8006096:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	78fa      	ldrb	r2, [r7, #3]
 80060a2:	4611      	mov	r1, r2
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	4798      	blx	r3

  return USBD_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3708      	adds	r7, #8
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}

080060b2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80060b2:	b580      	push	{r7, lr}
 80060b4:	b082      	sub	sp, #8
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
 80060ba:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80060c2:	6839      	ldr	r1, [r7, #0]
 80060c4:	4618      	mov	r0, r3
 80060c6:	f000 fef7 	bl	8006eb8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2201      	movs	r2, #1
 80060ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80060d8:	461a      	mov	r2, r3
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80060e6:	f003 031f 	and.w	r3, r3, #31
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d00c      	beq.n	8006108 <USBD_LL_SetupStage+0x56>
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d302      	bcc.n	80060f8 <USBD_LL_SetupStage+0x46>
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d010      	beq.n	8006118 <USBD_LL_SetupStage+0x66>
 80060f6:	e017      	b.n	8006128 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80060fe:	4619      	mov	r1, r3
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 f9cd 	bl	80064a0 <USBD_StdDevReq>
      break;
 8006106:	e01a      	b.n	800613e <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800610e:	4619      	mov	r1, r3
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 fa2f 	bl	8006574 <USBD_StdItfReq>
      break;
 8006116:	e012      	b.n	800613e <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800611e:	4619      	mov	r1, r3
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 fa6d 	bl	8006600 <USBD_StdEPReq>
      break;
 8006126:	e00a      	b.n	800613e <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800612e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006132:	b2db      	uxtb	r3, r3
 8006134:	4619      	mov	r1, r3
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f005 f87c 	bl	800b234 <USBD_LL_StallEP>
      break;
 800613c:	bf00      	nop
  }

  return USBD_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	3708      	adds	r7, #8
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b086      	sub	sp, #24
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	460b      	mov	r3, r1
 8006152:	607a      	str	r2, [r7, #4]
 8006154:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006156:	7afb      	ldrb	r3, [r7, #11]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d14b      	bne.n	80061f4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006162:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800616a:	2b03      	cmp	r3, #3
 800616c:	d134      	bne.n	80061d8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	68da      	ldr	r2, [r3, #12]
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	429a      	cmp	r2, r3
 8006178:	d919      	bls.n	80061ae <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	68da      	ldr	r2, [r3, #12]
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	1ad2      	subs	r2, r2, r3
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	68da      	ldr	r2, [r3, #12]
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006190:	429a      	cmp	r2, r3
 8006192:	d203      	bcs.n	800619c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006198:	b29b      	uxth	r3, r3
 800619a:	e002      	b.n	80061a2 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	461a      	mov	r2, r3
 80061a4:	6879      	ldr	r1, [r7, #4]
 80061a6:	68f8      	ldr	r0, [r7, #12]
 80061a8:	f000 ff7a 	bl	80070a0 <USBD_CtlContinueRx>
 80061ac:	e038      	b.n	8006220 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d00a      	beq.n	80061d0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80061c0:	2b03      	cmp	r3, #3
 80061c2:	d105      	bne.n	80061d0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	68f8      	ldr	r0, [r7, #12]
 80061ce:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80061d0:	68f8      	ldr	r0, [r7, #12]
 80061d2:	f000 ff77 	bl	80070c4 <USBD_CtlSendStatus>
 80061d6:	e023      	b.n	8006220 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80061de:	2b05      	cmp	r3, #5
 80061e0:	d11e      	bne.n	8006220 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80061ea:	2100      	movs	r1, #0
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f005 f821 	bl	800b234 <USBD_LL_StallEP>
 80061f2:	e015      	b.n	8006220 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061fa:	699b      	ldr	r3, [r3, #24]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00d      	beq.n	800621c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006206:	2b03      	cmp	r3, #3
 8006208:	d108      	bne.n	800621c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006210:	699b      	ldr	r3, [r3, #24]
 8006212:	7afa      	ldrb	r2, [r7, #11]
 8006214:	4611      	mov	r1, r2
 8006216:	68f8      	ldr	r0, [r7, #12]
 8006218:	4798      	blx	r3
 800621a:	e001      	b.n	8006220 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800621c:	2302      	movs	r3, #2
 800621e:	e000      	b.n	8006222 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	3718      	adds	r7, #24
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800622a:	b580      	push	{r7, lr}
 800622c:	b086      	sub	sp, #24
 800622e:	af00      	add	r7, sp, #0
 8006230:	60f8      	str	r0, [r7, #12]
 8006232:	460b      	mov	r3, r1
 8006234:	607a      	str	r2, [r7, #4]
 8006236:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006238:	7afb      	ldrb	r3, [r7, #11]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d17f      	bne.n	800633e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	3314      	adds	r3, #20
 8006242:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800624a:	2b02      	cmp	r3, #2
 800624c:	d15c      	bne.n	8006308 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	68da      	ldr	r2, [r3, #12]
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	429a      	cmp	r2, r3
 8006258:	d915      	bls.n	8006286 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	68da      	ldr	r2, [r3, #12]
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	1ad2      	subs	r2, r2, r3
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	b29b      	uxth	r3, r3
 800626e:	461a      	mov	r2, r3
 8006270:	6879      	ldr	r1, [r7, #4]
 8006272:	68f8      	ldr	r0, [r7, #12]
 8006274:	f000 fee4 	bl	8007040 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006278:	2300      	movs	r3, #0
 800627a:	2200      	movs	r2, #0
 800627c:	2100      	movs	r1, #0
 800627e:	68f8      	ldr	r0, [r7, #12]
 8006280:	f005 f87e 	bl	800b380 <USBD_LL_PrepareReceive>
 8006284:	e04e      	b.n	8006324 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	697a      	ldr	r2, [r7, #20]
 800628c:	6912      	ldr	r2, [r2, #16]
 800628e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006292:	fb02 f201 	mul.w	r2, r2, r1
 8006296:	1a9b      	subs	r3, r3, r2
 8006298:	2b00      	cmp	r3, #0
 800629a:	d11c      	bne.n	80062d6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	689a      	ldr	r2, [r3, #8]
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d316      	bcc.n	80062d6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	689a      	ldr	r2, [r3, #8]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d20f      	bcs.n	80062d6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80062b6:	2200      	movs	r2, #0
 80062b8:	2100      	movs	r1, #0
 80062ba:	68f8      	ldr	r0, [r7, #12]
 80062bc:	f000 fec0 	bl	8007040 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2200      	movs	r2, #0
 80062c4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80062c8:	2300      	movs	r3, #0
 80062ca:	2200      	movs	r2, #0
 80062cc:	2100      	movs	r1, #0
 80062ce:	68f8      	ldr	r0, [r7, #12]
 80062d0:	f005 f856 	bl	800b380 <USBD_LL_PrepareReceive>
 80062d4:	e026      	b.n	8006324 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d00a      	beq.n	80062f8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80062e8:	2b03      	cmp	r3, #3
 80062ea:	d105      	bne.n	80062f8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	68f8      	ldr	r0, [r7, #12]
 80062f6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80062f8:	2180      	movs	r1, #128	; 0x80
 80062fa:	68f8      	ldr	r0, [r7, #12]
 80062fc:	f004 ff9a 	bl	800b234 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	f000 fef2 	bl	80070ea <USBD_CtlReceiveStatus>
 8006306:	e00d      	b.n	8006324 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800630e:	2b04      	cmp	r3, #4
 8006310:	d004      	beq.n	800631c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006318:	2b00      	cmp	r3, #0
 800631a:	d103      	bne.n	8006324 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800631c:	2180      	movs	r1, #128	; 0x80
 800631e:	68f8      	ldr	r0, [r7, #12]
 8006320:	f004 ff88 	bl	800b234 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800632a:	2b01      	cmp	r3, #1
 800632c:	d11d      	bne.n	800636a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800632e:	68f8      	ldr	r0, [r7, #12]
 8006330:	f7ff fe82 	bl	8006038 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2200      	movs	r2, #0
 8006338:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800633c:	e015      	b.n	800636a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006344:	695b      	ldr	r3, [r3, #20]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d00d      	beq.n	8006366 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006350:	2b03      	cmp	r3, #3
 8006352:	d108      	bne.n	8006366 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800635a:	695b      	ldr	r3, [r3, #20]
 800635c:	7afa      	ldrb	r2, [r7, #11]
 800635e:	4611      	mov	r1, r2
 8006360:	68f8      	ldr	r0, [r7, #12]
 8006362:	4798      	blx	r3
 8006364:	e001      	b.n	800636a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006366:	2302      	movs	r3, #2
 8006368:	e000      	b.n	800636c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800636a:	2300      	movs	r3, #0
}
 800636c:	4618      	mov	r0, r3
 800636e:	3718      	adds	r7, #24
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b082      	sub	sp, #8
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800637c:	2340      	movs	r3, #64	; 0x40
 800637e:	2200      	movs	r2, #0
 8006380:	2100      	movs	r1, #0
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f004 ff11 	bl	800b1aa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2240      	movs	r2, #64	; 0x40
 8006394:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006398:	2340      	movs	r3, #64	; 0x40
 800639a:	2200      	movs	r2, #0
 800639c:	2180      	movs	r1, #128	; 0x80
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f004 ff03 	bl	800b1aa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2240      	movs	r2, #64	; 0x40
 80063ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d009      	beq.n	80063ec <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	6852      	ldr	r2, [r2, #4]
 80063e4:	b2d2      	uxtb	r2, r2
 80063e6:	4611      	mov	r1, r2
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	4798      	blx	r3
  }

  return USBD_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3708      	adds	r7, #8
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80063f6:	b480      	push	{r7}
 80063f8:	b083      	sub	sp, #12
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
 80063fe:	460b      	mov	r3, r1
 8006400:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	78fa      	ldrb	r2, [r7, #3]
 8006406:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	370c      	adds	r7, #12
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr

08006416 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006416:	b480      	push	{r7}
 8006418:	b083      	sub	sp, #12
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2204      	movs	r2, #4
 800642e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006432:	2300      	movs	r3, #0
}
 8006434:	4618      	mov	r0, r3
 8006436:	370c      	adds	r7, #12
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800644e:	2b04      	cmp	r3, #4
 8006450:	d105      	bne.n	800645e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800645e:	2300      	movs	r3, #0
}
 8006460:	4618      	mov	r0, r3
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800647a:	2b03      	cmp	r3, #3
 800647c:	d10b      	bne.n	8006496 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006484:	69db      	ldr	r3, [r3, #28]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d005      	beq.n	8006496 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006490:	69db      	ldr	r3, [r3, #28]
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	3708      	adds	r7, #8
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b084      	sub	sp, #16
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80064aa:	2300      	movs	r3, #0
 80064ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80064b6:	2b20      	cmp	r3, #32
 80064b8:	d004      	beq.n	80064c4 <USBD_StdDevReq+0x24>
 80064ba:	2b40      	cmp	r3, #64	; 0x40
 80064bc:	d002      	beq.n	80064c4 <USBD_StdDevReq+0x24>
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d008      	beq.n	80064d4 <USBD_StdDevReq+0x34>
 80064c2:	e04c      	b.n	800655e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	6839      	ldr	r1, [r7, #0]
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	4798      	blx	r3
      break;
 80064d2:	e049      	b.n	8006568 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	785b      	ldrb	r3, [r3, #1]
 80064d8:	2b09      	cmp	r3, #9
 80064da:	d83a      	bhi.n	8006552 <USBD_StdDevReq+0xb2>
 80064dc:	a201      	add	r2, pc, #4	; (adr r2, 80064e4 <USBD_StdDevReq+0x44>)
 80064de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e2:	bf00      	nop
 80064e4:	08006535 	.word	0x08006535
 80064e8:	08006549 	.word	0x08006549
 80064ec:	08006553 	.word	0x08006553
 80064f0:	0800653f 	.word	0x0800653f
 80064f4:	08006553 	.word	0x08006553
 80064f8:	08006517 	.word	0x08006517
 80064fc:	0800650d 	.word	0x0800650d
 8006500:	08006553 	.word	0x08006553
 8006504:	0800652b 	.word	0x0800652b
 8006508:	08006521 	.word	0x08006521
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800650c:	6839      	ldr	r1, [r7, #0]
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 f9d4 	bl	80068bc <USBD_GetDescriptor>
          break;
 8006514:	e022      	b.n	800655c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006516:	6839      	ldr	r1, [r7, #0]
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 fb61 	bl	8006be0 <USBD_SetAddress>
          break;
 800651e:	e01d      	b.n	800655c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006520:	6839      	ldr	r1, [r7, #0]
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 fb9e 	bl	8006c64 <USBD_SetConfig>
          break;
 8006528:	e018      	b.n	800655c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800652a:	6839      	ldr	r1, [r7, #0]
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 fc27 	bl	8006d80 <USBD_GetConfig>
          break;
 8006532:	e013      	b.n	800655c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006534:	6839      	ldr	r1, [r7, #0]
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 fc56 	bl	8006de8 <USBD_GetStatus>
          break;
 800653c:	e00e      	b.n	800655c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800653e:	6839      	ldr	r1, [r7, #0]
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f000 fc84 	bl	8006e4e <USBD_SetFeature>
          break;
 8006546:	e009      	b.n	800655c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006548:	6839      	ldr	r1, [r7, #0]
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 fc93 	bl	8006e76 <USBD_ClrFeature>
          break;
 8006550:	e004      	b.n	800655c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006552:	6839      	ldr	r1, [r7, #0]
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 fcec 	bl	8006f32 <USBD_CtlError>
          break;
 800655a:	bf00      	nop
      }
      break;
 800655c:	e004      	b.n	8006568 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800655e:	6839      	ldr	r1, [r7, #0]
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 fce6 	bl	8006f32 <USBD_CtlError>
      break;
 8006566:	bf00      	nop
  }

  return ret;
 8006568:	7bfb      	ldrb	r3, [r7, #15]
}
 800656a:	4618      	mov	r0, r3
 800656c:	3710      	adds	r7, #16
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop

08006574 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800657e:	2300      	movs	r3, #0
 8006580:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800658a:	2b20      	cmp	r3, #32
 800658c:	d003      	beq.n	8006596 <USBD_StdItfReq+0x22>
 800658e:	2b40      	cmp	r3, #64	; 0x40
 8006590:	d001      	beq.n	8006596 <USBD_StdItfReq+0x22>
 8006592:	2b00      	cmp	r3, #0
 8006594:	d12a      	bne.n	80065ec <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800659c:	3b01      	subs	r3, #1
 800659e:	2b02      	cmp	r3, #2
 80065a0:	d81d      	bhi.n	80065de <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	889b      	ldrh	r3, [r3, #4]
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d813      	bhi.n	80065d4 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	6839      	ldr	r1, [r7, #0]
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	4798      	blx	r3
 80065ba:	4603      	mov	r3, r0
 80065bc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	88db      	ldrh	r3, [r3, #6]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d110      	bne.n	80065e8 <USBD_StdItfReq+0x74>
 80065c6:	7bfb      	ldrb	r3, [r7, #15]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d10d      	bne.n	80065e8 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 fd79 	bl	80070c4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80065d2:	e009      	b.n	80065e8 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80065d4:	6839      	ldr	r1, [r7, #0]
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 fcab 	bl	8006f32 <USBD_CtlError>
          break;
 80065dc:	e004      	b.n	80065e8 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80065de:	6839      	ldr	r1, [r7, #0]
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f000 fca6 	bl	8006f32 <USBD_CtlError>
          break;
 80065e6:	e000      	b.n	80065ea <USBD_StdItfReq+0x76>
          break;
 80065e8:	bf00      	nop
      }
      break;
 80065ea:	e004      	b.n	80065f6 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80065ec:	6839      	ldr	r1, [r7, #0]
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 fc9f 	bl	8006f32 <USBD_CtlError>
      break;
 80065f4:	bf00      	nop
  }

  return USBD_OK;
 80065f6:	2300      	movs	r3, #0
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3710      	adds	r7, #16
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800660a:	2300      	movs	r3, #0
 800660c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	889b      	ldrh	r3, [r3, #4]
 8006612:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800661c:	2b20      	cmp	r3, #32
 800661e:	d004      	beq.n	800662a <USBD_StdEPReq+0x2a>
 8006620:	2b40      	cmp	r3, #64	; 0x40
 8006622:	d002      	beq.n	800662a <USBD_StdEPReq+0x2a>
 8006624:	2b00      	cmp	r3, #0
 8006626:	d008      	beq.n	800663a <USBD_StdEPReq+0x3a>
 8006628:	e13d      	b.n	80068a6 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	6839      	ldr	r1, [r7, #0]
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	4798      	blx	r3
      break;
 8006638:	e13a      	b.n	80068b0 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006642:	2b20      	cmp	r3, #32
 8006644:	d10a      	bne.n	800665c <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	6839      	ldr	r1, [r7, #0]
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	4798      	blx	r3
 8006654:	4603      	mov	r3, r0
 8006656:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006658:	7bfb      	ldrb	r3, [r7, #15]
 800665a:	e12a      	b.n	80068b2 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	785b      	ldrb	r3, [r3, #1]
 8006660:	2b01      	cmp	r3, #1
 8006662:	d03e      	beq.n	80066e2 <USBD_StdEPReq+0xe2>
 8006664:	2b03      	cmp	r3, #3
 8006666:	d002      	beq.n	800666e <USBD_StdEPReq+0x6e>
 8006668:	2b00      	cmp	r3, #0
 800666a:	d070      	beq.n	800674e <USBD_StdEPReq+0x14e>
 800666c:	e115      	b.n	800689a <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006674:	2b02      	cmp	r3, #2
 8006676:	d002      	beq.n	800667e <USBD_StdEPReq+0x7e>
 8006678:	2b03      	cmp	r3, #3
 800667a:	d015      	beq.n	80066a8 <USBD_StdEPReq+0xa8>
 800667c:	e02b      	b.n	80066d6 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800667e:	7bbb      	ldrb	r3, [r7, #14]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d00c      	beq.n	800669e <USBD_StdEPReq+0x9e>
 8006684:	7bbb      	ldrb	r3, [r7, #14]
 8006686:	2b80      	cmp	r3, #128	; 0x80
 8006688:	d009      	beq.n	800669e <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800668a:	7bbb      	ldrb	r3, [r7, #14]
 800668c:	4619      	mov	r1, r3
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f004 fdd0 	bl	800b234 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006694:	2180      	movs	r1, #128	; 0x80
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f004 fdcc 	bl	800b234 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800669c:	e020      	b.n	80066e0 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800669e:	6839      	ldr	r1, [r7, #0]
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 fc46 	bl	8006f32 <USBD_CtlError>
              break;
 80066a6:	e01b      	b.n	80066e0 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	885b      	ldrh	r3, [r3, #2]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d10e      	bne.n	80066ce <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 80066b0:	7bbb      	ldrb	r3, [r7, #14]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00b      	beq.n	80066ce <USBD_StdEPReq+0xce>
 80066b6:	7bbb      	ldrb	r3, [r7, #14]
 80066b8:	2b80      	cmp	r3, #128	; 0x80
 80066ba:	d008      	beq.n	80066ce <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	88db      	ldrh	r3, [r3, #6]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d104      	bne.n	80066ce <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80066c4:	7bbb      	ldrb	r3, [r7, #14]
 80066c6:	4619      	mov	r1, r3
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f004 fdb3 	bl	800b234 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 fcf8 	bl	80070c4 <USBD_CtlSendStatus>

              break;
 80066d4:	e004      	b.n	80066e0 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 80066d6:	6839      	ldr	r1, [r7, #0]
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 fc2a 	bl	8006f32 <USBD_CtlError>
              break;
 80066de:	bf00      	nop
          }
          break;
 80066e0:	e0e0      	b.n	80068a4 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066e8:	2b02      	cmp	r3, #2
 80066ea:	d002      	beq.n	80066f2 <USBD_StdEPReq+0xf2>
 80066ec:	2b03      	cmp	r3, #3
 80066ee:	d015      	beq.n	800671c <USBD_StdEPReq+0x11c>
 80066f0:	e026      	b.n	8006740 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80066f2:	7bbb      	ldrb	r3, [r7, #14]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d00c      	beq.n	8006712 <USBD_StdEPReq+0x112>
 80066f8:	7bbb      	ldrb	r3, [r7, #14]
 80066fa:	2b80      	cmp	r3, #128	; 0x80
 80066fc:	d009      	beq.n	8006712 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80066fe:	7bbb      	ldrb	r3, [r7, #14]
 8006700:	4619      	mov	r1, r3
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f004 fd96 	bl	800b234 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006708:	2180      	movs	r1, #128	; 0x80
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f004 fd92 	bl	800b234 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006710:	e01c      	b.n	800674c <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8006712:	6839      	ldr	r1, [r7, #0]
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f000 fc0c 	bl	8006f32 <USBD_CtlError>
              break;
 800671a:	e017      	b.n	800674c <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	885b      	ldrh	r3, [r3, #2]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d112      	bne.n	800674a <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006724:	7bbb      	ldrb	r3, [r7, #14]
 8006726:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800672a:	2b00      	cmp	r3, #0
 800672c:	d004      	beq.n	8006738 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800672e:	7bbb      	ldrb	r3, [r7, #14]
 8006730:	4619      	mov	r1, r3
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f004 fd9d 	bl	800b272 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f000 fcc3 	bl	80070c4 <USBD_CtlSendStatus>
              }
              break;
 800673e:	e004      	b.n	800674a <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8006740:	6839      	ldr	r1, [r7, #0]
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f000 fbf5 	bl	8006f32 <USBD_CtlError>
              break;
 8006748:	e000      	b.n	800674c <USBD_StdEPReq+0x14c>
              break;
 800674a:	bf00      	nop
          }
          break;
 800674c:	e0aa      	b.n	80068a4 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006754:	2b02      	cmp	r3, #2
 8006756:	d002      	beq.n	800675e <USBD_StdEPReq+0x15e>
 8006758:	2b03      	cmp	r3, #3
 800675a:	d032      	beq.n	80067c2 <USBD_StdEPReq+0x1c2>
 800675c:	e097      	b.n	800688e <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800675e:	7bbb      	ldrb	r3, [r7, #14]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d007      	beq.n	8006774 <USBD_StdEPReq+0x174>
 8006764:	7bbb      	ldrb	r3, [r7, #14]
 8006766:	2b80      	cmp	r3, #128	; 0x80
 8006768:	d004      	beq.n	8006774 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800676a:	6839      	ldr	r1, [r7, #0]
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 fbe0 	bl	8006f32 <USBD_CtlError>
                break;
 8006772:	e091      	b.n	8006898 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006774:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006778:	2b00      	cmp	r3, #0
 800677a:	da0b      	bge.n	8006794 <USBD_StdEPReq+0x194>
 800677c:	7bbb      	ldrb	r3, [r7, #14]
 800677e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006782:	4613      	mov	r3, r2
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	4413      	add	r3, r2
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	3310      	adds	r3, #16
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	4413      	add	r3, r2
 8006790:	3304      	adds	r3, #4
 8006792:	e00b      	b.n	80067ac <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006794:	7bbb      	ldrb	r3, [r7, #14]
 8006796:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800679a:	4613      	mov	r3, r2
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	4413      	add	r3, r2
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	4413      	add	r3, r2
 80067aa:	3304      	adds	r3, #4
 80067ac:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	2200      	movs	r2, #0
 80067b2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	2202      	movs	r2, #2
 80067b8:	4619      	mov	r1, r3
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 fc24 	bl	8007008 <USBD_CtlSendData>
              break;
 80067c0:	e06a      	b.n	8006898 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80067c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	da11      	bge.n	80067ee <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80067ca:	7bbb      	ldrb	r3, [r7, #14]
 80067cc:	f003 020f 	and.w	r2, r3, #15
 80067d0:	6879      	ldr	r1, [r7, #4]
 80067d2:	4613      	mov	r3, r2
 80067d4:	009b      	lsls	r3, r3, #2
 80067d6:	4413      	add	r3, r2
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	440b      	add	r3, r1
 80067dc:	3318      	adds	r3, #24
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d117      	bne.n	8006814 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80067e4:	6839      	ldr	r1, [r7, #0]
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 fba3 	bl	8006f32 <USBD_CtlError>
                  break;
 80067ec:	e054      	b.n	8006898 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80067ee:	7bbb      	ldrb	r3, [r7, #14]
 80067f0:	f003 020f 	and.w	r2, r3, #15
 80067f4:	6879      	ldr	r1, [r7, #4]
 80067f6:	4613      	mov	r3, r2
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	4413      	add	r3, r2
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	440b      	add	r3, r1
 8006800:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d104      	bne.n	8006814 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800680a:	6839      	ldr	r1, [r7, #0]
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 fb90 	bl	8006f32 <USBD_CtlError>
                  break;
 8006812:	e041      	b.n	8006898 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006814:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006818:	2b00      	cmp	r3, #0
 800681a:	da0b      	bge.n	8006834 <USBD_StdEPReq+0x234>
 800681c:	7bbb      	ldrb	r3, [r7, #14]
 800681e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006822:	4613      	mov	r3, r2
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	4413      	add	r3, r2
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	3310      	adds	r3, #16
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	4413      	add	r3, r2
 8006830:	3304      	adds	r3, #4
 8006832:	e00b      	b.n	800684c <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006834:	7bbb      	ldrb	r3, [r7, #14]
 8006836:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800683a:	4613      	mov	r3, r2
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	4413      	add	r3, r2
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	4413      	add	r3, r2
 800684a:	3304      	adds	r3, #4
 800684c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800684e:	7bbb      	ldrb	r3, [r7, #14]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d002      	beq.n	800685a <USBD_StdEPReq+0x25a>
 8006854:	7bbb      	ldrb	r3, [r7, #14]
 8006856:	2b80      	cmp	r3, #128	; 0x80
 8006858:	d103      	bne.n	8006862 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	2200      	movs	r2, #0
 800685e:	601a      	str	r2, [r3, #0]
 8006860:	e00e      	b.n	8006880 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006862:	7bbb      	ldrb	r3, [r7, #14]
 8006864:	4619      	mov	r1, r3
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f004 fd22 	bl	800b2b0 <USBD_LL_IsStallEP>
 800686c:	4603      	mov	r3, r0
 800686e:	2b00      	cmp	r3, #0
 8006870:	d003      	beq.n	800687a <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	2201      	movs	r2, #1
 8006876:	601a      	str	r2, [r3, #0]
 8006878:	e002      	b.n	8006880 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	2200      	movs	r2, #0
 800687e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	2202      	movs	r2, #2
 8006884:	4619      	mov	r1, r3
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 fbbe 	bl	8007008 <USBD_CtlSendData>
              break;
 800688c:	e004      	b.n	8006898 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800688e:	6839      	ldr	r1, [r7, #0]
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 fb4e 	bl	8006f32 <USBD_CtlError>
              break;
 8006896:	bf00      	nop
          }
          break;
 8006898:	e004      	b.n	80068a4 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800689a:	6839      	ldr	r1, [r7, #0]
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 fb48 	bl	8006f32 <USBD_CtlError>
          break;
 80068a2:	bf00      	nop
      }
      break;
 80068a4:	e004      	b.n	80068b0 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 80068a6:	6839      	ldr	r1, [r7, #0]
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 fb42 	bl	8006f32 <USBD_CtlError>
      break;
 80068ae:	bf00      	nop
  }

  return ret;
 80068b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3710      	adds	r7, #16
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
	...

080068bc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80068c6:	2300      	movs	r3, #0
 80068c8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80068ca:	2300      	movs	r3, #0
 80068cc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80068ce:	2300      	movs	r3, #0
 80068d0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	885b      	ldrh	r3, [r3, #2]
 80068d6:	0a1b      	lsrs	r3, r3, #8
 80068d8:	b29b      	uxth	r3, r3
 80068da:	3b01      	subs	r3, #1
 80068dc:	2b0e      	cmp	r3, #14
 80068de:	f200 8152 	bhi.w	8006b86 <USBD_GetDescriptor+0x2ca>
 80068e2:	a201      	add	r2, pc, #4	; (adr r2, 80068e8 <USBD_GetDescriptor+0x2c>)
 80068e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e8:	08006959 	.word	0x08006959
 80068ec:	08006971 	.word	0x08006971
 80068f0:	080069b1 	.word	0x080069b1
 80068f4:	08006b87 	.word	0x08006b87
 80068f8:	08006b87 	.word	0x08006b87
 80068fc:	08006b27 	.word	0x08006b27
 8006900:	08006b53 	.word	0x08006b53
 8006904:	08006b87 	.word	0x08006b87
 8006908:	08006b87 	.word	0x08006b87
 800690c:	08006b87 	.word	0x08006b87
 8006910:	08006b87 	.word	0x08006b87
 8006914:	08006b87 	.word	0x08006b87
 8006918:	08006b87 	.word	0x08006b87
 800691c:	08006b87 	.word	0x08006b87
 8006920:	08006925 	.word	0x08006925
  {
#if (USBD_LPM_ENABLED == 1U)
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800692a:	69db      	ldr	r3, [r3, #28]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d00b      	beq.n	8006948 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006936:	69db      	ldr	r3, [r3, #28]
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	7c12      	ldrb	r2, [r2, #16]
 800693c:	f107 0108 	add.w	r1, r7, #8
 8006940:	4610      	mov	r0, r2
 8006942:	4798      	blx	r3
 8006944:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006946:	e126      	b.n	8006b96 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006948:	6839      	ldr	r1, [r7, #0]
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 faf1 	bl	8006f32 <USBD_CtlError>
        err++;
 8006950:	7afb      	ldrb	r3, [r7, #11]
 8006952:	3301      	adds	r3, #1
 8006954:	72fb      	strb	r3, [r7, #11]
      break;
 8006956:	e11e      	b.n	8006b96 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	7c12      	ldrb	r2, [r2, #16]
 8006964:	f107 0108 	add.w	r1, r7, #8
 8006968:	4610      	mov	r0, r2
 800696a:	4798      	blx	r3
 800696c:	60f8      	str	r0, [r7, #12]
      break;
 800696e:	e112      	b.n	8006b96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	7c1b      	ldrb	r3, [r3, #16]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d10d      	bne.n	8006994 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800697e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006980:	f107 0208 	add.w	r2, r7, #8
 8006984:	4610      	mov	r0, r2
 8006986:	4798      	blx	r3
 8006988:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	3301      	adds	r3, #1
 800698e:	2202      	movs	r2, #2
 8006990:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006992:	e100      	b.n	8006b96 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800699a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800699c:	f107 0208 	add.w	r2, r7, #8
 80069a0:	4610      	mov	r0, r2
 80069a2:	4798      	blx	r3
 80069a4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	3301      	adds	r3, #1
 80069aa:	2202      	movs	r2, #2
 80069ac:	701a      	strb	r2, [r3, #0]
      break;
 80069ae:	e0f2      	b.n	8006b96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	885b      	ldrh	r3, [r3, #2]
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	2b05      	cmp	r3, #5
 80069b8:	f200 80ac 	bhi.w	8006b14 <USBD_GetDescriptor+0x258>
 80069bc:	a201      	add	r2, pc, #4	; (adr r2, 80069c4 <USBD_GetDescriptor+0x108>)
 80069be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069c2:	bf00      	nop
 80069c4:	080069dd 	.word	0x080069dd
 80069c8:	08006a11 	.word	0x08006a11
 80069cc:	08006a45 	.word	0x08006a45
 80069d0:	08006a79 	.word	0x08006a79
 80069d4:	08006aad 	.word	0x08006aad
 80069d8:	08006ae1 	.word	0x08006ae1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d00b      	beq.n	8006a00 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	7c12      	ldrb	r2, [r2, #16]
 80069f4:	f107 0108 	add.w	r1, r7, #8
 80069f8:	4610      	mov	r0, r2
 80069fa:	4798      	blx	r3
 80069fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069fe:	e091      	b.n	8006b24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006a00:	6839      	ldr	r1, [r7, #0]
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 fa95 	bl	8006f32 <USBD_CtlError>
            err++;
 8006a08:	7afb      	ldrb	r3, [r7, #11]
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	72fb      	strb	r3, [r7, #11]
          break;
 8006a0e:	e089      	b.n	8006b24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d00b      	beq.n	8006a34 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	7c12      	ldrb	r2, [r2, #16]
 8006a28:	f107 0108 	add.w	r1, r7, #8
 8006a2c:	4610      	mov	r0, r2
 8006a2e:	4798      	blx	r3
 8006a30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a32:	e077      	b.n	8006b24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006a34:	6839      	ldr	r1, [r7, #0]
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 fa7b 	bl	8006f32 <USBD_CtlError>
            err++;
 8006a3c:	7afb      	ldrb	r3, [r7, #11]
 8006a3e:	3301      	adds	r3, #1
 8006a40:	72fb      	strb	r3, [r7, #11]
          break;
 8006a42:	e06f      	b.n	8006b24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d00b      	beq.n	8006a68 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	7c12      	ldrb	r2, [r2, #16]
 8006a5c:	f107 0108 	add.w	r1, r7, #8
 8006a60:	4610      	mov	r0, r2
 8006a62:	4798      	blx	r3
 8006a64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a66:	e05d      	b.n	8006b24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006a68:	6839      	ldr	r1, [r7, #0]
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 fa61 	bl	8006f32 <USBD_CtlError>
            err++;
 8006a70:	7afb      	ldrb	r3, [r7, #11]
 8006a72:	3301      	adds	r3, #1
 8006a74:	72fb      	strb	r3, [r7, #11]
          break;
 8006a76:	e055      	b.n	8006b24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a7e:	691b      	ldr	r3, [r3, #16]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d00b      	beq.n	8006a9c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a8a:	691b      	ldr	r3, [r3, #16]
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	7c12      	ldrb	r2, [r2, #16]
 8006a90:	f107 0108 	add.w	r1, r7, #8
 8006a94:	4610      	mov	r0, r2
 8006a96:	4798      	blx	r3
 8006a98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a9a:	e043      	b.n	8006b24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006a9c:	6839      	ldr	r1, [r7, #0]
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 fa47 	bl	8006f32 <USBD_CtlError>
            err++;
 8006aa4:	7afb      	ldrb	r3, [r7, #11]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	72fb      	strb	r3, [r7, #11]
          break;
 8006aaa:	e03b      	b.n	8006b24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006ab2:	695b      	ldr	r3, [r3, #20]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d00b      	beq.n	8006ad0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006abe:	695b      	ldr	r3, [r3, #20]
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	7c12      	ldrb	r2, [r2, #16]
 8006ac4:	f107 0108 	add.w	r1, r7, #8
 8006ac8:	4610      	mov	r0, r2
 8006aca:	4798      	blx	r3
 8006acc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ace:	e029      	b.n	8006b24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006ad0:	6839      	ldr	r1, [r7, #0]
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 fa2d 	bl	8006f32 <USBD_CtlError>
            err++;
 8006ad8:	7afb      	ldrb	r3, [r7, #11]
 8006ada:	3301      	adds	r3, #1
 8006adc:	72fb      	strb	r3, [r7, #11]
          break;
 8006ade:	e021      	b.n	8006b24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006ae6:	699b      	ldr	r3, [r3, #24]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d00b      	beq.n	8006b04 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006af2:	699b      	ldr	r3, [r3, #24]
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	7c12      	ldrb	r2, [r2, #16]
 8006af8:	f107 0108 	add.w	r1, r7, #8
 8006afc:	4610      	mov	r0, r2
 8006afe:	4798      	blx	r3
 8006b00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b02:	e00f      	b.n	8006b24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006b04:	6839      	ldr	r1, [r7, #0]
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 fa13 	bl	8006f32 <USBD_CtlError>
            err++;
 8006b0c:	7afb      	ldrb	r3, [r7, #11]
 8006b0e:	3301      	adds	r3, #1
 8006b10:	72fb      	strb	r3, [r7, #11]
          break;
 8006b12:	e007      	b.n	8006b24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006b14:	6839      	ldr	r1, [r7, #0]
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f000 fa0b 	bl	8006f32 <USBD_CtlError>
          err++;
 8006b1c:	7afb      	ldrb	r3, [r7, #11]
 8006b1e:	3301      	adds	r3, #1
 8006b20:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006b22:	e038      	b.n	8006b96 <USBD_GetDescriptor+0x2da>
 8006b24:	e037      	b.n	8006b96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	7c1b      	ldrb	r3, [r3, #16]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d109      	bne.n	8006b42 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b36:	f107 0208 	add.w	r2, r7, #8
 8006b3a:	4610      	mov	r0, r2
 8006b3c:	4798      	blx	r3
 8006b3e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b40:	e029      	b.n	8006b96 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006b42:	6839      	ldr	r1, [r7, #0]
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 f9f4 	bl	8006f32 <USBD_CtlError>
        err++;
 8006b4a:	7afb      	ldrb	r3, [r7, #11]
 8006b4c:	3301      	adds	r3, #1
 8006b4e:	72fb      	strb	r3, [r7, #11]
      break;
 8006b50:	e021      	b.n	8006b96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	7c1b      	ldrb	r3, [r3, #16]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d10d      	bne.n	8006b76 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b62:	f107 0208 	add.w	r2, r7, #8
 8006b66:	4610      	mov	r0, r2
 8006b68:	4798      	blx	r3
 8006b6a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	3301      	adds	r3, #1
 8006b70:	2207      	movs	r2, #7
 8006b72:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b74:	e00f      	b.n	8006b96 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006b76:	6839      	ldr	r1, [r7, #0]
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 f9da 	bl	8006f32 <USBD_CtlError>
        err++;
 8006b7e:	7afb      	ldrb	r3, [r7, #11]
 8006b80:	3301      	adds	r3, #1
 8006b82:	72fb      	strb	r3, [r7, #11]
      break;
 8006b84:	e007      	b.n	8006b96 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8006b86:	6839      	ldr	r1, [r7, #0]
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 f9d2 	bl	8006f32 <USBD_CtlError>
      err++;
 8006b8e:	7afb      	ldrb	r3, [r7, #11]
 8006b90:	3301      	adds	r3, #1
 8006b92:	72fb      	strb	r3, [r7, #11]
      break;
 8006b94:	bf00      	nop
  }

  if (err != 0U)
 8006b96:	7afb      	ldrb	r3, [r7, #11]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d11c      	bne.n	8006bd6 <USBD_GetDescriptor+0x31a>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006b9c:	893b      	ldrh	r3, [r7, #8]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d011      	beq.n	8006bc6 <USBD_GetDescriptor+0x30a>
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	88db      	ldrh	r3, [r3, #6]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d00d      	beq.n	8006bc6 <USBD_GetDescriptor+0x30a>
    {
      len = MIN(len, req->wLength);
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	88da      	ldrh	r2, [r3, #6]
 8006bae:	893b      	ldrh	r3, [r7, #8]
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	bf28      	it	cs
 8006bb4:	4613      	movcs	r3, r2
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006bba:	893b      	ldrh	r3, [r7, #8]
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	68f9      	ldr	r1, [r7, #12]
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 fa21 	bl	8007008 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	88db      	ldrh	r3, [r3, #6]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d104      	bne.n	8006bd8 <USBD_GetDescriptor+0x31c>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 fa78 	bl	80070c4 <USBD_CtlSendStatus>
 8006bd4:	e000      	b.n	8006bd8 <USBD_GetDescriptor+0x31c>
    return;
 8006bd6:	bf00      	nop
    }
  }
}
 8006bd8:	3710      	adds	r7, #16
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	bf00      	nop

08006be0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b084      	sub	sp, #16
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	889b      	ldrh	r3, [r3, #4]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d130      	bne.n	8006c54 <USBD_SetAddress+0x74>
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	88db      	ldrh	r3, [r3, #6]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d12c      	bne.n	8006c54 <USBD_SetAddress+0x74>
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	885b      	ldrh	r3, [r3, #2]
 8006bfe:	2b7f      	cmp	r3, #127	; 0x7f
 8006c00:	d828      	bhi.n	8006c54 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	885b      	ldrh	r3, [r3, #2]
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c0c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c14:	2b03      	cmp	r3, #3
 8006c16:	d104      	bne.n	8006c22 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006c18:	6839      	ldr	r1, [r7, #0]
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 f989 	bl	8006f32 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c20:	e01c      	b.n	8006c5c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	7bfa      	ldrb	r2, [r7, #15]
 8006c26:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006c2a:	7bfb      	ldrb	r3, [r7, #15]
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f004 fb64 	bl	800b2fc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 fa45 	bl	80070c4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006c3a:	7bfb      	ldrb	r3, [r7, #15]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d004      	beq.n	8006c4a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2202      	movs	r2, #2
 8006c44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c48:	e008      	b.n	8006c5c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c52:	e003      	b.n	8006c5c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006c54:	6839      	ldr	r1, [r7, #0]
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 f96b 	bl	8006f32 <USBD_CtlError>
  }
}
 8006c5c:	bf00      	nop
 8006c5e:	3710      	adds	r7, #16
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b082      	sub	sp, #8
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	885b      	ldrh	r3, [r3, #2]
 8006c72:	b2da      	uxtb	r2, r3
 8006c74:	4b41      	ldr	r3, [pc, #260]	; (8006d7c <USBD_SetConfig+0x118>)
 8006c76:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006c78:	4b40      	ldr	r3, [pc, #256]	; (8006d7c <USBD_SetConfig+0x118>)
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d904      	bls.n	8006c8a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006c80:	6839      	ldr	r1, [r7, #0]
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 f955 	bl	8006f32 <USBD_CtlError>
 8006c88:	e075      	b.n	8006d76 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c90:	2b02      	cmp	r3, #2
 8006c92:	d002      	beq.n	8006c9a <USBD_SetConfig+0x36>
 8006c94:	2b03      	cmp	r3, #3
 8006c96:	d023      	beq.n	8006ce0 <USBD_SetConfig+0x7c>
 8006c98:	e062      	b.n	8006d60 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006c9a:	4b38      	ldr	r3, [pc, #224]	; (8006d7c <USBD_SetConfig+0x118>)
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d01a      	beq.n	8006cd8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006ca2:	4b36      	ldr	r3, [pc, #216]	; (8006d7c <USBD_SetConfig+0x118>)
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2203      	movs	r2, #3
 8006cb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006cb4:	4b31      	ldr	r3, [pc, #196]	; (8006d7c <USBD_SetConfig+0x118>)
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	4619      	mov	r1, r3
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f7ff f9c7 	bl	800604e <USBD_SetClassConfig>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2b02      	cmp	r3, #2
 8006cc4:	d104      	bne.n	8006cd0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006cc6:	6839      	ldr	r1, [r7, #0]
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 f932 	bl	8006f32 <USBD_CtlError>
            return;
 8006cce:	e052      	b.n	8006d76 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 f9f7 	bl	80070c4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006cd6:	e04e      	b.n	8006d76 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 f9f3 	bl	80070c4 <USBD_CtlSendStatus>
        break;
 8006cde:	e04a      	b.n	8006d76 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006ce0:	4b26      	ldr	r3, [pc, #152]	; (8006d7c <USBD_SetConfig+0x118>)
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d112      	bne.n	8006d0e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2202      	movs	r2, #2
 8006cec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006cf0:	4b22      	ldr	r3, [pc, #136]	; (8006d7c <USBD_SetConfig+0x118>)
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006cfa:	4b20      	ldr	r3, [pc, #128]	; (8006d7c <USBD_SetConfig+0x118>)
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	4619      	mov	r1, r3
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f7ff f9c3 	bl	800608c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 f9dc 	bl	80070c4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006d0c:	e033      	b.n	8006d76 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006d0e:	4b1b      	ldr	r3, [pc, #108]	; (8006d7c <USBD_SetConfig+0x118>)
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	461a      	mov	r2, r3
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d01d      	beq.n	8006d58 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	4619      	mov	r1, r3
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f7ff f9b1 	bl	800608c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006d2a:	4b14      	ldr	r3, [pc, #80]	; (8006d7c <USBD_SetConfig+0x118>)
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	461a      	mov	r2, r3
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006d34:	4b11      	ldr	r3, [pc, #68]	; (8006d7c <USBD_SetConfig+0x118>)
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	4619      	mov	r1, r3
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f7ff f987 	bl	800604e <USBD_SetClassConfig>
 8006d40:	4603      	mov	r3, r0
 8006d42:	2b02      	cmp	r3, #2
 8006d44:	d104      	bne.n	8006d50 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006d46:	6839      	ldr	r1, [r7, #0]
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 f8f2 	bl	8006f32 <USBD_CtlError>
            return;
 8006d4e:	e012      	b.n	8006d76 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 f9b7 	bl	80070c4 <USBD_CtlSendStatus>
        break;
 8006d56:	e00e      	b.n	8006d76 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 f9b3 	bl	80070c4 <USBD_CtlSendStatus>
        break;
 8006d5e:	e00a      	b.n	8006d76 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006d60:	6839      	ldr	r1, [r7, #0]
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 f8e5 	bl	8006f32 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006d68:	4b04      	ldr	r3, [pc, #16]	; (8006d7c <USBD_SetConfig+0x118>)
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	4619      	mov	r1, r3
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f7ff f98c 	bl	800608c <USBD_ClrClassConfig>
        break;
 8006d74:	bf00      	nop
    }
  }
}
 8006d76:	3708      	adds	r7, #8
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}
 8006d7c:	200001b4 	.word	0x200001b4

08006d80 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b082      	sub	sp, #8
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	88db      	ldrh	r3, [r3, #6]
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d004      	beq.n	8006d9c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006d92:	6839      	ldr	r1, [r7, #0]
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 f8cc 	bl	8006f32 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006d9a:	e021      	b.n	8006de0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	db17      	blt.n	8006dd6 <USBD_GetConfig+0x56>
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	dd02      	ble.n	8006db0 <USBD_GetConfig+0x30>
 8006daa:	2b03      	cmp	r3, #3
 8006dac:	d00b      	beq.n	8006dc6 <USBD_GetConfig+0x46>
 8006dae:	e012      	b.n	8006dd6 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	3308      	adds	r3, #8
 8006dba:	2201      	movs	r2, #1
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 f922 	bl	8007008 <USBD_CtlSendData>
        break;
 8006dc4:	e00c      	b.n	8006de0 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	3304      	adds	r3, #4
 8006dca:	2201      	movs	r2, #1
 8006dcc:	4619      	mov	r1, r3
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 f91a 	bl	8007008 <USBD_CtlSendData>
        break;
 8006dd4:	e004      	b.n	8006de0 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8006dd6:	6839      	ldr	r1, [r7, #0]
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 f8aa 	bl	8006f32 <USBD_CtlError>
        break;
 8006dde:	bf00      	nop
}
 8006de0:	bf00      	nop
 8006de2:	3708      	adds	r7, #8
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b082      	sub	sp, #8
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006df8:	3b01      	subs	r3, #1
 8006dfa:	2b02      	cmp	r3, #2
 8006dfc:	d81e      	bhi.n	8006e3c <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	88db      	ldrh	r3, [r3, #6]
 8006e02:	2b02      	cmp	r3, #2
 8006e04:	d004      	beq.n	8006e10 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006e06:	6839      	ldr	r1, [r7, #0]
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 f892 	bl	8006f32 <USBD_CtlError>
        break;
 8006e0e:	e01a      	b.n	8006e46 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2201      	movs	r2, #1
 8006e14:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d005      	beq.n	8006e2c <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	f043 0202 	orr.w	r2, r3, #2
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	330c      	adds	r3, #12
 8006e30:	2202      	movs	r2, #2
 8006e32:	4619      	mov	r1, r3
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 f8e7 	bl	8007008 <USBD_CtlSendData>
      break;
 8006e3a:	e004      	b.n	8006e46 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006e3c:	6839      	ldr	r1, [r7, #0]
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 f877 	bl	8006f32 <USBD_CtlError>
      break;
 8006e44:	bf00      	nop
  }
}
 8006e46:	bf00      	nop
 8006e48:	3708      	adds	r7, #8
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}

08006e4e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006e4e:	b580      	push	{r7, lr}
 8006e50:	b082      	sub	sp, #8
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
 8006e56:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	885b      	ldrh	r3, [r3, #2]
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d106      	bne.n	8006e6e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2201      	movs	r2, #1
 8006e64:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f000 f92b 	bl	80070c4 <USBD_CtlSendStatus>
  }
}
 8006e6e:	bf00      	nop
 8006e70:	3708      	adds	r7, #8
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}

08006e76 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006e76:	b580      	push	{r7, lr}
 8006e78:	b082      	sub	sp, #8
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
 8006e7e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e86:	3b01      	subs	r3, #1
 8006e88:	2b02      	cmp	r3, #2
 8006e8a:	d80b      	bhi.n	8006ea4 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	885b      	ldrh	r3, [r3, #2]
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d10c      	bne.n	8006eae <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f000 f911 	bl	80070c4 <USBD_CtlSendStatus>
      }
      break;
 8006ea2:	e004      	b.n	8006eae <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006ea4:	6839      	ldr	r1, [r7, #0]
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 f843 	bl	8006f32 <USBD_CtlError>
      break;
 8006eac:	e000      	b.n	8006eb0 <USBD_ClrFeature+0x3a>
      break;
 8006eae:	bf00      	nop
  }
}
 8006eb0:	bf00      	nop
 8006eb2:	3708      	adds	r7, #8
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	781a      	ldrb	r2, [r3, #0]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	785a      	ldrb	r2, [r3, #1]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	3302      	adds	r3, #2
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	b29a      	uxth	r2, r3
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	3303      	adds	r3, #3
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	021b      	lsls	r3, r3, #8
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	4413      	add	r3, r2
 8006ee8:	b29a      	uxth	r2, r3
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	3304      	adds	r3, #4
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	b29a      	uxth	r2, r3
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	3305      	adds	r3, #5
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	021b      	lsls	r3, r3, #8
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	4413      	add	r3, r2
 8006f04:	b29a      	uxth	r2, r3
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	3306      	adds	r3, #6
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	b29a      	uxth	r2, r3
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	3307      	adds	r3, #7
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	021b      	lsls	r3, r3, #8
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	4413      	add	r3, r2
 8006f20:	b29a      	uxth	r2, r3
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	80da      	strh	r2, [r3, #6]

}
 8006f26:	bf00      	nop
 8006f28:	370c      	adds	r7, #12
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr

08006f32 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006f32:	b580      	push	{r7, lr}
 8006f34:	b082      	sub	sp, #8
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
 8006f3a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006f3c:	2180      	movs	r1, #128	; 0x80
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f004 f978 	bl	800b234 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006f44:	2100      	movs	r1, #0
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f004 f974 	bl	800b234 <USBD_LL_StallEP>
}
 8006f4c:	bf00      	nop
 8006f4e:	3708      	adds	r7, #8
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b086      	sub	sp, #24
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	60b9      	str	r1, [r7, #8]
 8006f5e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006f60:	2300      	movs	r3, #0
 8006f62:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d032      	beq.n	8006fd0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006f6a:	68f8      	ldr	r0, [r7, #12]
 8006f6c:	f000 f834 	bl	8006fd8 <USBD_GetLen>
 8006f70:	4603      	mov	r3, r0
 8006f72:	3301      	adds	r3, #1
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	005b      	lsls	r3, r3, #1
 8006f78:	b29a      	uxth	r2, r3
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006f7e:	7dfb      	ldrb	r3, [r7, #23]
 8006f80:	1c5a      	adds	r2, r3, #1
 8006f82:	75fa      	strb	r2, [r7, #23]
 8006f84:	461a      	mov	r2, r3
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	4413      	add	r3, r2
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	7812      	ldrb	r2, [r2, #0]
 8006f8e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006f90:	7dfb      	ldrb	r3, [r7, #23]
 8006f92:	1c5a      	adds	r2, r3, #1
 8006f94:	75fa      	strb	r2, [r7, #23]
 8006f96:	461a      	mov	r2, r3
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	4413      	add	r3, r2
 8006f9c:	2203      	movs	r2, #3
 8006f9e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006fa0:	e012      	b.n	8006fc8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	1c5a      	adds	r2, r3, #1
 8006fa6:	60fa      	str	r2, [r7, #12]
 8006fa8:	7dfa      	ldrb	r2, [r7, #23]
 8006faa:	1c51      	adds	r1, r2, #1
 8006fac:	75f9      	strb	r1, [r7, #23]
 8006fae:	4611      	mov	r1, r2
 8006fb0:	68ba      	ldr	r2, [r7, #8]
 8006fb2:	440a      	add	r2, r1
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006fb8:	7dfb      	ldrb	r3, [r7, #23]
 8006fba:	1c5a      	adds	r2, r3, #1
 8006fbc:	75fa      	strb	r2, [r7, #23]
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	4413      	add	r3, r2
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d1e8      	bne.n	8006fa2 <USBD_GetString+0x4e>
    }
  }
}
 8006fd0:	bf00      	nop
 8006fd2:	3718      	adds	r7, #24
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b085      	sub	sp, #20
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006fe4:	e005      	b.n	8006ff2 <USBD_GetLen+0x1a>
  {
    len++;
 8006fe6:	7bfb      	ldrb	r3, [r7, #15]
 8006fe8:	3301      	adds	r3, #1
 8006fea:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	3301      	adds	r3, #1
 8006ff0:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d1f5      	bne.n	8006fe6 <USBD_GetLen+0xe>
  }

  return len;
 8006ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3714      	adds	r7, #20
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr

08007008 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b084      	sub	sp, #16
 800700c:	af00      	add	r7, sp, #0
 800700e:	60f8      	str	r0, [r7, #12]
 8007010:	60b9      	str	r1, [r7, #8]
 8007012:	4613      	mov	r3, r2
 8007014:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2202      	movs	r2, #2
 800701a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800701e:	88fa      	ldrh	r2, [r7, #6]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007024:	88fa      	ldrh	r2, [r7, #6]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800702a:	88fb      	ldrh	r3, [r7, #6]
 800702c:	68ba      	ldr	r2, [r7, #8]
 800702e:	2100      	movs	r1, #0
 8007030:	68f8      	ldr	r0, [r7, #12]
 8007032:	f004 f982 	bl	800b33a <USBD_LL_Transmit>

  return USBD_OK;
 8007036:	2300      	movs	r3, #0
}
 8007038:	4618      	mov	r0, r3
 800703a:	3710      	adds	r7, #16
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}

08007040 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	60f8      	str	r0, [r7, #12]
 8007048:	60b9      	str	r1, [r7, #8]
 800704a:	4613      	mov	r3, r2
 800704c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800704e:	88fb      	ldrh	r3, [r7, #6]
 8007050:	68ba      	ldr	r2, [r7, #8]
 8007052:	2100      	movs	r1, #0
 8007054:	68f8      	ldr	r0, [r7, #12]
 8007056:	f004 f970 	bl	800b33a <USBD_LL_Transmit>

  return USBD_OK;
 800705a:	2300      	movs	r3, #0
}
 800705c:	4618      	mov	r0, r3
 800705e:	3710      	adds	r7, #16
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b084      	sub	sp, #16
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	4613      	mov	r3, r2
 8007070:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2203      	movs	r2, #3
 8007076:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800707a:	88fa      	ldrh	r2, [r7, #6]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007082:	88fa      	ldrh	r2, [r7, #6]
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800708a:	88fb      	ldrh	r3, [r7, #6]
 800708c:	68ba      	ldr	r2, [r7, #8]
 800708e:	2100      	movs	r1, #0
 8007090:	68f8      	ldr	r0, [r7, #12]
 8007092:	f004 f975 	bl	800b380 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007096:	2300      	movs	r3, #0
}
 8007098:	4618      	mov	r0, r3
 800709a:	3710      	adds	r7, #16
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	4613      	mov	r3, r2
 80070ac:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80070ae:	88fb      	ldrh	r3, [r7, #6]
 80070b0:	68ba      	ldr	r2, [r7, #8]
 80070b2:	2100      	movs	r1, #0
 80070b4:	68f8      	ldr	r0, [r7, #12]
 80070b6:	f004 f963 	bl	800b380 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80070ba:	2300      	movs	r3, #0
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3710      	adds	r7, #16
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b082      	sub	sp, #8
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2204      	movs	r2, #4
 80070d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80070d4:	2300      	movs	r3, #0
 80070d6:	2200      	movs	r2, #0
 80070d8:	2100      	movs	r1, #0
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f004 f92d 	bl	800b33a <USBD_LL_Transmit>

  return USBD_OK;
 80070e0:	2300      	movs	r3, #0
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3708      	adds	r7, #8
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}

080070ea <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80070ea:	b580      	push	{r7, lr}
 80070ec:	b082      	sub	sp, #8
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2205      	movs	r2, #5
 80070f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80070fa:	2300      	movs	r3, #0
 80070fc:	2200      	movs	r2, #0
 80070fe:	2100      	movs	r1, #0
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f004 f93d 	bl	800b380 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007106:	2300      	movs	r3, #0
}
 8007108:	4618      	mov	r0, r3
 800710a:	3708      	adds	r7, #8
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007110:	b480      	push	{r7}
 8007112:	b087      	sub	sp, #28
 8007114:	af00      	add	r7, sp, #0
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	60b9      	str	r1, [r7, #8]
 800711a:	4613      	mov	r3, r2
 800711c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800711e:	2301      	movs	r3, #1
 8007120:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007122:	2300      	movs	r3, #0
 8007124:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007126:	4b1f      	ldr	r3, [pc, #124]	; (80071a4 <FATFS_LinkDriverEx+0x94>)
 8007128:	7a5b      	ldrb	r3, [r3, #9]
 800712a:	b2db      	uxtb	r3, r3
 800712c:	2b00      	cmp	r3, #0
 800712e:	d131      	bne.n	8007194 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007130:	4b1c      	ldr	r3, [pc, #112]	; (80071a4 <FATFS_LinkDriverEx+0x94>)
 8007132:	7a5b      	ldrb	r3, [r3, #9]
 8007134:	b2db      	uxtb	r3, r3
 8007136:	461a      	mov	r2, r3
 8007138:	4b1a      	ldr	r3, [pc, #104]	; (80071a4 <FATFS_LinkDriverEx+0x94>)
 800713a:	2100      	movs	r1, #0
 800713c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800713e:	4b19      	ldr	r3, [pc, #100]	; (80071a4 <FATFS_LinkDriverEx+0x94>)
 8007140:	7a5b      	ldrb	r3, [r3, #9]
 8007142:	b2db      	uxtb	r3, r3
 8007144:	4a17      	ldr	r2, [pc, #92]	; (80071a4 <FATFS_LinkDriverEx+0x94>)
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	4413      	add	r3, r2
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800714e:	4b15      	ldr	r3, [pc, #84]	; (80071a4 <FATFS_LinkDriverEx+0x94>)
 8007150:	7a5b      	ldrb	r3, [r3, #9]
 8007152:	b2db      	uxtb	r3, r3
 8007154:	461a      	mov	r2, r3
 8007156:	4b13      	ldr	r3, [pc, #76]	; (80071a4 <FATFS_LinkDriverEx+0x94>)
 8007158:	4413      	add	r3, r2
 800715a:	79fa      	ldrb	r2, [r7, #7]
 800715c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800715e:	4b11      	ldr	r3, [pc, #68]	; (80071a4 <FATFS_LinkDriverEx+0x94>)
 8007160:	7a5b      	ldrb	r3, [r3, #9]
 8007162:	b2db      	uxtb	r3, r3
 8007164:	1c5a      	adds	r2, r3, #1
 8007166:	b2d1      	uxtb	r1, r2
 8007168:	4a0e      	ldr	r2, [pc, #56]	; (80071a4 <FATFS_LinkDriverEx+0x94>)
 800716a:	7251      	strb	r1, [r2, #9]
 800716c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800716e:	7dbb      	ldrb	r3, [r7, #22]
 8007170:	3330      	adds	r3, #48	; 0x30
 8007172:	b2da      	uxtb	r2, r3
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	3301      	adds	r3, #1
 800717c:	223a      	movs	r2, #58	; 0x3a
 800717e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	3302      	adds	r3, #2
 8007184:	222f      	movs	r2, #47	; 0x2f
 8007186:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	3303      	adds	r3, #3
 800718c:	2200      	movs	r2, #0
 800718e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007190:	2300      	movs	r3, #0
 8007192:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007194:	7dfb      	ldrb	r3, [r7, #23]
}
 8007196:	4618      	mov	r0, r3
 8007198:	371c      	adds	r7, #28
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr
 80071a2:	bf00      	nop
 80071a4:	200001b8 	.word	0x200001b8

080071a8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b082      	sub	sp, #8
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80071b2:	2200      	movs	r2, #0
 80071b4:	6839      	ldr	r1, [r7, #0]
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f7ff ffaa 	bl	8007110 <FATFS_LinkDriverEx>
 80071bc:	4603      	mov	r3, r0
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3708      	adds	r7, #8
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
	...

080071c8 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80071c8:	b480      	push	{r7}
 80071ca:	b085      	sub	sp, #20
 80071cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071ce:	f3ef 8305 	mrs	r3, IPSR
 80071d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80071d4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d10f      	bne.n	80071fa <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071da:	f3ef 8310 	mrs	r3, PRIMASK
 80071de:	607b      	str	r3, [r7, #4]
  return(result);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d109      	bne.n	80071fa <osKernelInitialize+0x32>
 80071e6:	4b11      	ldr	r3, [pc, #68]	; (800722c <osKernelInitialize+0x64>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	2b02      	cmp	r3, #2
 80071ec:	d109      	bne.n	8007202 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80071ee:	f3ef 8311 	mrs	r3, BASEPRI
 80071f2:	603b      	str	r3, [r7, #0]
  return(result);
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d003      	beq.n	8007202 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80071fa:	f06f 0305 	mvn.w	r3, #5
 80071fe:	60fb      	str	r3, [r7, #12]
 8007200:	e00c      	b.n	800721c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007202:	4b0a      	ldr	r3, [pc, #40]	; (800722c <osKernelInitialize+0x64>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d105      	bne.n	8007216 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800720a:	4b08      	ldr	r3, [pc, #32]	; (800722c <osKernelInitialize+0x64>)
 800720c:	2201      	movs	r2, #1
 800720e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007210:	2300      	movs	r3, #0
 8007212:	60fb      	str	r3, [r7, #12]
 8007214:	e002      	b.n	800721c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007216:	f04f 33ff 	mov.w	r3, #4294967295
 800721a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800721c:	68fb      	ldr	r3, [r7, #12]
}
 800721e:	4618      	mov	r0, r3
 8007220:	3714      	adds	r7, #20
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr
 800722a:	bf00      	nop
 800722c:	200001c4 	.word	0x200001c4

08007230 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007236:	f3ef 8305 	mrs	r3, IPSR
 800723a:	60bb      	str	r3, [r7, #8]
  return(result);
 800723c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800723e:	2b00      	cmp	r3, #0
 8007240:	d10f      	bne.n	8007262 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007242:	f3ef 8310 	mrs	r3, PRIMASK
 8007246:	607b      	str	r3, [r7, #4]
  return(result);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d109      	bne.n	8007262 <osKernelStart+0x32>
 800724e:	4b11      	ldr	r3, [pc, #68]	; (8007294 <osKernelStart+0x64>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	2b02      	cmp	r3, #2
 8007254:	d109      	bne.n	800726a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007256:	f3ef 8311 	mrs	r3, BASEPRI
 800725a:	603b      	str	r3, [r7, #0]
  return(result);
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d003      	beq.n	800726a <osKernelStart+0x3a>
    stat = osErrorISR;
 8007262:	f06f 0305 	mvn.w	r3, #5
 8007266:	60fb      	str	r3, [r7, #12]
 8007268:	e00e      	b.n	8007288 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800726a:	4b0a      	ldr	r3, [pc, #40]	; (8007294 <osKernelStart+0x64>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2b01      	cmp	r3, #1
 8007270:	d107      	bne.n	8007282 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8007272:	4b08      	ldr	r3, [pc, #32]	; (8007294 <osKernelStart+0x64>)
 8007274:	2202      	movs	r2, #2
 8007276:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8007278:	f001 f86a 	bl	8008350 <vTaskStartScheduler>
      stat = osOK;
 800727c:	2300      	movs	r3, #0
 800727e:	60fb      	str	r3, [r7, #12]
 8007280:	e002      	b.n	8007288 <osKernelStart+0x58>
    } else {
      stat = osError;
 8007282:	f04f 33ff 	mov.w	r3, #4294967295
 8007286:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007288:	68fb      	ldr	r3, [r7, #12]
}
 800728a:	4618      	mov	r0, r3
 800728c:	3710      	adds	r7, #16
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
 8007292:	bf00      	nop
 8007294:	200001c4 	.word	0x200001c4

08007298 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007298:	b580      	push	{r7, lr}
 800729a:	b092      	sub	sp, #72	; 0x48
 800729c:	af04      	add	r7, sp, #16
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	60b9      	str	r1, [r7, #8]
 80072a2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80072a4:	2300      	movs	r3, #0
 80072a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072a8:	f3ef 8305 	mrs	r3, IPSR
 80072ac:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80072ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	f040 8094 	bne.w	80073de <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072b6:	f3ef 8310 	mrs	r3, PRIMASK
 80072ba:	623b      	str	r3, [r7, #32]
  return(result);
 80072bc:	6a3b      	ldr	r3, [r7, #32]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	f040 808d 	bne.w	80073de <osThreadNew+0x146>
 80072c4:	4b48      	ldr	r3, [pc, #288]	; (80073e8 <osThreadNew+0x150>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	2b02      	cmp	r3, #2
 80072ca:	d106      	bne.n	80072da <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80072cc:	f3ef 8311 	mrs	r3, BASEPRI
 80072d0:	61fb      	str	r3, [r7, #28]
  return(result);
 80072d2:	69fb      	ldr	r3, [r7, #28]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	f040 8082 	bne.w	80073de <osThreadNew+0x146>
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d07e      	beq.n	80073de <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80072e0:	2380      	movs	r3, #128	; 0x80
 80072e2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80072e4:	2318      	movs	r3, #24
 80072e6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80072e8:	2300      	movs	r3, #0
 80072ea:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80072ec:	f107 031b 	add.w	r3, r7, #27
 80072f0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80072f2:	f04f 33ff 	mov.w	r3, #4294967295
 80072f6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d045      	beq.n	800738a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d002      	beq.n	800730c <osThreadNew+0x74>
        name = attr->name;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	699b      	ldr	r3, [r3, #24]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d002      	beq.n	800731a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	699b      	ldr	r3, [r3, #24]
 8007318:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800731a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800731c:	2b00      	cmp	r3, #0
 800731e:	d008      	beq.n	8007332 <osThreadNew+0x9a>
 8007320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007322:	2b38      	cmp	r3, #56	; 0x38
 8007324:	d805      	bhi.n	8007332 <osThreadNew+0x9a>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	f003 0301 	and.w	r3, r3, #1
 800732e:	2b00      	cmp	r3, #0
 8007330:	d001      	beq.n	8007336 <osThreadNew+0x9e>
        return (NULL);
 8007332:	2300      	movs	r3, #0
 8007334:	e054      	b.n	80073e0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	695b      	ldr	r3, [r3, #20]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d003      	beq.n	8007346 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	695b      	ldr	r3, [r3, #20]
 8007342:	089b      	lsrs	r3, r3, #2
 8007344:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	689b      	ldr	r3, [r3, #8]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d00e      	beq.n	800736c <osThreadNew+0xd4>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	68db      	ldr	r3, [r3, #12]
 8007352:	2b5b      	cmp	r3, #91	; 0x5b
 8007354:	d90a      	bls.n	800736c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800735a:	2b00      	cmp	r3, #0
 800735c:	d006      	beq.n	800736c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	695b      	ldr	r3, [r3, #20]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d002      	beq.n	800736c <osThreadNew+0xd4>
        mem = 1;
 8007366:	2301      	movs	r3, #1
 8007368:	62bb      	str	r3, [r7, #40]	; 0x28
 800736a:	e010      	b.n	800738e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d10c      	bne.n	800738e <osThreadNew+0xf6>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	68db      	ldr	r3, [r3, #12]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d108      	bne.n	800738e <osThreadNew+0xf6>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	691b      	ldr	r3, [r3, #16]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d104      	bne.n	800738e <osThreadNew+0xf6>
          mem = 0;
 8007384:	2300      	movs	r3, #0
 8007386:	62bb      	str	r3, [r7, #40]	; 0x28
 8007388:	e001      	b.n	800738e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800738a:	2300      	movs	r3, #0
 800738c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800738e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007390:	2b01      	cmp	r3, #1
 8007392:	d110      	bne.n	80073b6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800739c:	9202      	str	r2, [sp, #8]
 800739e:	9301      	str	r3, [sp, #4]
 80073a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a2:	9300      	str	r3, [sp, #0]
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073a8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80073aa:	68f8      	ldr	r0, [r7, #12]
 80073ac:	f000 fe08 	bl	8007fc0 <xTaskCreateStatic>
 80073b0:	4603      	mov	r3, r0
 80073b2:	617b      	str	r3, [r7, #20]
 80073b4:	e013      	b.n	80073de <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80073b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d110      	bne.n	80073de <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80073bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073be:	b29a      	uxth	r2, r3
 80073c0:	f107 0314 	add.w	r3, r7, #20
 80073c4:	9301      	str	r3, [sp, #4]
 80073c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c8:	9300      	str	r3, [sp, #0]
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80073ce:	68f8      	ldr	r0, [r7, #12]
 80073d0:	f000 fe4f 	bl	8008072 <xTaskCreate>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d001      	beq.n	80073de <osThreadNew+0x146>
          hTask = NULL;
 80073da:	2300      	movs	r3, #0
 80073dc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80073de:	697b      	ldr	r3, [r7, #20]
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3738      	adds	r7, #56	; 0x38
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}
 80073e8:	200001c4 	.word	0x200001c4

080073ec <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b086      	sub	sp, #24
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073f4:	f3ef 8305 	mrs	r3, IPSR
 80073f8:	613b      	str	r3, [r7, #16]
  return(result);
 80073fa:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d10f      	bne.n	8007420 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007400:	f3ef 8310 	mrs	r3, PRIMASK
 8007404:	60fb      	str	r3, [r7, #12]
  return(result);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d109      	bne.n	8007420 <osDelay+0x34>
 800740c:	4b0d      	ldr	r3, [pc, #52]	; (8007444 <osDelay+0x58>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	2b02      	cmp	r3, #2
 8007412:	d109      	bne.n	8007428 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007414:	f3ef 8311 	mrs	r3, BASEPRI
 8007418:	60bb      	str	r3, [r7, #8]
  return(result);
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d003      	beq.n	8007428 <osDelay+0x3c>
    stat = osErrorISR;
 8007420:	f06f 0305 	mvn.w	r3, #5
 8007424:	617b      	str	r3, [r7, #20]
 8007426:	e007      	b.n	8007438 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007428:	2300      	movs	r3, #0
 800742a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d002      	beq.n	8007438 <osDelay+0x4c>
      vTaskDelay(ticks);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 ff58 	bl	80082e8 <vTaskDelay>
    }
  }

  return (stat);
 8007438:	697b      	ldr	r3, [r7, #20]
}
 800743a:	4618      	mov	r0, r3
 800743c:	3718      	adds	r7, #24
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}
 8007442:	bf00      	nop
 8007444:	200001c4 	.word	0x200001c4

08007448 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007448:	b480      	push	{r7}
 800744a:	b085      	sub	sp, #20
 800744c:	af00      	add	r7, sp, #0
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	60b9      	str	r1, [r7, #8]
 8007452:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	4a07      	ldr	r2, [pc, #28]	; (8007474 <vApplicationGetIdleTaskMemory+0x2c>)
 8007458:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	4a06      	ldr	r2, [pc, #24]	; (8007478 <vApplicationGetIdleTaskMemory+0x30>)
 800745e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2280      	movs	r2, #128	; 0x80
 8007464:	601a      	str	r2, [r3, #0]
}
 8007466:	bf00      	nop
 8007468:	3714      	adds	r7, #20
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr
 8007472:	bf00      	nop
 8007474:	200001c8 	.word	0x200001c8
 8007478:	20000224 	.word	0x20000224

0800747c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800747c:	b480      	push	{r7}
 800747e:	b085      	sub	sp, #20
 8007480:	af00      	add	r7, sp, #0
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	60b9      	str	r1, [r7, #8]
 8007486:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	4a07      	ldr	r2, [pc, #28]	; (80074a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800748c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	4a06      	ldr	r2, [pc, #24]	; (80074ac <vApplicationGetTimerTaskMemory+0x30>)
 8007492:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f44f 7280 	mov.w	r2, #256	; 0x100
 800749a:	601a      	str	r2, [r3, #0]
}
 800749c:	bf00      	nop
 800749e:	3714      	adds	r7, #20
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr
 80074a8:	20000424 	.word	0x20000424
 80074ac:	20000480 	.word	0x20000480

080074b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80074b0:	b480      	push	{r7}
 80074b2:	b083      	sub	sp, #12
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f103 0208 	add.w	r2, r3, #8
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f04f 32ff 	mov.w	r2, #4294967295
 80074c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f103 0208 	add.w	r2, r3, #8
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f103 0208 	add.w	r2, r3, #8
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80074e4:	bf00      	nop
 80074e6:	370c      	adds	r7, #12
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80074f0:	b480      	push	{r7}
 80074f2:	b083      	sub	sp, #12
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80074fe:	bf00      	nop
 8007500:	370c      	adds	r7, #12
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr

0800750a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800750a:	b480      	push	{r7}
 800750c:	b085      	sub	sp, #20
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
 8007512:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	68fa      	ldr	r2, [r7, #12]
 800751e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	689a      	ldr	r2, [r3, #8]
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	683a      	ldr	r2, [r7, #0]
 800752e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	683a      	ldr	r2, [r7, #0]
 8007534:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	1c5a      	adds	r2, r3, #1
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	601a      	str	r2, [r3, #0]
}
 8007546:	bf00      	nop
 8007548:	3714      	adds	r7, #20
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr

08007552 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007552:	b480      	push	{r7}
 8007554:	b085      	sub	sp, #20
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
 800755a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007568:	d103      	bne.n	8007572 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	691b      	ldr	r3, [r3, #16]
 800756e:	60fb      	str	r3, [r7, #12]
 8007570:	e00c      	b.n	800758c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	3308      	adds	r3, #8
 8007576:	60fb      	str	r3, [r7, #12]
 8007578:	e002      	b.n	8007580 <vListInsert+0x2e>
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	60fb      	str	r3, [r7, #12]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	68ba      	ldr	r2, [r7, #8]
 8007588:	429a      	cmp	r2, r3
 800758a:	d2f6      	bcs.n	800757a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	685a      	ldr	r2, [r3, #4]
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	683a      	ldr	r2, [r7, #0]
 800759a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	68fa      	ldr	r2, [r7, #12]
 80075a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	683a      	ldr	r2, [r7, #0]
 80075a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	687a      	ldr	r2, [r7, #4]
 80075ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	1c5a      	adds	r2, r3, #1
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	601a      	str	r2, [r3, #0]
}
 80075b8:	bf00      	nop
 80075ba:	3714      	adds	r7, #20
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80075c4:	b480      	push	{r7}
 80075c6:	b085      	sub	sp, #20
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	691b      	ldr	r3, [r3, #16]
 80075d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	6892      	ldr	r2, [r2, #8]
 80075da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	6852      	ldr	r2, [r2, #4]
 80075e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d103      	bne.n	80075f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	689a      	ldr	r2, [r3, #8]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	1e5a      	subs	r2, r3, #1
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
}
 800760c:	4618      	mov	r0, r3
 800760e:	3714      	adds	r7, #20
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d109      	bne.n	8007640 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800762c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007630:	f383 8811 	msr	BASEPRI, r3
 8007634:	f3bf 8f6f 	isb	sy
 8007638:	f3bf 8f4f 	dsb	sy
 800763c:	60bb      	str	r3, [r7, #8]
 800763e:	e7fe      	b.n	800763e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8007640:	f001 ffd4 	bl	80095ec <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681a      	ldr	r2, [r3, #0]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800764c:	68f9      	ldr	r1, [r7, #12]
 800764e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007650:	fb01 f303 	mul.w	r3, r1, r3
 8007654:	441a      	add	r2, r3
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2200      	movs	r2, #0
 800765e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007670:	3b01      	subs	r3, #1
 8007672:	68f9      	ldr	r1, [r7, #12]
 8007674:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007676:	fb01 f303 	mul.w	r3, r1, r3
 800767a:	441a      	add	r2, r3
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	22ff      	movs	r2, #255	; 0xff
 8007684:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	22ff      	movs	r2, #255	; 0xff
 800768c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d114      	bne.n	80076c0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	691b      	ldr	r3, [r3, #16]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d01a      	beq.n	80076d4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	3310      	adds	r3, #16
 80076a2:	4618      	mov	r0, r3
 80076a4:	f001 f8da 	bl	800885c <xTaskRemoveFromEventList>
 80076a8:	4603      	mov	r3, r0
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d012      	beq.n	80076d4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80076ae:	4b0d      	ldr	r3, [pc, #52]	; (80076e4 <xQueueGenericReset+0xcc>)
 80076b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076b4:	601a      	str	r2, [r3, #0]
 80076b6:	f3bf 8f4f 	dsb	sy
 80076ba:	f3bf 8f6f 	isb	sy
 80076be:	e009      	b.n	80076d4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	3310      	adds	r3, #16
 80076c4:	4618      	mov	r0, r3
 80076c6:	f7ff fef3 	bl	80074b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	3324      	adds	r3, #36	; 0x24
 80076ce:	4618      	mov	r0, r3
 80076d0:	f7ff feee 	bl	80074b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80076d4:	f001 ffb8 	bl	8009648 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80076d8:	2301      	movs	r3, #1
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3710      	adds	r7, #16
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	bf00      	nop
 80076e4:	e000ed04 	.word	0xe000ed04

080076e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b08e      	sub	sp, #56	; 0x38
 80076ec:	af02      	add	r7, sp, #8
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	60b9      	str	r1, [r7, #8]
 80076f2:	607a      	str	r2, [r7, #4]
 80076f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d109      	bne.n	8007710 <xQueueGenericCreateStatic+0x28>
 80076fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007700:	f383 8811 	msr	BASEPRI, r3
 8007704:	f3bf 8f6f 	isb	sy
 8007708:	f3bf 8f4f 	dsb	sy
 800770c:	62bb      	str	r3, [r7, #40]	; 0x28
 800770e:	e7fe      	b.n	800770e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d109      	bne.n	800772a <xQueueGenericCreateStatic+0x42>
 8007716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800771a:	f383 8811 	msr	BASEPRI, r3
 800771e:	f3bf 8f6f 	isb	sy
 8007722:	f3bf 8f4f 	dsb	sy
 8007726:	627b      	str	r3, [r7, #36]	; 0x24
 8007728:	e7fe      	b.n	8007728 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d002      	beq.n	8007736 <xQueueGenericCreateStatic+0x4e>
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d001      	beq.n	800773a <xQueueGenericCreateStatic+0x52>
 8007736:	2301      	movs	r3, #1
 8007738:	e000      	b.n	800773c <xQueueGenericCreateStatic+0x54>
 800773a:	2300      	movs	r3, #0
 800773c:	2b00      	cmp	r3, #0
 800773e:	d109      	bne.n	8007754 <xQueueGenericCreateStatic+0x6c>
 8007740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007744:	f383 8811 	msr	BASEPRI, r3
 8007748:	f3bf 8f6f 	isb	sy
 800774c:	f3bf 8f4f 	dsb	sy
 8007750:	623b      	str	r3, [r7, #32]
 8007752:	e7fe      	b.n	8007752 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d102      	bne.n	8007760 <xQueueGenericCreateStatic+0x78>
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d101      	bne.n	8007764 <xQueueGenericCreateStatic+0x7c>
 8007760:	2301      	movs	r3, #1
 8007762:	e000      	b.n	8007766 <xQueueGenericCreateStatic+0x7e>
 8007764:	2300      	movs	r3, #0
 8007766:	2b00      	cmp	r3, #0
 8007768:	d109      	bne.n	800777e <xQueueGenericCreateStatic+0x96>
 800776a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800776e:	f383 8811 	msr	BASEPRI, r3
 8007772:	f3bf 8f6f 	isb	sy
 8007776:	f3bf 8f4f 	dsb	sy
 800777a:	61fb      	str	r3, [r7, #28]
 800777c:	e7fe      	b.n	800777c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800777e:	2350      	movs	r3, #80	; 0x50
 8007780:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	2b50      	cmp	r3, #80	; 0x50
 8007786:	d009      	beq.n	800779c <xQueueGenericCreateStatic+0xb4>
 8007788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800778c:	f383 8811 	msr	BASEPRI, r3
 8007790:	f3bf 8f6f 	isb	sy
 8007794:	f3bf 8f4f 	dsb	sy
 8007798:	61bb      	str	r3, [r7, #24]
 800779a:	e7fe      	b.n	800779a <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80077a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d00d      	beq.n	80077c2 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80077a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a8:	2201      	movs	r2, #1
 80077aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80077ae:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80077b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077b4:	9300      	str	r3, [sp, #0]
 80077b6:	4613      	mov	r3, r2
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	68b9      	ldr	r1, [r7, #8]
 80077bc:	68f8      	ldr	r0, [r7, #12]
 80077be:	f000 f805 	bl	80077cc <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80077c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3730      	adds	r7, #48	; 0x30
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	60b9      	str	r1, [r7, #8]
 80077d6:	607a      	str	r2, [r7, #4]
 80077d8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d103      	bne.n	80077e8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	69ba      	ldr	r2, [r7, #24]
 80077e4:	601a      	str	r2, [r3, #0]
 80077e6:	e002      	b.n	80077ee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80077e8:	69bb      	ldr	r3, [r7, #24]
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	68fa      	ldr	r2, [r7, #12]
 80077f2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80077f4:	69bb      	ldr	r3, [r7, #24]
 80077f6:	68ba      	ldr	r2, [r7, #8]
 80077f8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80077fa:	2101      	movs	r1, #1
 80077fc:	69b8      	ldr	r0, [r7, #24]
 80077fe:	f7ff ff0b 	bl	8007618 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	78fa      	ldrb	r2, [r7, #3]
 8007806:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800780a:	bf00      	nop
 800780c:	3710      	adds	r7, #16
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
	...

08007814 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b08e      	sub	sp, #56	; 0x38
 8007818:	af00      	add	r7, sp, #0
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	60b9      	str	r1, [r7, #8]
 800781e:	607a      	str	r2, [r7, #4]
 8007820:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007822:	2300      	movs	r3, #0
 8007824:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800782a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782c:	2b00      	cmp	r3, #0
 800782e:	d109      	bne.n	8007844 <xQueueGenericSend+0x30>
 8007830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007834:	f383 8811 	msr	BASEPRI, r3
 8007838:	f3bf 8f6f 	isb	sy
 800783c:	f3bf 8f4f 	dsb	sy
 8007840:	62bb      	str	r3, [r7, #40]	; 0x28
 8007842:	e7fe      	b.n	8007842 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d103      	bne.n	8007852 <xQueueGenericSend+0x3e>
 800784a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800784c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800784e:	2b00      	cmp	r3, #0
 8007850:	d101      	bne.n	8007856 <xQueueGenericSend+0x42>
 8007852:	2301      	movs	r3, #1
 8007854:	e000      	b.n	8007858 <xQueueGenericSend+0x44>
 8007856:	2300      	movs	r3, #0
 8007858:	2b00      	cmp	r3, #0
 800785a:	d109      	bne.n	8007870 <xQueueGenericSend+0x5c>
 800785c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007860:	f383 8811 	msr	BASEPRI, r3
 8007864:	f3bf 8f6f 	isb	sy
 8007868:	f3bf 8f4f 	dsb	sy
 800786c:	627b      	str	r3, [r7, #36]	; 0x24
 800786e:	e7fe      	b.n	800786e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	2b02      	cmp	r3, #2
 8007874:	d103      	bne.n	800787e <xQueueGenericSend+0x6a>
 8007876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800787a:	2b01      	cmp	r3, #1
 800787c:	d101      	bne.n	8007882 <xQueueGenericSend+0x6e>
 800787e:	2301      	movs	r3, #1
 8007880:	e000      	b.n	8007884 <xQueueGenericSend+0x70>
 8007882:	2300      	movs	r3, #0
 8007884:	2b00      	cmp	r3, #0
 8007886:	d109      	bne.n	800789c <xQueueGenericSend+0x88>
 8007888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800788c:	f383 8811 	msr	BASEPRI, r3
 8007890:	f3bf 8f6f 	isb	sy
 8007894:	f3bf 8f4f 	dsb	sy
 8007898:	623b      	str	r3, [r7, #32]
 800789a:	e7fe      	b.n	800789a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800789c:	f001 f99a 	bl	8008bd4 <xTaskGetSchedulerState>
 80078a0:	4603      	mov	r3, r0
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d102      	bne.n	80078ac <xQueueGenericSend+0x98>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d101      	bne.n	80078b0 <xQueueGenericSend+0x9c>
 80078ac:	2301      	movs	r3, #1
 80078ae:	e000      	b.n	80078b2 <xQueueGenericSend+0x9e>
 80078b0:	2300      	movs	r3, #0
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d109      	bne.n	80078ca <xQueueGenericSend+0xb6>
 80078b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ba:	f383 8811 	msr	BASEPRI, r3
 80078be:	f3bf 8f6f 	isb	sy
 80078c2:	f3bf 8f4f 	dsb	sy
 80078c6:	61fb      	str	r3, [r7, #28]
 80078c8:	e7fe      	b.n	80078c8 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80078ca:	f001 fe8f 	bl	80095ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80078ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d302      	bcc.n	80078e0 <xQueueGenericSend+0xcc>
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	2b02      	cmp	r3, #2
 80078de:	d129      	bne.n	8007934 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80078e0:	683a      	ldr	r2, [r7, #0]
 80078e2:	68b9      	ldr	r1, [r7, #8]
 80078e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80078e6:	f000 f9ff 	bl	8007ce8 <prvCopyDataToQueue>
 80078ea:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d010      	beq.n	8007916 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80078f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f6:	3324      	adds	r3, #36	; 0x24
 80078f8:	4618      	mov	r0, r3
 80078fa:	f000 ffaf 	bl	800885c <xTaskRemoveFromEventList>
 80078fe:	4603      	mov	r3, r0
 8007900:	2b00      	cmp	r3, #0
 8007902:	d013      	beq.n	800792c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007904:	4b3f      	ldr	r3, [pc, #252]	; (8007a04 <xQueueGenericSend+0x1f0>)
 8007906:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800790a:	601a      	str	r2, [r3, #0]
 800790c:	f3bf 8f4f 	dsb	sy
 8007910:	f3bf 8f6f 	isb	sy
 8007914:	e00a      	b.n	800792c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007918:	2b00      	cmp	r3, #0
 800791a:	d007      	beq.n	800792c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800791c:	4b39      	ldr	r3, [pc, #228]	; (8007a04 <xQueueGenericSend+0x1f0>)
 800791e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007922:	601a      	str	r2, [r3, #0]
 8007924:	f3bf 8f4f 	dsb	sy
 8007928:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800792c:	f001 fe8c 	bl	8009648 <vPortExitCritical>
				return pdPASS;
 8007930:	2301      	movs	r3, #1
 8007932:	e063      	b.n	80079fc <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d103      	bne.n	8007942 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800793a:	f001 fe85 	bl	8009648 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800793e:	2300      	movs	r3, #0
 8007940:	e05c      	b.n	80079fc <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007944:	2b00      	cmp	r3, #0
 8007946:	d106      	bne.n	8007956 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007948:	f107 0314 	add.w	r3, r7, #20
 800794c:	4618      	mov	r0, r3
 800794e:	f000 ffe7 	bl	8008920 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007952:	2301      	movs	r3, #1
 8007954:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007956:	f001 fe77 	bl	8009648 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800795a:	f000 fd5d 	bl	8008418 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800795e:	f001 fe45 	bl	80095ec <vPortEnterCritical>
 8007962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007964:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007968:	b25b      	sxtb	r3, r3
 800796a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800796e:	d103      	bne.n	8007978 <xQueueGenericSend+0x164>
 8007970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007972:	2200      	movs	r2, #0
 8007974:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800797a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800797e:	b25b      	sxtb	r3, r3
 8007980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007984:	d103      	bne.n	800798e <xQueueGenericSend+0x17a>
 8007986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007988:	2200      	movs	r2, #0
 800798a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800798e:	f001 fe5b 	bl	8009648 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007992:	1d3a      	adds	r2, r7, #4
 8007994:	f107 0314 	add.w	r3, r7, #20
 8007998:	4611      	mov	r1, r2
 800799a:	4618      	mov	r0, r3
 800799c:	f000 ffd6 	bl	800894c <xTaskCheckForTimeOut>
 80079a0:	4603      	mov	r3, r0
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d124      	bne.n	80079f0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80079a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079a8:	f000 fa96 	bl	8007ed8 <prvIsQueueFull>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d018      	beq.n	80079e4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80079b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b4:	3310      	adds	r3, #16
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	4611      	mov	r1, r2
 80079ba:	4618      	mov	r0, r3
 80079bc:	f000 ff00 	bl	80087c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80079c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079c2:	f000 fa21 	bl	8007e08 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80079c6:	f000 fd35 	bl	8008434 <xTaskResumeAll>
 80079ca:	4603      	mov	r3, r0
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	f47f af7c 	bne.w	80078ca <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80079d2:	4b0c      	ldr	r3, [pc, #48]	; (8007a04 <xQueueGenericSend+0x1f0>)
 80079d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079d8:	601a      	str	r2, [r3, #0]
 80079da:	f3bf 8f4f 	dsb	sy
 80079de:	f3bf 8f6f 	isb	sy
 80079e2:	e772      	b.n	80078ca <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80079e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079e6:	f000 fa0f 	bl	8007e08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80079ea:	f000 fd23 	bl	8008434 <xTaskResumeAll>
 80079ee:	e76c      	b.n	80078ca <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80079f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079f2:	f000 fa09 	bl	8007e08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80079f6:	f000 fd1d 	bl	8008434 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80079fa:	2300      	movs	r3, #0
		}
	}
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3738      	adds	r7, #56	; 0x38
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}
 8007a04:	e000ed04 	.word	0xe000ed04

08007a08 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b08e      	sub	sp, #56	; 0x38
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	60b9      	str	r1, [r7, #8]
 8007a12:	607a      	str	r2, [r7, #4]
 8007a14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d109      	bne.n	8007a34 <xQueueGenericSendFromISR+0x2c>
 8007a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a24:	f383 8811 	msr	BASEPRI, r3
 8007a28:	f3bf 8f6f 	isb	sy
 8007a2c:	f3bf 8f4f 	dsb	sy
 8007a30:	627b      	str	r3, [r7, #36]	; 0x24
 8007a32:	e7fe      	b.n	8007a32 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d103      	bne.n	8007a42 <xQueueGenericSendFromISR+0x3a>
 8007a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d101      	bne.n	8007a46 <xQueueGenericSendFromISR+0x3e>
 8007a42:	2301      	movs	r3, #1
 8007a44:	e000      	b.n	8007a48 <xQueueGenericSendFromISR+0x40>
 8007a46:	2300      	movs	r3, #0
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d109      	bne.n	8007a60 <xQueueGenericSendFromISR+0x58>
 8007a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a50:	f383 8811 	msr	BASEPRI, r3
 8007a54:	f3bf 8f6f 	isb	sy
 8007a58:	f3bf 8f4f 	dsb	sy
 8007a5c:	623b      	str	r3, [r7, #32]
 8007a5e:	e7fe      	b.n	8007a5e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	2b02      	cmp	r3, #2
 8007a64:	d103      	bne.n	8007a6e <xQueueGenericSendFromISR+0x66>
 8007a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d101      	bne.n	8007a72 <xQueueGenericSendFromISR+0x6a>
 8007a6e:	2301      	movs	r3, #1
 8007a70:	e000      	b.n	8007a74 <xQueueGenericSendFromISR+0x6c>
 8007a72:	2300      	movs	r3, #0
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d109      	bne.n	8007a8c <xQueueGenericSendFromISR+0x84>
 8007a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a7c:	f383 8811 	msr	BASEPRI, r3
 8007a80:	f3bf 8f6f 	isb	sy
 8007a84:	f3bf 8f4f 	dsb	sy
 8007a88:	61fb      	str	r3, [r7, #28]
 8007a8a:	e7fe      	b.n	8007a8a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a8c:	f001 fe8a 	bl	80097a4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007a90:	f3ef 8211 	mrs	r2, BASEPRI
 8007a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a98:	f383 8811 	msr	BASEPRI, r3
 8007a9c:	f3bf 8f6f 	isb	sy
 8007aa0:	f3bf 8f4f 	dsb	sy
 8007aa4:	61ba      	str	r2, [r7, #24]
 8007aa6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007aa8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d302      	bcc.n	8007abe <xQueueGenericSendFromISR+0xb6>
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	2b02      	cmp	r3, #2
 8007abc:	d12c      	bne.n	8007b18 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ac4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007ac8:	683a      	ldr	r2, [r7, #0]
 8007aca:	68b9      	ldr	r1, [r7, #8]
 8007acc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ace:	f000 f90b 	bl	8007ce8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007ad2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ada:	d112      	bne.n	8007b02 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d016      	beq.n	8007b12 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae6:	3324      	adds	r3, #36	; 0x24
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f000 feb7 	bl	800885c <xTaskRemoveFromEventList>
 8007aee:	4603      	mov	r3, r0
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d00e      	beq.n	8007b12 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d00b      	beq.n	8007b12 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2201      	movs	r2, #1
 8007afe:	601a      	str	r2, [r3, #0]
 8007b00:	e007      	b.n	8007b12 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007b02:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007b06:	3301      	adds	r3, #1
 8007b08:	b2db      	uxtb	r3, r3
 8007b0a:	b25a      	sxtb	r2, r3
 8007b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007b12:	2301      	movs	r3, #1
 8007b14:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007b16:	e001      	b.n	8007b1c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	637b      	str	r3, [r7, #52]	; 0x34
 8007b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b1e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3738      	adds	r7, #56	; 0x38
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b08c      	sub	sp, #48	; 0x30
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	60f8      	str	r0, [r7, #12]
 8007b38:	60b9      	str	r1, [r7, #8]
 8007b3a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d109      	bne.n	8007b5e <xQueueReceive+0x2e>
	__asm volatile
 8007b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b4e:	f383 8811 	msr	BASEPRI, r3
 8007b52:	f3bf 8f6f 	isb	sy
 8007b56:	f3bf 8f4f 	dsb	sy
 8007b5a:	623b      	str	r3, [r7, #32]
 8007b5c:	e7fe      	b.n	8007b5c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d103      	bne.n	8007b6c <xQueueReceive+0x3c>
 8007b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d101      	bne.n	8007b70 <xQueueReceive+0x40>
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	e000      	b.n	8007b72 <xQueueReceive+0x42>
 8007b70:	2300      	movs	r3, #0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d109      	bne.n	8007b8a <xQueueReceive+0x5a>
 8007b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b7a:	f383 8811 	msr	BASEPRI, r3
 8007b7e:	f3bf 8f6f 	isb	sy
 8007b82:	f3bf 8f4f 	dsb	sy
 8007b86:	61fb      	str	r3, [r7, #28]
 8007b88:	e7fe      	b.n	8007b88 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b8a:	f001 f823 	bl	8008bd4 <xTaskGetSchedulerState>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d102      	bne.n	8007b9a <xQueueReceive+0x6a>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d101      	bne.n	8007b9e <xQueueReceive+0x6e>
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e000      	b.n	8007ba0 <xQueueReceive+0x70>
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d109      	bne.n	8007bb8 <xQueueReceive+0x88>
 8007ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba8:	f383 8811 	msr	BASEPRI, r3
 8007bac:	f3bf 8f6f 	isb	sy
 8007bb0:	f3bf 8f4f 	dsb	sy
 8007bb4:	61bb      	str	r3, [r7, #24]
 8007bb6:	e7fe      	b.n	8007bb6 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007bb8:	f001 fd18 	bl	80095ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d01f      	beq.n	8007c08 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007bc8:	68b9      	ldr	r1, [r7, #8]
 8007bca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bcc:	f000 f8f6 	bl	8007dbc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd2:	1e5a      	subs	r2, r3, #1
 8007bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bda:	691b      	ldr	r3, [r3, #16]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d00f      	beq.n	8007c00 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be2:	3310      	adds	r3, #16
 8007be4:	4618      	mov	r0, r3
 8007be6:	f000 fe39 	bl	800885c <xTaskRemoveFromEventList>
 8007bea:	4603      	mov	r3, r0
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d007      	beq.n	8007c00 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007bf0:	4b3c      	ldr	r3, [pc, #240]	; (8007ce4 <xQueueReceive+0x1b4>)
 8007bf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bf6:	601a      	str	r2, [r3, #0]
 8007bf8:	f3bf 8f4f 	dsb	sy
 8007bfc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007c00:	f001 fd22 	bl	8009648 <vPortExitCritical>
				return pdPASS;
 8007c04:	2301      	movs	r3, #1
 8007c06:	e069      	b.n	8007cdc <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d103      	bne.n	8007c16 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007c0e:	f001 fd1b 	bl	8009648 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007c12:	2300      	movs	r3, #0
 8007c14:	e062      	b.n	8007cdc <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d106      	bne.n	8007c2a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c1c:	f107 0310 	add.w	r3, r7, #16
 8007c20:	4618      	mov	r0, r3
 8007c22:	f000 fe7d 	bl	8008920 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c26:	2301      	movs	r3, #1
 8007c28:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c2a:	f001 fd0d 	bl	8009648 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007c2e:	f000 fbf3 	bl	8008418 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c32:	f001 fcdb 	bl	80095ec <vPortEnterCritical>
 8007c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c3c:	b25b      	sxtb	r3, r3
 8007c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c42:	d103      	bne.n	8007c4c <xQueueReceive+0x11c>
 8007c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c46:	2200      	movs	r2, #0
 8007c48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c52:	b25b      	sxtb	r3, r3
 8007c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c58:	d103      	bne.n	8007c62 <xQueueReceive+0x132>
 8007c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c62:	f001 fcf1 	bl	8009648 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c66:	1d3a      	adds	r2, r7, #4
 8007c68:	f107 0310 	add.w	r3, r7, #16
 8007c6c:	4611      	mov	r1, r2
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f000 fe6c 	bl	800894c <xTaskCheckForTimeOut>
 8007c74:	4603      	mov	r3, r0
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d123      	bne.n	8007cc2 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c7c:	f000 f916 	bl	8007eac <prvIsQueueEmpty>
 8007c80:	4603      	mov	r3, r0
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d017      	beq.n	8007cb6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c88:	3324      	adds	r3, #36	; 0x24
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	4611      	mov	r1, r2
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f000 fd96 	bl	80087c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007c94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c96:	f000 f8b7 	bl	8007e08 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007c9a:	f000 fbcb 	bl	8008434 <xTaskResumeAll>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d189      	bne.n	8007bb8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8007ca4:	4b0f      	ldr	r3, [pc, #60]	; (8007ce4 <xQueueReceive+0x1b4>)
 8007ca6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007caa:	601a      	str	r2, [r3, #0]
 8007cac:	f3bf 8f4f 	dsb	sy
 8007cb0:	f3bf 8f6f 	isb	sy
 8007cb4:	e780      	b.n	8007bb8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007cb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cb8:	f000 f8a6 	bl	8007e08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007cbc:	f000 fbba 	bl	8008434 <xTaskResumeAll>
 8007cc0:	e77a      	b.n	8007bb8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007cc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cc4:	f000 f8a0 	bl	8007e08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007cc8:	f000 fbb4 	bl	8008434 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ccc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cce:	f000 f8ed 	bl	8007eac <prvIsQueueEmpty>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	f43f af6f 	beq.w	8007bb8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007cda:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3730      	adds	r7, #48	; 0x30
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}
 8007ce4:	e000ed04 	.word	0xe000ed04

08007ce8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b086      	sub	sp, #24
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cfc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d10d      	bne.n	8007d22 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d14d      	bne.n	8007daa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	4618      	mov	r0, r3
 8007d14:	f000 ff7c 	bl	8008c10 <xTaskPriorityDisinherit>
 8007d18:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	605a      	str	r2, [r3, #4]
 8007d20:	e043      	b.n	8007daa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d119      	bne.n	8007d5c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	6898      	ldr	r0, [r3, #8]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d30:	461a      	mov	r2, r3
 8007d32:	68b9      	ldr	r1, [r7, #8]
 8007d34:	f003 fd64 	bl	800b800 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	689a      	ldr	r2, [r3, #8]
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d40:	441a      	add	r2, r3
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	689a      	ldr	r2, [r3, #8]
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d32b      	bcc.n	8007daa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681a      	ldr	r2, [r3, #0]
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	609a      	str	r2, [r3, #8]
 8007d5a:	e026      	b.n	8007daa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	68d8      	ldr	r0, [r3, #12]
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d64:	461a      	mov	r2, r3
 8007d66:	68b9      	ldr	r1, [r7, #8]
 8007d68:	f003 fd4a 	bl	800b800 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	68da      	ldr	r2, [r3, #12]
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d74:	425b      	negs	r3, r3
 8007d76:	441a      	add	r2, r3
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	68da      	ldr	r2, [r3, #12]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d207      	bcs.n	8007d98 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	685a      	ldr	r2, [r3, #4]
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d90:	425b      	negs	r3, r3
 8007d92:	441a      	add	r2, r3
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2b02      	cmp	r3, #2
 8007d9c:	d105      	bne.n	8007daa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d002      	beq.n	8007daa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	3b01      	subs	r3, #1
 8007da8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	1c5a      	adds	r2, r3, #1
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007db2:	697b      	ldr	r3, [r7, #20]
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3718      	adds	r7, #24
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b082      	sub	sp, #8
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d018      	beq.n	8007e00 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	68da      	ldr	r2, [r3, #12]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dd6:	441a      	add	r2, r3
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	68da      	ldr	r2, [r3, #12]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d303      	bcc.n	8007df0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681a      	ldr	r2, [r3, #0]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	68d9      	ldr	r1, [r3, #12]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df8:	461a      	mov	r2, r3
 8007dfa:	6838      	ldr	r0, [r7, #0]
 8007dfc:	f003 fd00 	bl	800b800 <memcpy>
	}
}
 8007e00:	bf00      	nop
 8007e02:	3708      	adds	r7, #8
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b084      	sub	sp, #16
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007e10:	f001 fbec 	bl	80095ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e1a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e1c:	e011      	b.n	8007e42 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d012      	beq.n	8007e4c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	3324      	adds	r3, #36	; 0x24
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f000 fd16 	bl	800885c <xTaskRemoveFromEventList>
 8007e30:	4603      	mov	r3, r0
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d001      	beq.n	8007e3a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007e36:	f000 fde9 	bl	8008a0c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007e3a:	7bfb      	ldrb	r3, [r7, #15]
 8007e3c:	3b01      	subs	r3, #1
 8007e3e:	b2db      	uxtb	r3, r3
 8007e40:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	dce9      	bgt.n	8007e1e <prvUnlockQueue+0x16>
 8007e4a:	e000      	b.n	8007e4e <prvUnlockQueue+0x46>
					break;
 8007e4c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	22ff      	movs	r2, #255	; 0xff
 8007e52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007e56:	f001 fbf7 	bl	8009648 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007e5a:	f001 fbc7 	bl	80095ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e64:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e66:	e011      	b.n	8007e8c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	691b      	ldr	r3, [r3, #16]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d012      	beq.n	8007e96 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	3310      	adds	r3, #16
 8007e74:	4618      	mov	r0, r3
 8007e76:	f000 fcf1 	bl	800885c <xTaskRemoveFromEventList>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d001      	beq.n	8007e84 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007e80:	f000 fdc4 	bl	8008a0c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007e84:	7bbb      	ldrb	r3, [r7, #14]
 8007e86:	3b01      	subs	r3, #1
 8007e88:	b2db      	uxtb	r3, r3
 8007e8a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	dce9      	bgt.n	8007e68 <prvUnlockQueue+0x60>
 8007e94:	e000      	b.n	8007e98 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007e96:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	22ff      	movs	r2, #255	; 0xff
 8007e9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007ea0:	f001 fbd2 	bl	8009648 <vPortExitCritical>
}
 8007ea4:	bf00      	nop
 8007ea6:	3710      	adds	r7, #16
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b084      	sub	sp, #16
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007eb4:	f001 fb9a 	bl	80095ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d102      	bne.n	8007ec6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	60fb      	str	r3, [r7, #12]
 8007ec4:	e001      	b.n	8007eca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007eca:	f001 fbbd 	bl	8009648 <vPortExitCritical>

	return xReturn;
 8007ece:	68fb      	ldr	r3, [r7, #12]
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3710      	adds	r7, #16
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b084      	sub	sp, #16
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007ee0:	f001 fb84 	bl	80095ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d102      	bne.n	8007ef6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	60fb      	str	r3, [r7, #12]
 8007ef4:	e001      	b.n	8007efa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007efa:	f001 fba5 	bl	8009648 <vPortExitCritical>

	return xReturn;
 8007efe:	68fb      	ldr	r3, [r7, #12]
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3710      	adds	r7, #16
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007f08:	b480      	push	{r7}
 8007f0a:	b085      	sub	sp, #20
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007f12:	2300      	movs	r3, #0
 8007f14:	60fb      	str	r3, [r7, #12]
 8007f16:	e014      	b.n	8007f42 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007f18:	4a0e      	ldr	r2, [pc, #56]	; (8007f54 <vQueueAddToRegistry+0x4c>)
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d10b      	bne.n	8007f3c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007f24:	490b      	ldr	r1, [pc, #44]	; (8007f54 <vQueueAddToRegistry+0x4c>)
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	683a      	ldr	r2, [r7, #0]
 8007f2a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007f2e:	4a09      	ldr	r2, [pc, #36]	; (8007f54 <vQueueAddToRegistry+0x4c>)
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	00db      	lsls	r3, r3, #3
 8007f34:	4413      	add	r3, r2
 8007f36:	687a      	ldr	r2, [r7, #4]
 8007f38:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007f3a:	e005      	b.n	8007f48 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	3301      	adds	r3, #1
 8007f40:	60fb      	str	r3, [r7, #12]
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2b07      	cmp	r3, #7
 8007f46:	d9e7      	bls.n	8007f18 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007f48:	bf00      	nop
 8007f4a:	3714      	adds	r7, #20
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr
 8007f54:	20001cfc 	.word	0x20001cfc

08007f58 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b086      	sub	sp, #24
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	60f8      	str	r0, [r7, #12]
 8007f60:	60b9      	str	r1, [r7, #8]
 8007f62:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007f68:	f001 fb40 	bl	80095ec <vPortEnterCritical>
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f72:	b25b      	sxtb	r3, r3
 8007f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f78:	d103      	bne.n	8007f82 <vQueueWaitForMessageRestricted+0x2a>
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f88:	b25b      	sxtb	r3, r3
 8007f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f8e:	d103      	bne.n	8007f98 <vQueueWaitForMessageRestricted+0x40>
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	2200      	movs	r2, #0
 8007f94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f98:	f001 fb56 	bl	8009648 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d106      	bne.n	8007fb2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	3324      	adds	r3, #36	; 0x24
 8007fa8:	687a      	ldr	r2, [r7, #4]
 8007faa:	68b9      	ldr	r1, [r7, #8]
 8007fac:	4618      	mov	r0, r3
 8007fae:	f000 fc2b 	bl	8008808 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007fb2:	6978      	ldr	r0, [r7, #20]
 8007fb4:	f7ff ff28 	bl	8007e08 <prvUnlockQueue>
	}
 8007fb8:	bf00      	nop
 8007fba:	3718      	adds	r7, #24
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b08e      	sub	sp, #56	; 0x38
 8007fc4:	af04      	add	r7, sp, #16
 8007fc6:	60f8      	str	r0, [r7, #12]
 8007fc8:	60b9      	str	r1, [r7, #8]
 8007fca:	607a      	str	r2, [r7, #4]
 8007fcc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d109      	bne.n	8007fe8 <xTaskCreateStatic+0x28>
 8007fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd8:	f383 8811 	msr	BASEPRI, r3
 8007fdc:	f3bf 8f6f 	isb	sy
 8007fe0:	f3bf 8f4f 	dsb	sy
 8007fe4:	623b      	str	r3, [r7, #32]
 8007fe6:	e7fe      	b.n	8007fe6 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8007fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d109      	bne.n	8008002 <xTaskCreateStatic+0x42>
 8007fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff2:	f383 8811 	msr	BASEPRI, r3
 8007ff6:	f3bf 8f6f 	isb	sy
 8007ffa:	f3bf 8f4f 	dsb	sy
 8007ffe:	61fb      	str	r3, [r7, #28]
 8008000:	e7fe      	b.n	8008000 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008002:	235c      	movs	r3, #92	; 0x5c
 8008004:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	2b5c      	cmp	r3, #92	; 0x5c
 800800a:	d009      	beq.n	8008020 <xTaskCreateStatic+0x60>
 800800c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008010:	f383 8811 	msr	BASEPRI, r3
 8008014:	f3bf 8f6f 	isb	sy
 8008018:	f3bf 8f4f 	dsb	sy
 800801c:	61bb      	str	r3, [r7, #24]
 800801e:	e7fe      	b.n	800801e <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008022:	2b00      	cmp	r3, #0
 8008024:	d01e      	beq.n	8008064 <xTaskCreateStatic+0xa4>
 8008026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008028:	2b00      	cmp	r3, #0
 800802a:	d01b      	beq.n	8008064 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800802c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800802e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008032:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008034:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008038:	2202      	movs	r2, #2
 800803a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800803e:	2300      	movs	r3, #0
 8008040:	9303      	str	r3, [sp, #12]
 8008042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008044:	9302      	str	r3, [sp, #8]
 8008046:	f107 0314 	add.w	r3, r7, #20
 800804a:	9301      	str	r3, [sp, #4]
 800804c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800804e:	9300      	str	r3, [sp, #0]
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	687a      	ldr	r2, [r7, #4]
 8008054:	68b9      	ldr	r1, [r7, #8]
 8008056:	68f8      	ldr	r0, [r7, #12]
 8008058:	f000 f850 	bl	80080fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800805c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800805e:	f000 f8d3 	bl	8008208 <prvAddNewTaskToReadyList>
 8008062:	e001      	b.n	8008068 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8008064:	2300      	movs	r3, #0
 8008066:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008068:	697b      	ldr	r3, [r7, #20]
	}
 800806a:	4618      	mov	r0, r3
 800806c:	3728      	adds	r7, #40	; 0x28
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}

08008072 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008072:	b580      	push	{r7, lr}
 8008074:	b08c      	sub	sp, #48	; 0x30
 8008076:	af04      	add	r7, sp, #16
 8008078:	60f8      	str	r0, [r7, #12]
 800807a:	60b9      	str	r1, [r7, #8]
 800807c:	603b      	str	r3, [r7, #0]
 800807e:	4613      	mov	r3, r2
 8008080:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008082:	88fb      	ldrh	r3, [r7, #6]
 8008084:	009b      	lsls	r3, r3, #2
 8008086:	4618      	mov	r0, r3
 8008088:	f001 fbca 	bl	8009820 <pvPortMalloc>
 800808c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d00e      	beq.n	80080b2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008094:	205c      	movs	r0, #92	; 0x5c
 8008096:	f001 fbc3 	bl	8009820 <pvPortMalloc>
 800809a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800809c:	69fb      	ldr	r3, [r7, #28]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d003      	beq.n	80080aa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80080a2:	69fb      	ldr	r3, [r7, #28]
 80080a4:	697a      	ldr	r2, [r7, #20]
 80080a6:	631a      	str	r2, [r3, #48]	; 0x30
 80080a8:	e005      	b.n	80080b6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80080aa:	6978      	ldr	r0, [r7, #20]
 80080ac:	f001 fc7a 	bl	80099a4 <vPortFree>
 80080b0:	e001      	b.n	80080b6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80080b2:	2300      	movs	r3, #0
 80080b4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80080b6:	69fb      	ldr	r3, [r7, #28]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d017      	beq.n	80080ec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80080bc:	69fb      	ldr	r3, [r7, #28]
 80080be:	2200      	movs	r2, #0
 80080c0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80080c4:	88fa      	ldrh	r2, [r7, #6]
 80080c6:	2300      	movs	r3, #0
 80080c8:	9303      	str	r3, [sp, #12]
 80080ca:	69fb      	ldr	r3, [r7, #28]
 80080cc:	9302      	str	r3, [sp, #8]
 80080ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080d0:	9301      	str	r3, [sp, #4]
 80080d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d4:	9300      	str	r3, [sp, #0]
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	68b9      	ldr	r1, [r7, #8]
 80080da:	68f8      	ldr	r0, [r7, #12]
 80080dc:	f000 f80e 	bl	80080fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80080e0:	69f8      	ldr	r0, [r7, #28]
 80080e2:	f000 f891 	bl	8008208 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80080e6:	2301      	movs	r3, #1
 80080e8:	61bb      	str	r3, [r7, #24]
 80080ea:	e002      	b.n	80080f2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80080ec:	f04f 33ff 	mov.w	r3, #4294967295
 80080f0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80080f2:	69bb      	ldr	r3, [r7, #24]
	}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3720      	adds	r7, #32
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b088      	sub	sp, #32
 8008100:	af00      	add	r7, sp, #0
 8008102:	60f8      	str	r0, [r7, #12]
 8008104:	60b9      	str	r1, [r7, #8]
 8008106:	607a      	str	r2, [r7, #4]
 8008108:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800810a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800810c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	009b      	lsls	r3, r3, #2
 8008112:	461a      	mov	r2, r3
 8008114:	21a5      	movs	r1, #165	; 0xa5
 8008116:	f003 fb7e 	bl	800b816 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800811a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800811c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008124:	3b01      	subs	r3, #1
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	4413      	add	r3, r2
 800812a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800812c:	69bb      	ldr	r3, [r7, #24]
 800812e:	f023 0307 	bic.w	r3, r3, #7
 8008132:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008134:	69bb      	ldr	r3, [r7, #24]
 8008136:	f003 0307 	and.w	r3, r3, #7
 800813a:	2b00      	cmp	r3, #0
 800813c:	d009      	beq.n	8008152 <prvInitialiseNewTask+0x56>
 800813e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008142:	f383 8811 	msr	BASEPRI, r3
 8008146:	f3bf 8f6f 	isb	sy
 800814a:	f3bf 8f4f 	dsb	sy
 800814e:	617b      	str	r3, [r7, #20]
 8008150:	e7fe      	b.n	8008150 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008152:	2300      	movs	r3, #0
 8008154:	61fb      	str	r3, [r7, #28]
 8008156:	e012      	b.n	800817e <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008158:	68ba      	ldr	r2, [r7, #8]
 800815a:	69fb      	ldr	r3, [r7, #28]
 800815c:	4413      	add	r3, r2
 800815e:	7819      	ldrb	r1, [r3, #0]
 8008160:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008162:	69fb      	ldr	r3, [r7, #28]
 8008164:	4413      	add	r3, r2
 8008166:	3334      	adds	r3, #52	; 0x34
 8008168:	460a      	mov	r2, r1
 800816a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800816c:	68ba      	ldr	r2, [r7, #8]
 800816e:	69fb      	ldr	r3, [r7, #28]
 8008170:	4413      	add	r3, r2
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d006      	beq.n	8008186 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008178:	69fb      	ldr	r3, [r7, #28]
 800817a:	3301      	adds	r3, #1
 800817c:	61fb      	str	r3, [r7, #28]
 800817e:	69fb      	ldr	r3, [r7, #28]
 8008180:	2b0f      	cmp	r3, #15
 8008182:	d9e9      	bls.n	8008158 <prvInitialiseNewTask+0x5c>
 8008184:	e000      	b.n	8008188 <prvInitialiseNewTask+0x8c>
		{
			break;
 8008186:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800818a:	2200      	movs	r2, #0
 800818c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008192:	2b37      	cmp	r3, #55	; 0x37
 8008194:	d901      	bls.n	800819a <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008196:	2337      	movs	r3, #55	; 0x37
 8008198:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800819a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800819c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800819e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80081a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081a4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80081a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a8:	2200      	movs	r2, #0
 80081aa:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80081ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ae:	3304      	adds	r3, #4
 80081b0:	4618      	mov	r0, r3
 80081b2:	f7ff f99d 	bl	80074f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80081b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b8:	3318      	adds	r3, #24
 80081ba:	4618      	mov	r0, r3
 80081bc:	f7ff f998 	bl	80074f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80081c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081c4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081c8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80081cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ce:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80081d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081d4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80081d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d8:	2200      	movs	r2, #0
 80081da:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80081dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081de:	2200      	movs	r2, #0
 80081e0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80081e4:	683a      	ldr	r2, [r7, #0]
 80081e6:	68f9      	ldr	r1, [r7, #12]
 80081e8:	69b8      	ldr	r0, [r7, #24]
 80081ea:	f001 f8db 	bl	80093a4 <pxPortInitialiseStack>
 80081ee:	4602      	mov	r2, r0
 80081f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80081f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d002      	beq.n	8008200 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80081fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081fe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008200:	bf00      	nop
 8008202:	3720      	adds	r7, #32
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b082      	sub	sp, #8
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008210:	f001 f9ec 	bl	80095ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008214:	4b2d      	ldr	r3, [pc, #180]	; (80082cc <prvAddNewTaskToReadyList+0xc4>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	3301      	adds	r3, #1
 800821a:	4a2c      	ldr	r2, [pc, #176]	; (80082cc <prvAddNewTaskToReadyList+0xc4>)
 800821c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800821e:	4b2c      	ldr	r3, [pc, #176]	; (80082d0 <prvAddNewTaskToReadyList+0xc8>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d109      	bne.n	800823a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008226:	4a2a      	ldr	r2, [pc, #168]	; (80082d0 <prvAddNewTaskToReadyList+0xc8>)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800822c:	4b27      	ldr	r3, [pc, #156]	; (80082cc <prvAddNewTaskToReadyList+0xc4>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	2b01      	cmp	r3, #1
 8008232:	d110      	bne.n	8008256 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008234:	f000 fc0e 	bl	8008a54 <prvInitialiseTaskLists>
 8008238:	e00d      	b.n	8008256 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800823a:	4b26      	ldr	r3, [pc, #152]	; (80082d4 <prvAddNewTaskToReadyList+0xcc>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d109      	bne.n	8008256 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008242:	4b23      	ldr	r3, [pc, #140]	; (80082d0 <prvAddNewTaskToReadyList+0xc8>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800824c:	429a      	cmp	r2, r3
 800824e:	d802      	bhi.n	8008256 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008250:	4a1f      	ldr	r2, [pc, #124]	; (80082d0 <prvAddNewTaskToReadyList+0xc8>)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008256:	4b20      	ldr	r3, [pc, #128]	; (80082d8 <prvAddNewTaskToReadyList+0xd0>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	3301      	adds	r3, #1
 800825c:	4a1e      	ldr	r2, [pc, #120]	; (80082d8 <prvAddNewTaskToReadyList+0xd0>)
 800825e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008260:	4b1d      	ldr	r3, [pc, #116]	; (80082d8 <prvAddNewTaskToReadyList+0xd0>)
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800826c:	4b1b      	ldr	r3, [pc, #108]	; (80082dc <prvAddNewTaskToReadyList+0xd4>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	429a      	cmp	r2, r3
 8008272:	d903      	bls.n	800827c <prvAddNewTaskToReadyList+0x74>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008278:	4a18      	ldr	r2, [pc, #96]	; (80082dc <prvAddNewTaskToReadyList+0xd4>)
 800827a:	6013      	str	r3, [r2, #0]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008280:	4613      	mov	r3, r2
 8008282:	009b      	lsls	r3, r3, #2
 8008284:	4413      	add	r3, r2
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	4a15      	ldr	r2, [pc, #84]	; (80082e0 <prvAddNewTaskToReadyList+0xd8>)
 800828a:	441a      	add	r2, r3
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	3304      	adds	r3, #4
 8008290:	4619      	mov	r1, r3
 8008292:	4610      	mov	r0, r2
 8008294:	f7ff f939 	bl	800750a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008298:	f001 f9d6 	bl	8009648 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800829c:	4b0d      	ldr	r3, [pc, #52]	; (80082d4 <prvAddNewTaskToReadyList+0xcc>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d00e      	beq.n	80082c2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80082a4:	4b0a      	ldr	r3, [pc, #40]	; (80082d0 <prvAddNewTaskToReadyList+0xc8>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d207      	bcs.n	80082c2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80082b2:	4b0c      	ldr	r3, [pc, #48]	; (80082e4 <prvAddNewTaskToReadyList+0xdc>)
 80082b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082b8:	601a      	str	r2, [r3, #0]
 80082ba:	f3bf 8f4f 	dsb	sy
 80082be:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80082c2:	bf00      	nop
 80082c4:	3708      	adds	r7, #8
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
 80082ca:	bf00      	nop
 80082cc:	20000d54 	.word	0x20000d54
 80082d0:	20000880 	.word	0x20000880
 80082d4:	20000d60 	.word	0x20000d60
 80082d8:	20000d70 	.word	0x20000d70
 80082dc:	20000d5c 	.word	0x20000d5c
 80082e0:	20000884 	.word	0x20000884
 80082e4:	e000ed04 	.word	0xe000ed04

080082e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80082f0:	2300      	movs	r3, #0
 80082f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d016      	beq.n	8008328 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80082fa:	4b13      	ldr	r3, [pc, #76]	; (8008348 <vTaskDelay+0x60>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d009      	beq.n	8008316 <vTaskDelay+0x2e>
 8008302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008306:	f383 8811 	msr	BASEPRI, r3
 800830a:	f3bf 8f6f 	isb	sy
 800830e:	f3bf 8f4f 	dsb	sy
 8008312:	60bb      	str	r3, [r7, #8]
 8008314:	e7fe      	b.n	8008314 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8008316:	f000 f87f 	bl	8008418 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800831a:	2100      	movs	r1, #0
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f000 fce3 	bl	8008ce8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008322:	f000 f887 	bl	8008434 <xTaskResumeAll>
 8008326:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d107      	bne.n	800833e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800832e:	4b07      	ldr	r3, [pc, #28]	; (800834c <vTaskDelay+0x64>)
 8008330:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008334:	601a      	str	r2, [r3, #0]
 8008336:	f3bf 8f4f 	dsb	sy
 800833a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800833e:	bf00      	nop
 8008340:	3710      	adds	r7, #16
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
 8008346:	bf00      	nop
 8008348:	20000d7c 	.word	0x20000d7c
 800834c:	e000ed04 	.word	0xe000ed04

08008350 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b08a      	sub	sp, #40	; 0x28
 8008354:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008356:	2300      	movs	r3, #0
 8008358:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800835a:	2300      	movs	r3, #0
 800835c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800835e:	463a      	mov	r2, r7
 8008360:	1d39      	adds	r1, r7, #4
 8008362:	f107 0308 	add.w	r3, r7, #8
 8008366:	4618      	mov	r0, r3
 8008368:	f7ff f86e 	bl	8007448 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800836c:	6839      	ldr	r1, [r7, #0]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	68ba      	ldr	r2, [r7, #8]
 8008372:	9202      	str	r2, [sp, #8]
 8008374:	9301      	str	r3, [sp, #4]
 8008376:	2300      	movs	r3, #0
 8008378:	9300      	str	r3, [sp, #0]
 800837a:	2300      	movs	r3, #0
 800837c:	460a      	mov	r2, r1
 800837e:	4920      	ldr	r1, [pc, #128]	; (8008400 <vTaskStartScheduler+0xb0>)
 8008380:	4820      	ldr	r0, [pc, #128]	; (8008404 <vTaskStartScheduler+0xb4>)
 8008382:	f7ff fe1d 	bl	8007fc0 <xTaskCreateStatic>
 8008386:	4602      	mov	r2, r0
 8008388:	4b1f      	ldr	r3, [pc, #124]	; (8008408 <vTaskStartScheduler+0xb8>)
 800838a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800838c:	4b1e      	ldr	r3, [pc, #120]	; (8008408 <vTaskStartScheduler+0xb8>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d002      	beq.n	800839a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008394:	2301      	movs	r3, #1
 8008396:	617b      	str	r3, [r7, #20]
 8008398:	e001      	b.n	800839e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800839a:	2300      	movs	r3, #0
 800839c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	d102      	bne.n	80083aa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80083a4:	f000 fcf4 	bl	8008d90 <xTimerCreateTimerTask>
 80083a8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d115      	bne.n	80083dc <vTaskStartScheduler+0x8c>
 80083b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b4:	f383 8811 	msr	BASEPRI, r3
 80083b8:	f3bf 8f6f 	isb	sy
 80083bc:	f3bf 8f4f 	dsb	sy
 80083c0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80083c2:	4b12      	ldr	r3, [pc, #72]	; (800840c <vTaskStartScheduler+0xbc>)
 80083c4:	f04f 32ff 	mov.w	r2, #4294967295
 80083c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80083ca:	4b11      	ldr	r3, [pc, #68]	; (8008410 <vTaskStartScheduler+0xc0>)
 80083cc:	2201      	movs	r2, #1
 80083ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80083d0:	4b10      	ldr	r3, [pc, #64]	; (8008414 <vTaskStartScheduler+0xc4>)
 80083d2:	2200      	movs	r2, #0
 80083d4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80083d6:	f001 f86b 	bl	80094b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80083da:	e00d      	b.n	80083f8 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083e2:	d109      	bne.n	80083f8 <vTaskStartScheduler+0xa8>
 80083e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e8:	f383 8811 	msr	BASEPRI, r3
 80083ec:	f3bf 8f6f 	isb	sy
 80083f0:	f3bf 8f4f 	dsb	sy
 80083f4:	60fb      	str	r3, [r7, #12]
 80083f6:	e7fe      	b.n	80083f6 <vTaskStartScheduler+0xa6>
}
 80083f8:	bf00      	nop
 80083fa:	3718      	adds	r7, #24
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}
 8008400:	0800b840 	.word	0x0800b840
 8008404:	08008a25 	.word	0x08008a25
 8008408:	20000d78 	.word	0x20000d78
 800840c:	20000d74 	.word	0x20000d74
 8008410:	20000d60 	.word	0x20000d60
 8008414:	20000d58 	.word	0x20000d58

08008418 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008418:	b480      	push	{r7}
 800841a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800841c:	4b04      	ldr	r3, [pc, #16]	; (8008430 <vTaskSuspendAll+0x18>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	3301      	adds	r3, #1
 8008422:	4a03      	ldr	r2, [pc, #12]	; (8008430 <vTaskSuspendAll+0x18>)
 8008424:	6013      	str	r3, [r2, #0]
}
 8008426:	bf00      	nop
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr
 8008430:	20000d7c 	.word	0x20000d7c

08008434 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800843a:	2300      	movs	r3, #0
 800843c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800843e:	2300      	movs	r3, #0
 8008440:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008442:	4b41      	ldr	r3, [pc, #260]	; (8008548 <xTaskResumeAll+0x114>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d109      	bne.n	800845e <xTaskResumeAll+0x2a>
 800844a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800844e:	f383 8811 	msr	BASEPRI, r3
 8008452:	f3bf 8f6f 	isb	sy
 8008456:	f3bf 8f4f 	dsb	sy
 800845a:	603b      	str	r3, [r7, #0]
 800845c:	e7fe      	b.n	800845c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800845e:	f001 f8c5 	bl	80095ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008462:	4b39      	ldr	r3, [pc, #228]	; (8008548 <xTaskResumeAll+0x114>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	3b01      	subs	r3, #1
 8008468:	4a37      	ldr	r2, [pc, #220]	; (8008548 <xTaskResumeAll+0x114>)
 800846a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800846c:	4b36      	ldr	r3, [pc, #216]	; (8008548 <xTaskResumeAll+0x114>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d162      	bne.n	800853a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008474:	4b35      	ldr	r3, [pc, #212]	; (800854c <xTaskResumeAll+0x118>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d05e      	beq.n	800853a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800847c:	e02f      	b.n	80084de <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800847e:	4b34      	ldr	r3, [pc, #208]	; (8008550 <xTaskResumeAll+0x11c>)
 8008480:	68db      	ldr	r3, [r3, #12]
 8008482:	68db      	ldr	r3, [r3, #12]
 8008484:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	3318      	adds	r3, #24
 800848a:	4618      	mov	r0, r3
 800848c:	f7ff f89a 	bl	80075c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	3304      	adds	r3, #4
 8008494:	4618      	mov	r0, r3
 8008496:	f7ff f895 	bl	80075c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800849e:	4b2d      	ldr	r3, [pc, #180]	; (8008554 <xTaskResumeAll+0x120>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	429a      	cmp	r2, r3
 80084a4:	d903      	bls.n	80084ae <xTaskResumeAll+0x7a>
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084aa:	4a2a      	ldr	r2, [pc, #168]	; (8008554 <xTaskResumeAll+0x120>)
 80084ac:	6013      	str	r3, [r2, #0]
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084b2:	4613      	mov	r3, r2
 80084b4:	009b      	lsls	r3, r3, #2
 80084b6:	4413      	add	r3, r2
 80084b8:	009b      	lsls	r3, r3, #2
 80084ba:	4a27      	ldr	r2, [pc, #156]	; (8008558 <xTaskResumeAll+0x124>)
 80084bc:	441a      	add	r2, r3
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	3304      	adds	r3, #4
 80084c2:	4619      	mov	r1, r3
 80084c4:	4610      	mov	r0, r2
 80084c6:	f7ff f820 	bl	800750a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084ce:	4b23      	ldr	r3, [pc, #140]	; (800855c <xTaskResumeAll+0x128>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d4:	429a      	cmp	r2, r3
 80084d6:	d302      	bcc.n	80084de <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80084d8:	4b21      	ldr	r3, [pc, #132]	; (8008560 <xTaskResumeAll+0x12c>)
 80084da:	2201      	movs	r2, #1
 80084dc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80084de:	4b1c      	ldr	r3, [pc, #112]	; (8008550 <xTaskResumeAll+0x11c>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d1cb      	bne.n	800847e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d001      	beq.n	80084f0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80084ec:	f000 fb4c 	bl	8008b88 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80084f0:	4b1c      	ldr	r3, [pc, #112]	; (8008564 <xTaskResumeAll+0x130>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d010      	beq.n	800851e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80084fc:	f000 f846 	bl	800858c <xTaskIncrementTick>
 8008500:	4603      	mov	r3, r0
 8008502:	2b00      	cmp	r3, #0
 8008504:	d002      	beq.n	800850c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008506:	4b16      	ldr	r3, [pc, #88]	; (8008560 <xTaskResumeAll+0x12c>)
 8008508:	2201      	movs	r2, #1
 800850a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	3b01      	subs	r3, #1
 8008510:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d1f1      	bne.n	80084fc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8008518:	4b12      	ldr	r3, [pc, #72]	; (8008564 <xTaskResumeAll+0x130>)
 800851a:	2200      	movs	r2, #0
 800851c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800851e:	4b10      	ldr	r3, [pc, #64]	; (8008560 <xTaskResumeAll+0x12c>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d009      	beq.n	800853a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008526:	2301      	movs	r3, #1
 8008528:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800852a:	4b0f      	ldr	r3, [pc, #60]	; (8008568 <xTaskResumeAll+0x134>)
 800852c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008530:	601a      	str	r2, [r3, #0]
 8008532:	f3bf 8f4f 	dsb	sy
 8008536:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800853a:	f001 f885 	bl	8009648 <vPortExitCritical>

	return xAlreadyYielded;
 800853e:	68bb      	ldr	r3, [r7, #8]
}
 8008540:	4618      	mov	r0, r3
 8008542:	3710      	adds	r7, #16
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}
 8008548:	20000d7c 	.word	0x20000d7c
 800854c:	20000d54 	.word	0x20000d54
 8008550:	20000d14 	.word	0x20000d14
 8008554:	20000d5c 	.word	0x20000d5c
 8008558:	20000884 	.word	0x20000884
 800855c:	20000880 	.word	0x20000880
 8008560:	20000d68 	.word	0x20000d68
 8008564:	20000d64 	.word	0x20000d64
 8008568:	e000ed04 	.word	0xe000ed04

0800856c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008572:	4b05      	ldr	r3, [pc, #20]	; (8008588 <xTaskGetTickCount+0x1c>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008578:	687b      	ldr	r3, [r7, #4]
}
 800857a:	4618      	mov	r0, r3
 800857c:	370c      	adds	r7, #12
 800857e:	46bd      	mov	sp, r7
 8008580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008584:	4770      	bx	lr
 8008586:	bf00      	nop
 8008588:	20000d58 	.word	0x20000d58

0800858c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b086      	sub	sp, #24
 8008590:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008592:	2300      	movs	r3, #0
 8008594:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008596:	4b51      	ldr	r3, [pc, #324]	; (80086dc <xTaskIncrementTick+0x150>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	2b00      	cmp	r3, #0
 800859c:	f040 808d 	bne.w	80086ba <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80085a0:	4b4f      	ldr	r3, [pc, #316]	; (80086e0 <xTaskIncrementTick+0x154>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	3301      	adds	r3, #1
 80085a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80085a8:	4a4d      	ldr	r2, [pc, #308]	; (80086e0 <xTaskIncrementTick+0x154>)
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d11f      	bne.n	80085f4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80085b4:	4b4b      	ldr	r3, [pc, #300]	; (80086e4 <xTaskIncrementTick+0x158>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d009      	beq.n	80085d2 <xTaskIncrementTick+0x46>
 80085be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c2:	f383 8811 	msr	BASEPRI, r3
 80085c6:	f3bf 8f6f 	isb	sy
 80085ca:	f3bf 8f4f 	dsb	sy
 80085ce:	603b      	str	r3, [r7, #0]
 80085d0:	e7fe      	b.n	80085d0 <xTaskIncrementTick+0x44>
 80085d2:	4b44      	ldr	r3, [pc, #272]	; (80086e4 <xTaskIncrementTick+0x158>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	60fb      	str	r3, [r7, #12]
 80085d8:	4b43      	ldr	r3, [pc, #268]	; (80086e8 <xTaskIncrementTick+0x15c>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a41      	ldr	r2, [pc, #260]	; (80086e4 <xTaskIncrementTick+0x158>)
 80085de:	6013      	str	r3, [r2, #0]
 80085e0:	4a41      	ldr	r2, [pc, #260]	; (80086e8 <xTaskIncrementTick+0x15c>)
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	6013      	str	r3, [r2, #0]
 80085e6:	4b41      	ldr	r3, [pc, #260]	; (80086ec <xTaskIncrementTick+0x160>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	3301      	adds	r3, #1
 80085ec:	4a3f      	ldr	r2, [pc, #252]	; (80086ec <xTaskIncrementTick+0x160>)
 80085ee:	6013      	str	r3, [r2, #0]
 80085f0:	f000 faca 	bl	8008b88 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80085f4:	4b3e      	ldr	r3, [pc, #248]	; (80086f0 <xTaskIncrementTick+0x164>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	693a      	ldr	r2, [r7, #16]
 80085fa:	429a      	cmp	r2, r3
 80085fc:	d34e      	bcc.n	800869c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085fe:	4b39      	ldr	r3, [pc, #228]	; (80086e4 <xTaskIncrementTick+0x158>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d101      	bne.n	800860c <xTaskIncrementTick+0x80>
 8008608:	2301      	movs	r3, #1
 800860a:	e000      	b.n	800860e <xTaskIncrementTick+0x82>
 800860c:	2300      	movs	r3, #0
 800860e:	2b00      	cmp	r3, #0
 8008610:	d004      	beq.n	800861c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008612:	4b37      	ldr	r3, [pc, #220]	; (80086f0 <xTaskIncrementTick+0x164>)
 8008614:	f04f 32ff 	mov.w	r2, #4294967295
 8008618:	601a      	str	r2, [r3, #0]
					break;
 800861a:	e03f      	b.n	800869c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800861c:	4b31      	ldr	r3, [pc, #196]	; (80086e4 <xTaskIncrementTick+0x158>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	68db      	ldr	r3, [r3, #12]
 8008622:	68db      	ldr	r3, [r3, #12]
 8008624:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800862c:	693a      	ldr	r2, [r7, #16]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	429a      	cmp	r2, r3
 8008632:	d203      	bcs.n	800863c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008634:	4a2e      	ldr	r2, [pc, #184]	; (80086f0 <xTaskIncrementTick+0x164>)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6013      	str	r3, [r2, #0]
						break;
 800863a:	e02f      	b.n	800869c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	3304      	adds	r3, #4
 8008640:	4618      	mov	r0, r3
 8008642:	f7fe ffbf 	bl	80075c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800864a:	2b00      	cmp	r3, #0
 800864c:	d004      	beq.n	8008658 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	3318      	adds	r3, #24
 8008652:	4618      	mov	r0, r3
 8008654:	f7fe ffb6 	bl	80075c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800865c:	4b25      	ldr	r3, [pc, #148]	; (80086f4 <xTaskIncrementTick+0x168>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	429a      	cmp	r2, r3
 8008662:	d903      	bls.n	800866c <xTaskIncrementTick+0xe0>
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008668:	4a22      	ldr	r2, [pc, #136]	; (80086f4 <xTaskIncrementTick+0x168>)
 800866a:	6013      	str	r3, [r2, #0]
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008670:	4613      	mov	r3, r2
 8008672:	009b      	lsls	r3, r3, #2
 8008674:	4413      	add	r3, r2
 8008676:	009b      	lsls	r3, r3, #2
 8008678:	4a1f      	ldr	r2, [pc, #124]	; (80086f8 <xTaskIncrementTick+0x16c>)
 800867a:	441a      	add	r2, r3
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	3304      	adds	r3, #4
 8008680:	4619      	mov	r1, r3
 8008682:	4610      	mov	r0, r2
 8008684:	f7fe ff41 	bl	800750a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800868c:	4b1b      	ldr	r3, [pc, #108]	; (80086fc <xTaskIncrementTick+0x170>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008692:	429a      	cmp	r2, r3
 8008694:	d3b3      	bcc.n	80085fe <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8008696:	2301      	movs	r3, #1
 8008698:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800869a:	e7b0      	b.n	80085fe <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800869c:	4b17      	ldr	r3, [pc, #92]	; (80086fc <xTaskIncrementTick+0x170>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086a2:	4915      	ldr	r1, [pc, #84]	; (80086f8 <xTaskIncrementTick+0x16c>)
 80086a4:	4613      	mov	r3, r2
 80086a6:	009b      	lsls	r3, r3, #2
 80086a8:	4413      	add	r3, r2
 80086aa:	009b      	lsls	r3, r3, #2
 80086ac:	440b      	add	r3, r1
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d907      	bls.n	80086c4 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80086b4:	2301      	movs	r3, #1
 80086b6:	617b      	str	r3, [r7, #20]
 80086b8:	e004      	b.n	80086c4 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80086ba:	4b11      	ldr	r3, [pc, #68]	; (8008700 <xTaskIncrementTick+0x174>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	3301      	adds	r3, #1
 80086c0:	4a0f      	ldr	r2, [pc, #60]	; (8008700 <xTaskIncrementTick+0x174>)
 80086c2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80086c4:	4b0f      	ldr	r3, [pc, #60]	; (8008704 <xTaskIncrementTick+0x178>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d001      	beq.n	80086d0 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80086cc:	2301      	movs	r3, #1
 80086ce:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80086d0:	697b      	ldr	r3, [r7, #20]
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3718      	adds	r7, #24
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}
 80086da:	bf00      	nop
 80086dc:	20000d7c 	.word	0x20000d7c
 80086e0:	20000d58 	.word	0x20000d58
 80086e4:	20000d0c 	.word	0x20000d0c
 80086e8:	20000d10 	.word	0x20000d10
 80086ec:	20000d6c 	.word	0x20000d6c
 80086f0:	20000d74 	.word	0x20000d74
 80086f4:	20000d5c 	.word	0x20000d5c
 80086f8:	20000884 	.word	0x20000884
 80086fc:	20000880 	.word	0x20000880
 8008700:	20000d64 	.word	0x20000d64
 8008704:	20000d68 	.word	0x20000d68

08008708 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008708:	b480      	push	{r7}
 800870a:	b085      	sub	sp, #20
 800870c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800870e:	4b27      	ldr	r3, [pc, #156]	; (80087ac <vTaskSwitchContext+0xa4>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d003      	beq.n	800871e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008716:	4b26      	ldr	r3, [pc, #152]	; (80087b0 <vTaskSwitchContext+0xa8>)
 8008718:	2201      	movs	r2, #1
 800871a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800871c:	e040      	b.n	80087a0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800871e:	4b24      	ldr	r3, [pc, #144]	; (80087b0 <vTaskSwitchContext+0xa8>)
 8008720:	2200      	movs	r2, #0
 8008722:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008724:	4b23      	ldr	r3, [pc, #140]	; (80087b4 <vTaskSwitchContext+0xac>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	60fb      	str	r3, [r7, #12]
 800872a:	e00f      	b.n	800874c <vTaskSwitchContext+0x44>
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d109      	bne.n	8008746 <vTaskSwitchContext+0x3e>
 8008732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008736:	f383 8811 	msr	BASEPRI, r3
 800873a:	f3bf 8f6f 	isb	sy
 800873e:	f3bf 8f4f 	dsb	sy
 8008742:	607b      	str	r3, [r7, #4]
 8008744:	e7fe      	b.n	8008744 <vTaskSwitchContext+0x3c>
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	3b01      	subs	r3, #1
 800874a:	60fb      	str	r3, [r7, #12]
 800874c:	491a      	ldr	r1, [pc, #104]	; (80087b8 <vTaskSwitchContext+0xb0>)
 800874e:	68fa      	ldr	r2, [r7, #12]
 8008750:	4613      	mov	r3, r2
 8008752:	009b      	lsls	r3, r3, #2
 8008754:	4413      	add	r3, r2
 8008756:	009b      	lsls	r3, r3, #2
 8008758:	440b      	add	r3, r1
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d0e5      	beq.n	800872c <vTaskSwitchContext+0x24>
 8008760:	68fa      	ldr	r2, [r7, #12]
 8008762:	4613      	mov	r3, r2
 8008764:	009b      	lsls	r3, r3, #2
 8008766:	4413      	add	r3, r2
 8008768:	009b      	lsls	r3, r3, #2
 800876a:	4a13      	ldr	r2, [pc, #76]	; (80087b8 <vTaskSwitchContext+0xb0>)
 800876c:	4413      	add	r3, r2
 800876e:	60bb      	str	r3, [r7, #8]
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	685a      	ldr	r2, [r3, #4]
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	605a      	str	r2, [r3, #4]
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	685a      	ldr	r2, [r3, #4]
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	3308      	adds	r3, #8
 8008782:	429a      	cmp	r2, r3
 8008784:	d104      	bne.n	8008790 <vTaskSwitchContext+0x88>
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	685a      	ldr	r2, [r3, #4]
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	605a      	str	r2, [r3, #4]
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	68db      	ldr	r3, [r3, #12]
 8008796:	4a09      	ldr	r2, [pc, #36]	; (80087bc <vTaskSwitchContext+0xb4>)
 8008798:	6013      	str	r3, [r2, #0]
 800879a:	4a06      	ldr	r2, [pc, #24]	; (80087b4 <vTaskSwitchContext+0xac>)
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	6013      	str	r3, [r2, #0]
}
 80087a0:	bf00      	nop
 80087a2:	3714      	adds	r7, #20
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr
 80087ac:	20000d7c 	.word	0x20000d7c
 80087b0:	20000d68 	.word	0x20000d68
 80087b4:	20000d5c 	.word	0x20000d5c
 80087b8:	20000884 	.word	0x20000884
 80087bc:	20000880 	.word	0x20000880

080087c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b084      	sub	sp, #16
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d109      	bne.n	80087e4 <vTaskPlaceOnEventList+0x24>
 80087d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d4:	f383 8811 	msr	BASEPRI, r3
 80087d8:	f3bf 8f6f 	isb	sy
 80087dc:	f3bf 8f4f 	dsb	sy
 80087e0:	60fb      	str	r3, [r7, #12]
 80087e2:	e7fe      	b.n	80087e2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80087e4:	4b07      	ldr	r3, [pc, #28]	; (8008804 <vTaskPlaceOnEventList+0x44>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	3318      	adds	r3, #24
 80087ea:	4619      	mov	r1, r3
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f7fe feb0 	bl	8007552 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80087f2:	2101      	movs	r1, #1
 80087f4:	6838      	ldr	r0, [r7, #0]
 80087f6:	f000 fa77 	bl	8008ce8 <prvAddCurrentTaskToDelayedList>
}
 80087fa:	bf00      	nop
 80087fc:	3710      	adds	r7, #16
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
 8008802:	bf00      	nop
 8008804:	20000880 	.word	0x20000880

08008808 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008808:	b580      	push	{r7, lr}
 800880a:	b086      	sub	sp, #24
 800880c:	af00      	add	r7, sp, #0
 800880e:	60f8      	str	r0, [r7, #12]
 8008810:	60b9      	str	r1, [r7, #8]
 8008812:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d109      	bne.n	800882e <vTaskPlaceOnEventListRestricted+0x26>
 800881a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800881e:	f383 8811 	msr	BASEPRI, r3
 8008822:	f3bf 8f6f 	isb	sy
 8008826:	f3bf 8f4f 	dsb	sy
 800882a:	617b      	str	r3, [r7, #20]
 800882c:	e7fe      	b.n	800882c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800882e:	4b0a      	ldr	r3, [pc, #40]	; (8008858 <vTaskPlaceOnEventListRestricted+0x50>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	3318      	adds	r3, #24
 8008834:	4619      	mov	r1, r3
 8008836:	68f8      	ldr	r0, [r7, #12]
 8008838:	f7fe fe67 	bl	800750a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d002      	beq.n	8008848 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8008842:	f04f 33ff 	mov.w	r3, #4294967295
 8008846:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008848:	6879      	ldr	r1, [r7, #4]
 800884a:	68b8      	ldr	r0, [r7, #8]
 800884c:	f000 fa4c 	bl	8008ce8 <prvAddCurrentTaskToDelayedList>
	}
 8008850:	bf00      	nop
 8008852:	3718      	adds	r7, #24
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}
 8008858:	20000880 	.word	0x20000880

0800885c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b086      	sub	sp, #24
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	68db      	ldr	r3, [r3, #12]
 800886a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d109      	bne.n	8008886 <xTaskRemoveFromEventList+0x2a>
 8008872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008876:	f383 8811 	msr	BASEPRI, r3
 800887a:	f3bf 8f6f 	isb	sy
 800887e:	f3bf 8f4f 	dsb	sy
 8008882:	60fb      	str	r3, [r7, #12]
 8008884:	e7fe      	b.n	8008884 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	3318      	adds	r3, #24
 800888a:	4618      	mov	r0, r3
 800888c:	f7fe fe9a 	bl	80075c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008890:	4b1d      	ldr	r3, [pc, #116]	; (8008908 <xTaskRemoveFromEventList+0xac>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d11d      	bne.n	80088d4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	3304      	adds	r3, #4
 800889c:	4618      	mov	r0, r3
 800889e:	f7fe fe91 	bl	80075c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088a6:	4b19      	ldr	r3, [pc, #100]	; (800890c <xTaskRemoveFromEventList+0xb0>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	429a      	cmp	r2, r3
 80088ac:	d903      	bls.n	80088b6 <xTaskRemoveFromEventList+0x5a>
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088b2:	4a16      	ldr	r2, [pc, #88]	; (800890c <xTaskRemoveFromEventList+0xb0>)
 80088b4:	6013      	str	r3, [r2, #0]
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088ba:	4613      	mov	r3, r2
 80088bc:	009b      	lsls	r3, r3, #2
 80088be:	4413      	add	r3, r2
 80088c0:	009b      	lsls	r3, r3, #2
 80088c2:	4a13      	ldr	r2, [pc, #76]	; (8008910 <xTaskRemoveFromEventList+0xb4>)
 80088c4:	441a      	add	r2, r3
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	3304      	adds	r3, #4
 80088ca:	4619      	mov	r1, r3
 80088cc:	4610      	mov	r0, r2
 80088ce:	f7fe fe1c 	bl	800750a <vListInsertEnd>
 80088d2:	e005      	b.n	80088e0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	3318      	adds	r3, #24
 80088d8:	4619      	mov	r1, r3
 80088da:	480e      	ldr	r0, [pc, #56]	; (8008914 <xTaskRemoveFromEventList+0xb8>)
 80088dc:	f7fe fe15 	bl	800750a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088e4:	4b0c      	ldr	r3, [pc, #48]	; (8008918 <xTaskRemoveFromEventList+0xbc>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d905      	bls.n	80088fa <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80088ee:	2301      	movs	r3, #1
 80088f0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80088f2:	4b0a      	ldr	r3, [pc, #40]	; (800891c <xTaskRemoveFromEventList+0xc0>)
 80088f4:	2201      	movs	r2, #1
 80088f6:	601a      	str	r2, [r3, #0]
 80088f8:	e001      	b.n	80088fe <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80088fa:	2300      	movs	r3, #0
 80088fc:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80088fe:	697b      	ldr	r3, [r7, #20]
}
 8008900:	4618      	mov	r0, r3
 8008902:	3718      	adds	r7, #24
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}
 8008908:	20000d7c 	.word	0x20000d7c
 800890c:	20000d5c 	.word	0x20000d5c
 8008910:	20000884 	.word	0x20000884
 8008914:	20000d14 	.word	0x20000d14
 8008918:	20000880 	.word	0x20000880
 800891c:	20000d68 	.word	0x20000d68

08008920 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008920:	b480      	push	{r7}
 8008922:	b083      	sub	sp, #12
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008928:	4b06      	ldr	r3, [pc, #24]	; (8008944 <vTaskInternalSetTimeOutState+0x24>)
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008930:	4b05      	ldr	r3, [pc, #20]	; (8008948 <vTaskInternalSetTimeOutState+0x28>)
 8008932:	681a      	ldr	r2, [r3, #0]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	605a      	str	r2, [r3, #4]
}
 8008938:	bf00      	nop
 800893a:	370c      	adds	r7, #12
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr
 8008944:	20000d6c 	.word	0x20000d6c
 8008948:	20000d58 	.word	0x20000d58

0800894c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b088      	sub	sp, #32
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d109      	bne.n	8008970 <xTaskCheckForTimeOut+0x24>
 800895c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008960:	f383 8811 	msr	BASEPRI, r3
 8008964:	f3bf 8f6f 	isb	sy
 8008968:	f3bf 8f4f 	dsb	sy
 800896c:	613b      	str	r3, [r7, #16]
 800896e:	e7fe      	b.n	800896e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d109      	bne.n	800898a <xTaskCheckForTimeOut+0x3e>
 8008976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800897a:	f383 8811 	msr	BASEPRI, r3
 800897e:	f3bf 8f6f 	isb	sy
 8008982:	f3bf 8f4f 	dsb	sy
 8008986:	60fb      	str	r3, [r7, #12]
 8008988:	e7fe      	b.n	8008988 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800898a:	f000 fe2f 	bl	80095ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800898e:	4b1d      	ldr	r3, [pc, #116]	; (8008a04 <xTaskCheckForTimeOut+0xb8>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	69ba      	ldr	r2, [r7, #24]
 800899a:	1ad3      	subs	r3, r2, r3
 800899c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089a6:	d102      	bne.n	80089ae <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80089a8:	2300      	movs	r3, #0
 80089aa:	61fb      	str	r3, [r7, #28]
 80089ac:	e023      	b.n	80089f6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681a      	ldr	r2, [r3, #0]
 80089b2:	4b15      	ldr	r3, [pc, #84]	; (8008a08 <xTaskCheckForTimeOut+0xbc>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	429a      	cmp	r2, r3
 80089b8:	d007      	beq.n	80089ca <xTaskCheckForTimeOut+0x7e>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	69ba      	ldr	r2, [r7, #24]
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d302      	bcc.n	80089ca <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80089c4:	2301      	movs	r3, #1
 80089c6:	61fb      	str	r3, [r7, #28]
 80089c8:	e015      	b.n	80089f6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	697a      	ldr	r2, [r7, #20]
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d20b      	bcs.n	80089ec <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	681a      	ldr	r2, [r3, #0]
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	1ad2      	subs	r2, r2, r3
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f7ff ff9d 	bl	8008920 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80089e6:	2300      	movs	r3, #0
 80089e8:	61fb      	str	r3, [r7, #28]
 80089ea:	e004      	b.n	80089f6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	2200      	movs	r2, #0
 80089f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80089f2:	2301      	movs	r3, #1
 80089f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80089f6:	f000 fe27 	bl	8009648 <vPortExitCritical>

	return xReturn;
 80089fa:	69fb      	ldr	r3, [r7, #28]
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3720      	adds	r7, #32
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}
 8008a04:	20000d58 	.word	0x20000d58
 8008a08:	20000d6c 	.word	0x20000d6c

08008a0c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008a10:	4b03      	ldr	r3, [pc, #12]	; (8008a20 <vTaskMissedYield+0x14>)
 8008a12:	2201      	movs	r2, #1
 8008a14:	601a      	str	r2, [r3, #0]
}
 8008a16:	bf00      	nop
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr
 8008a20:	20000d68 	.word	0x20000d68

08008a24 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b082      	sub	sp, #8
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008a2c:	f000 f852 	bl	8008ad4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008a30:	4b06      	ldr	r3, [pc, #24]	; (8008a4c <prvIdleTask+0x28>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	d9f9      	bls.n	8008a2c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008a38:	4b05      	ldr	r3, [pc, #20]	; (8008a50 <prvIdleTask+0x2c>)
 8008a3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a3e:	601a      	str	r2, [r3, #0]
 8008a40:	f3bf 8f4f 	dsb	sy
 8008a44:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008a48:	e7f0      	b.n	8008a2c <prvIdleTask+0x8>
 8008a4a:	bf00      	nop
 8008a4c:	20000884 	.word	0x20000884
 8008a50:	e000ed04 	.word	0xe000ed04

08008a54 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b082      	sub	sp, #8
 8008a58:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	607b      	str	r3, [r7, #4]
 8008a5e:	e00c      	b.n	8008a7a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008a60:	687a      	ldr	r2, [r7, #4]
 8008a62:	4613      	mov	r3, r2
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	4413      	add	r3, r2
 8008a68:	009b      	lsls	r3, r3, #2
 8008a6a:	4a12      	ldr	r2, [pc, #72]	; (8008ab4 <prvInitialiseTaskLists+0x60>)
 8008a6c:	4413      	add	r3, r2
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7fe fd1e 	bl	80074b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	3301      	adds	r3, #1
 8008a78:	607b      	str	r3, [r7, #4]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2b37      	cmp	r3, #55	; 0x37
 8008a7e:	d9ef      	bls.n	8008a60 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008a80:	480d      	ldr	r0, [pc, #52]	; (8008ab8 <prvInitialiseTaskLists+0x64>)
 8008a82:	f7fe fd15 	bl	80074b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008a86:	480d      	ldr	r0, [pc, #52]	; (8008abc <prvInitialiseTaskLists+0x68>)
 8008a88:	f7fe fd12 	bl	80074b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008a8c:	480c      	ldr	r0, [pc, #48]	; (8008ac0 <prvInitialiseTaskLists+0x6c>)
 8008a8e:	f7fe fd0f 	bl	80074b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008a92:	480c      	ldr	r0, [pc, #48]	; (8008ac4 <prvInitialiseTaskLists+0x70>)
 8008a94:	f7fe fd0c 	bl	80074b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008a98:	480b      	ldr	r0, [pc, #44]	; (8008ac8 <prvInitialiseTaskLists+0x74>)
 8008a9a:	f7fe fd09 	bl	80074b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008a9e:	4b0b      	ldr	r3, [pc, #44]	; (8008acc <prvInitialiseTaskLists+0x78>)
 8008aa0:	4a05      	ldr	r2, [pc, #20]	; (8008ab8 <prvInitialiseTaskLists+0x64>)
 8008aa2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008aa4:	4b0a      	ldr	r3, [pc, #40]	; (8008ad0 <prvInitialiseTaskLists+0x7c>)
 8008aa6:	4a05      	ldr	r2, [pc, #20]	; (8008abc <prvInitialiseTaskLists+0x68>)
 8008aa8:	601a      	str	r2, [r3, #0]
}
 8008aaa:	bf00      	nop
 8008aac:	3708      	adds	r7, #8
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
 8008ab2:	bf00      	nop
 8008ab4:	20000884 	.word	0x20000884
 8008ab8:	20000ce4 	.word	0x20000ce4
 8008abc:	20000cf8 	.word	0x20000cf8
 8008ac0:	20000d14 	.word	0x20000d14
 8008ac4:	20000d28 	.word	0x20000d28
 8008ac8:	20000d40 	.word	0x20000d40
 8008acc:	20000d0c 	.word	0x20000d0c
 8008ad0:	20000d10 	.word	0x20000d10

08008ad4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b082      	sub	sp, #8
 8008ad8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ada:	e019      	b.n	8008b10 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008adc:	f000 fd86 	bl	80095ec <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008ae0:	4b0f      	ldr	r3, [pc, #60]	; (8008b20 <prvCheckTasksWaitingTermination+0x4c>)
 8008ae2:	68db      	ldr	r3, [r3, #12]
 8008ae4:	68db      	ldr	r3, [r3, #12]
 8008ae6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	3304      	adds	r3, #4
 8008aec:	4618      	mov	r0, r3
 8008aee:	f7fe fd69 	bl	80075c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008af2:	4b0c      	ldr	r3, [pc, #48]	; (8008b24 <prvCheckTasksWaitingTermination+0x50>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	3b01      	subs	r3, #1
 8008af8:	4a0a      	ldr	r2, [pc, #40]	; (8008b24 <prvCheckTasksWaitingTermination+0x50>)
 8008afa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008afc:	4b0a      	ldr	r3, [pc, #40]	; (8008b28 <prvCheckTasksWaitingTermination+0x54>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	3b01      	subs	r3, #1
 8008b02:	4a09      	ldr	r2, [pc, #36]	; (8008b28 <prvCheckTasksWaitingTermination+0x54>)
 8008b04:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008b06:	f000 fd9f 	bl	8009648 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 f80e 	bl	8008b2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b10:	4b05      	ldr	r3, [pc, #20]	; (8008b28 <prvCheckTasksWaitingTermination+0x54>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d1e1      	bne.n	8008adc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008b18:	bf00      	nop
 8008b1a:	3708      	adds	r7, #8
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}
 8008b20:	20000d28 	.word	0x20000d28
 8008b24:	20000d54 	.word	0x20000d54
 8008b28:	20000d3c 	.word	0x20000d3c

08008b2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d108      	bne.n	8008b50 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b42:	4618      	mov	r0, r3
 8008b44:	f000 ff2e 	bl	80099a4 <vPortFree>
				vPortFree( pxTCB );
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f000 ff2b 	bl	80099a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008b4e:	e017      	b.n	8008b80 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008b56:	2b01      	cmp	r3, #1
 8008b58:	d103      	bne.n	8008b62 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f000 ff22 	bl	80099a4 <vPortFree>
	}
 8008b60:	e00e      	b.n	8008b80 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008b68:	2b02      	cmp	r3, #2
 8008b6a:	d009      	beq.n	8008b80 <prvDeleteTCB+0x54>
 8008b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b70:	f383 8811 	msr	BASEPRI, r3
 8008b74:	f3bf 8f6f 	isb	sy
 8008b78:	f3bf 8f4f 	dsb	sy
 8008b7c:	60fb      	str	r3, [r7, #12]
 8008b7e:	e7fe      	b.n	8008b7e <prvDeleteTCB+0x52>
	}
 8008b80:	bf00      	nop
 8008b82:	3710      	adds	r7, #16
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b083      	sub	sp, #12
 8008b8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b8e:	4b0f      	ldr	r3, [pc, #60]	; (8008bcc <prvResetNextTaskUnblockTime+0x44>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d101      	bne.n	8008b9c <prvResetNextTaskUnblockTime+0x14>
 8008b98:	2301      	movs	r3, #1
 8008b9a:	e000      	b.n	8008b9e <prvResetNextTaskUnblockTime+0x16>
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d004      	beq.n	8008bac <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008ba2:	4b0b      	ldr	r3, [pc, #44]	; (8008bd0 <prvResetNextTaskUnblockTime+0x48>)
 8008ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8008ba8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008baa:	e008      	b.n	8008bbe <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008bac:	4b07      	ldr	r3, [pc, #28]	; (8008bcc <prvResetNextTaskUnblockTime+0x44>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	68db      	ldr	r3, [r3, #12]
 8008bb2:	68db      	ldr	r3, [r3, #12]
 8008bb4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	4a05      	ldr	r2, [pc, #20]	; (8008bd0 <prvResetNextTaskUnblockTime+0x48>)
 8008bbc:	6013      	str	r3, [r2, #0]
}
 8008bbe:	bf00      	nop
 8008bc0:	370c      	adds	r7, #12
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc8:	4770      	bx	lr
 8008bca:	bf00      	nop
 8008bcc:	20000d0c 	.word	0x20000d0c
 8008bd0:	20000d74 	.word	0x20000d74

08008bd4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b083      	sub	sp, #12
 8008bd8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008bda:	4b0b      	ldr	r3, [pc, #44]	; (8008c08 <xTaskGetSchedulerState+0x34>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d102      	bne.n	8008be8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008be2:	2301      	movs	r3, #1
 8008be4:	607b      	str	r3, [r7, #4]
 8008be6:	e008      	b.n	8008bfa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008be8:	4b08      	ldr	r3, [pc, #32]	; (8008c0c <xTaskGetSchedulerState+0x38>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d102      	bne.n	8008bf6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008bf0:	2302      	movs	r3, #2
 8008bf2:	607b      	str	r3, [r7, #4]
 8008bf4:	e001      	b.n	8008bfa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008bfa:	687b      	ldr	r3, [r7, #4]
	}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	370c      	adds	r7, #12
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr
 8008c08:	20000d60 	.word	0x20000d60
 8008c0c:	20000d7c 	.word	0x20000d7c

08008c10 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b086      	sub	sp, #24
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d054      	beq.n	8008cd0 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008c26:	4b2d      	ldr	r3, [pc, #180]	; (8008cdc <xTaskPriorityDisinherit+0xcc>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	693a      	ldr	r2, [r7, #16]
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d009      	beq.n	8008c44 <xTaskPriorityDisinherit+0x34>
 8008c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c34:	f383 8811 	msr	BASEPRI, r3
 8008c38:	f3bf 8f6f 	isb	sy
 8008c3c:	f3bf 8f4f 	dsb	sy
 8008c40:	60fb      	str	r3, [r7, #12]
 8008c42:	e7fe      	b.n	8008c42 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d109      	bne.n	8008c60 <xTaskPriorityDisinherit+0x50>
 8008c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c50:	f383 8811 	msr	BASEPRI, r3
 8008c54:	f3bf 8f6f 	isb	sy
 8008c58:	f3bf 8f4f 	dsb	sy
 8008c5c:	60bb      	str	r3, [r7, #8]
 8008c5e:	e7fe      	b.n	8008c5e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c64:	1e5a      	subs	r2, r3, #1
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d02c      	beq.n	8008cd0 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d128      	bne.n	8008cd0 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	3304      	adds	r3, #4
 8008c82:	4618      	mov	r0, r3
 8008c84:	f7fe fc9e 	bl	80075c4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c94:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ca0:	4b0f      	ldr	r3, [pc, #60]	; (8008ce0 <xTaskPriorityDisinherit+0xd0>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d903      	bls.n	8008cb0 <xTaskPriorityDisinherit+0xa0>
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cac:	4a0c      	ldr	r2, [pc, #48]	; (8008ce0 <xTaskPriorityDisinherit+0xd0>)
 8008cae:	6013      	str	r3, [r2, #0]
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cb4:	4613      	mov	r3, r2
 8008cb6:	009b      	lsls	r3, r3, #2
 8008cb8:	4413      	add	r3, r2
 8008cba:	009b      	lsls	r3, r3, #2
 8008cbc:	4a09      	ldr	r2, [pc, #36]	; (8008ce4 <xTaskPriorityDisinherit+0xd4>)
 8008cbe:	441a      	add	r2, r3
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	3304      	adds	r3, #4
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	4610      	mov	r0, r2
 8008cc8:	f7fe fc1f 	bl	800750a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008cd0:	697b      	ldr	r3, [r7, #20]
	}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3718      	adds	r7, #24
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}
 8008cda:	bf00      	nop
 8008cdc:	20000880 	.word	0x20000880
 8008ce0:	20000d5c 	.word	0x20000d5c
 8008ce4:	20000884 	.word	0x20000884

08008ce8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b084      	sub	sp, #16
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008cf2:	4b21      	ldr	r3, [pc, #132]	; (8008d78 <prvAddCurrentTaskToDelayedList+0x90>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008cf8:	4b20      	ldr	r3, [pc, #128]	; (8008d7c <prvAddCurrentTaskToDelayedList+0x94>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	3304      	adds	r3, #4
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f7fe fc60 	bl	80075c4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d0a:	d10a      	bne.n	8008d22 <prvAddCurrentTaskToDelayedList+0x3a>
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d007      	beq.n	8008d22 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d12:	4b1a      	ldr	r3, [pc, #104]	; (8008d7c <prvAddCurrentTaskToDelayedList+0x94>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	3304      	adds	r3, #4
 8008d18:	4619      	mov	r1, r3
 8008d1a:	4819      	ldr	r0, [pc, #100]	; (8008d80 <prvAddCurrentTaskToDelayedList+0x98>)
 8008d1c:	f7fe fbf5 	bl	800750a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008d20:	e026      	b.n	8008d70 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008d22:	68fa      	ldr	r2, [r7, #12]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	4413      	add	r3, r2
 8008d28:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008d2a:	4b14      	ldr	r3, [pc, #80]	; (8008d7c <prvAddCurrentTaskToDelayedList+0x94>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	68ba      	ldr	r2, [r7, #8]
 8008d30:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008d32:	68ba      	ldr	r2, [r7, #8]
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d209      	bcs.n	8008d4e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d3a:	4b12      	ldr	r3, [pc, #72]	; (8008d84 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008d3c:	681a      	ldr	r2, [r3, #0]
 8008d3e:	4b0f      	ldr	r3, [pc, #60]	; (8008d7c <prvAddCurrentTaskToDelayedList+0x94>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	3304      	adds	r3, #4
 8008d44:	4619      	mov	r1, r3
 8008d46:	4610      	mov	r0, r2
 8008d48:	f7fe fc03 	bl	8007552 <vListInsert>
}
 8008d4c:	e010      	b.n	8008d70 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d4e:	4b0e      	ldr	r3, [pc, #56]	; (8008d88 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008d50:	681a      	ldr	r2, [r3, #0]
 8008d52:	4b0a      	ldr	r3, [pc, #40]	; (8008d7c <prvAddCurrentTaskToDelayedList+0x94>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	3304      	adds	r3, #4
 8008d58:	4619      	mov	r1, r3
 8008d5a:	4610      	mov	r0, r2
 8008d5c:	f7fe fbf9 	bl	8007552 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008d60:	4b0a      	ldr	r3, [pc, #40]	; (8008d8c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	68ba      	ldr	r2, [r7, #8]
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d202      	bcs.n	8008d70 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008d6a:	4a08      	ldr	r2, [pc, #32]	; (8008d8c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	6013      	str	r3, [r2, #0]
}
 8008d70:	bf00      	nop
 8008d72:	3710      	adds	r7, #16
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}
 8008d78:	20000d58 	.word	0x20000d58
 8008d7c:	20000880 	.word	0x20000880
 8008d80:	20000d40 	.word	0x20000d40
 8008d84:	20000d10 	.word	0x20000d10
 8008d88:	20000d0c 	.word	0x20000d0c
 8008d8c:	20000d74 	.word	0x20000d74

08008d90 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b08a      	sub	sp, #40	; 0x28
 8008d94:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008d96:	2300      	movs	r3, #0
 8008d98:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008d9a:	f000 fac3 	bl	8009324 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008d9e:	4b1c      	ldr	r3, [pc, #112]	; (8008e10 <xTimerCreateTimerTask+0x80>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d021      	beq.n	8008dea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008da6:	2300      	movs	r3, #0
 8008da8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008daa:	2300      	movs	r3, #0
 8008dac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008dae:	1d3a      	adds	r2, r7, #4
 8008db0:	f107 0108 	add.w	r1, r7, #8
 8008db4:	f107 030c 	add.w	r3, r7, #12
 8008db8:	4618      	mov	r0, r3
 8008dba:	f7fe fb5f 	bl	800747c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008dbe:	6879      	ldr	r1, [r7, #4]
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	68fa      	ldr	r2, [r7, #12]
 8008dc4:	9202      	str	r2, [sp, #8]
 8008dc6:	9301      	str	r3, [sp, #4]
 8008dc8:	2302      	movs	r3, #2
 8008dca:	9300      	str	r3, [sp, #0]
 8008dcc:	2300      	movs	r3, #0
 8008dce:	460a      	mov	r2, r1
 8008dd0:	4910      	ldr	r1, [pc, #64]	; (8008e14 <xTimerCreateTimerTask+0x84>)
 8008dd2:	4811      	ldr	r0, [pc, #68]	; (8008e18 <xTimerCreateTimerTask+0x88>)
 8008dd4:	f7ff f8f4 	bl	8007fc0 <xTaskCreateStatic>
 8008dd8:	4602      	mov	r2, r0
 8008dda:	4b10      	ldr	r3, [pc, #64]	; (8008e1c <xTimerCreateTimerTask+0x8c>)
 8008ddc:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008dde:	4b0f      	ldr	r3, [pc, #60]	; (8008e1c <xTimerCreateTimerTask+0x8c>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d001      	beq.n	8008dea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008de6:	2301      	movs	r3, #1
 8008de8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d109      	bne.n	8008e04 <xTimerCreateTimerTask+0x74>
 8008df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df4:	f383 8811 	msr	BASEPRI, r3
 8008df8:	f3bf 8f6f 	isb	sy
 8008dfc:	f3bf 8f4f 	dsb	sy
 8008e00:	613b      	str	r3, [r7, #16]
 8008e02:	e7fe      	b.n	8008e02 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8008e04:	697b      	ldr	r3, [r7, #20]
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3718      	adds	r7, #24
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}
 8008e0e:	bf00      	nop
 8008e10:	20000db0 	.word	0x20000db0
 8008e14:	0800b848 	.word	0x0800b848
 8008e18:	08008f39 	.word	0x08008f39
 8008e1c:	20000db4 	.word	0x20000db4

08008e20 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b08a      	sub	sp, #40	; 0x28
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	60f8      	str	r0, [r7, #12]
 8008e28:	60b9      	str	r1, [r7, #8]
 8008e2a:	607a      	str	r2, [r7, #4]
 8008e2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d109      	bne.n	8008e4c <xTimerGenericCommand+0x2c>
 8008e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e3c:	f383 8811 	msr	BASEPRI, r3
 8008e40:	f3bf 8f6f 	isb	sy
 8008e44:	f3bf 8f4f 	dsb	sy
 8008e48:	623b      	str	r3, [r7, #32]
 8008e4a:	e7fe      	b.n	8008e4a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008e4c:	4b19      	ldr	r3, [pc, #100]	; (8008eb4 <xTimerGenericCommand+0x94>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d02a      	beq.n	8008eaa <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	2b05      	cmp	r3, #5
 8008e64:	dc18      	bgt.n	8008e98 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008e66:	f7ff feb5 	bl	8008bd4 <xTaskGetSchedulerState>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	2b02      	cmp	r3, #2
 8008e6e:	d109      	bne.n	8008e84 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008e70:	4b10      	ldr	r3, [pc, #64]	; (8008eb4 <xTimerGenericCommand+0x94>)
 8008e72:	6818      	ldr	r0, [r3, #0]
 8008e74:	f107 0110 	add.w	r1, r7, #16
 8008e78:	2300      	movs	r3, #0
 8008e7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e7c:	f7fe fcca 	bl	8007814 <xQueueGenericSend>
 8008e80:	6278      	str	r0, [r7, #36]	; 0x24
 8008e82:	e012      	b.n	8008eaa <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008e84:	4b0b      	ldr	r3, [pc, #44]	; (8008eb4 <xTimerGenericCommand+0x94>)
 8008e86:	6818      	ldr	r0, [r3, #0]
 8008e88:	f107 0110 	add.w	r1, r7, #16
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	2200      	movs	r2, #0
 8008e90:	f7fe fcc0 	bl	8007814 <xQueueGenericSend>
 8008e94:	6278      	str	r0, [r7, #36]	; 0x24
 8008e96:	e008      	b.n	8008eaa <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008e98:	4b06      	ldr	r3, [pc, #24]	; (8008eb4 <xTimerGenericCommand+0x94>)
 8008e9a:	6818      	ldr	r0, [r3, #0]
 8008e9c:	f107 0110 	add.w	r1, r7, #16
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	683a      	ldr	r2, [r7, #0]
 8008ea4:	f7fe fdb0 	bl	8007a08 <xQueueGenericSendFromISR>
 8008ea8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3728      	adds	r7, #40	; 0x28
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}
 8008eb4:	20000db0 	.word	0x20000db0

08008eb8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b088      	sub	sp, #32
 8008ebc:	af02      	add	r7, sp, #8
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008ec2:	4b1c      	ldr	r3, [pc, #112]	; (8008f34 <prvProcessExpiredTimer+0x7c>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	68db      	ldr	r3, [r3, #12]
 8008ec8:	68db      	ldr	r3, [r3, #12]
 8008eca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	3304      	adds	r3, #4
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f7fe fb77 	bl	80075c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	69db      	ldr	r3, [r3, #28]
 8008eda:	2b01      	cmp	r3, #1
 8008edc:	d121      	bne.n	8008f22 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	699a      	ldr	r2, [r3, #24]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	18d1      	adds	r1, r2, r3
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	683a      	ldr	r2, [r7, #0]
 8008eea:	6978      	ldr	r0, [r7, #20]
 8008eec:	f000 f8c8 	bl	8009080 <prvInsertTimerInActiveList>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d015      	beq.n	8008f22 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	9300      	str	r3, [sp, #0]
 8008efa:	2300      	movs	r3, #0
 8008efc:	687a      	ldr	r2, [r7, #4]
 8008efe:	2100      	movs	r1, #0
 8008f00:	6978      	ldr	r0, [r7, #20]
 8008f02:	f7ff ff8d 	bl	8008e20 <xTimerGenericCommand>
 8008f06:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d109      	bne.n	8008f22 <prvProcessExpiredTimer+0x6a>
 8008f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f12:	f383 8811 	msr	BASEPRI, r3
 8008f16:	f3bf 8f6f 	isb	sy
 8008f1a:	f3bf 8f4f 	dsb	sy
 8008f1e:	60fb      	str	r3, [r7, #12]
 8008f20:	e7fe      	b.n	8008f20 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f26:	6978      	ldr	r0, [r7, #20]
 8008f28:	4798      	blx	r3
}
 8008f2a:	bf00      	nop
 8008f2c:	3718      	adds	r7, #24
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
 8008f32:	bf00      	nop
 8008f34:	20000da8 	.word	0x20000da8

08008f38 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b084      	sub	sp, #16
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008f40:	f107 0308 	add.w	r3, r7, #8
 8008f44:	4618      	mov	r0, r3
 8008f46:	f000 f857 	bl	8008ff8 <prvGetNextExpireTime>
 8008f4a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	4619      	mov	r1, r3
 8008f50:	68f8      	ldr	r0, [r7, #12]
 8008f52:	f000 f803 	bl	8008f5c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008f56:	f000 f8d5 	bl	8009104 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008f5a:	e7f1      	b.n	8008f40 <prvTimerTask+0x8>

08008f5c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b084      	sub	sp, #16
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008f66:	f7ff fa57 	bl	8008418 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008f6a:	f107 0308 	add.w	r3, r7, #8
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f000 f866 	bl	8009040 <prvSampleTimeNow>
 8008f74:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d130      	bne.n	8008fde <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d10a      	bne.n	8008f98 <prvProcessTimerOrBlockTask+0x3c>
 8008f82:	687a      	ldr	r2, [r7, #4]
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	429a      	cmp	r2, r3
 8008f88:	d806      	bhi.n	8008f98 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008f8a:	f7ff fa53 	bl	8008434 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008f8e:	68f9      	ldr	r1, [r7, #12]
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f7ff ff91 	bl	8008eb8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008f96:	e024      	b.n	8008fe2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d008      	beq.n	8008fb0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008f9e:	4b13      	ldr	r3, [pc, #76]	; (8008fec <prvProcessTimerOrBlockTask+0x90>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	bf0c      	ite	eq
 8008fa8:	2301      	moveq	r3, #1
 8008faa:	2300      	movne	r3, #0
 8008fac:	b2db      	uxtb	r3, r3
 8008fae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008fb0:	4b0f      	ldr	r3, [pc, #60]	; (8008ff0 <prvProcessTimerOrBlockTask+0x94>)
 8008fb2:	6818      	ldr	r0, [r3, #0]
 8008fb4:	687a      	ldr	r2, [r7, #4]
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	1ad3      	subs	r3, r2, r3
 8008fba:	683a      	ldr	r2, [r7, #0]
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	f7fe ffcb 	bl	8007f58 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008fc2:	f7ff fa37 	bl	8008434 <xTaskResumeAll>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d10a      	bne.n	8008fe2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008fcc:	4b09      	ldr	r3, [pc, #36]	; (8008ff4 <prvProcessTimerOrBlockTask+0x98>)
 8008fce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fd2:	601a      	str	r2, [r3, #0]
 8008fd4:	f3bf 8f4f 	dsb	sy
 8008fd8:	f3bf 8f6f 	isb	sy
}
 8008fdc:	e001      	b.n	8008fe2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008fde:	f7ff fa29 	bl	8008434 <xTaskResumeAll>
}
 8008fe2:	bf00      	nop
 8008fe4:	3710      	adds	r7, #16
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}
 8008fea:	bf00      	nop
 8008fec:	20000dac 	.word	0x20000dac
 8008ff0:	20000db0 	.word	0x20000db0
 8008ff4:	e000ed04 	.word	0xe000ed04

08008ff8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b085      	sub	sp, #20
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009000:	4b0e      	ldr	r3, [pc, #56]	; (800903c <prvGetNextExpireTime+0x44>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	2b00      	cmp	r3, #0
 8009008:	bf0c      	ite	eq
 800900a:	2301      	moveq	r3, #1
 800900c:	2300      	movne	r3, #0
 800900e:	b2db      	uxtb	r3, r3
 8009010:	461a      	mov	r2, r3
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d105      	bne.n	800902a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800901e:	4b07      	ldr	r3, [pc, #28]	; (800903c <prvGetNextExpireTime+0x44>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	68db      	ldr	r3, [r3, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	60fb      	str	r3, [r7, #12]
 8009028:	e001      	b.n	800902e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800902a:	2300      	movs	r3, #0
 800902c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800902e:	68fb      	ldr	r3, [r7, #12]
}
 8009030:	4618      	mov	r0, r3
 8009032:	3714      	adds	r7, #20
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr
 800903c:	20000da8 	.word	0x20000da8

08009040 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b084      	sub	sp, #16
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009048:	f7ff fa90 	bl	800856c <xTaskGetTickCount>
 800904c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800904e:	4b0b      	ldr	r3, [pc, #44]	; (800907c <prvSampleTimeNow+0x3c>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	68fa      	ldr	r2, [r7, #12]
 8009054:	429a      	cmp	r2, r3
 8009056:	d205      	bcs.n	8009064 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009058:	f000 f904 	bl	8009264 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2201      	movs	r2, #1
 8009060:	601a      	str	r2, [r3, #0]
 8009062:	e002      	b.n	800906a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2200      	movs	r2, #0
 8009068:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800906a:	4a04      	ldr	r2, [pc, #16]	; (800907c <prvSampleTimeNow+0x3c>)
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009070:	68fb      	ldr	r3, [r7, #12]
}
 8009072:	4618      	mov	r0, r3
 8009074:	3710      	adds	r7, #16
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}
 800907a:	bf00      	nop
 800907c:	20000db8 	.word	0x20000db8

08009080 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b086      	sub	sp, #24
 8009084:	af00      	add	r7, sp, #0
 8009086:	60f8      	str	r0, [r7, #12]
 8009088:	60b9      	str	r1, [r7, #8]
 800908a:	607a      	str	r2, [r7, #4]
 800908c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800908e:	2300      	movs	r3, #0
 8009090:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	68ba      	ldr	r2, [r7, #8]
 8009096:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	68fa      	ldr	r2, [r7, #12]
 800909c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800909e:	68ba      	ldr	r2, [r7, #8]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	429a      	cmp	r2, r3
 80090a4:	d812      	bhi.n	80090cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090a6:	687a      	ldr	r2, [r7, #4]
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	1ad2      	subs	r2, r2, r3
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	699b      	ldr	r3, [r3, #24]
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d302      	bcc.n	80090ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80090b4:	2301      	movs	r3, #1
 80090b6:	617b      	str	r3, [r7, #20]
 80090b8:	e01b      	b.n	80090f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80090ba:	4b10      	ldr	r3, [pc, #64]	; (80090fc <prvInsertTimerInActiveList+0x7c>)
 80090bc:	681a      	ldr	r2, [r3, #0]
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	3304      	adds	r3, #4
 80090c2:	4619      	mov	r1, r3
 80090c4:	4610      	mov	r0, r2
 80090c6:	f7fe fa44 	bl	8007552 <vListInsert>
 80090ca:	e012      	b.n	80090f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80090cc:	687a      	ldr	r2, [r7, #4]
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	429a      	cmp	r2, r3
 80090d2:	d206      	bcs.n	80090e2 <prvInsertTimerInActiveList+0x62>
 80090d4:	68ba      	ldr	r2, [r7, #8]
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	429a      	cmp	r2, r3
 80090da:	d302      	bcc.n	80090e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80090dc:	2301      	movs	r3, #1
 80090de:	617b      	str	r3, [r7, #20]
 80090e0:	e007      	b.n	80090f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80090e2:	4b07      	ldr	r3, [pc, #28]	; (8009100 <prvInsertTimerInActiveList+0x80>)
 80090e4:	681a      	ldr	r2, [r3, #0]
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	3304      	adds	r3, #4
 80090ea:	4619      	mov	r1, r3
 80090ec:	4610      	mov	r0, r2
 80090ee:	f7fe fa30 	bl	8007552 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80090f2:	697b      	ldr	r3, [r7, #20]
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3718      	adds	r7, #24
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}
 80090fc:	20000dac 	.word	0x20000dac
 8009100:	20000da8 	.word	0x20000da8

08009104 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b08e      	sub	sp, #56	; 0x38
 8009108:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800910a:	e099      	b.n	8009240 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2b00      	cmp	r3, #0
 8009110:	da17      	bge.n	8009142 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009112:	1d3b      	adds	r3, r7, #4
 8009114:	3304      	adds	r3, #4
 8009116:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800911a:	2b00      	cmp	r3, #0
 800911c:	d109      	bne.n	8009132 <prvProcessReceivedCommands+0x2e>
 800911e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009122:	f383 8811 	msr	BASEPRI, r3
 8009126:	f3bf 8f6f 	isb	sy
 800912a:	f3bf 8f4f 	dsb	sy
 800912e:	61fb      	str	r3, [r7, #28]
 8009130:	e7fe      	b.n	8009130 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009138:	6850      	ldr	r0, [r2, #4]
 800913a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800913c:	6892      	ldr	r2, [r2, #8]
 800913e:	4611      	mov	r1, r2
 8009140:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2b00      	cmp	r3, #0
 8009146:	db7a      	blt.n	800923e <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800914c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800914e:	695b      	ldr	r3, [r3, #20]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d004      	beq.n	800915e <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009156:	3304      	adds	r3, #4
 8009158:	4618      	mov	r0, r3
 800915a:	f7fe fa33 	bl	80075c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800915e:	463b      	mov	r3, r7
 8009160:	4618      	mov	r0, r3
 8009162:	f7ff ff6d 	bl	8009040 <prvSampleTimeNow>
 8009166:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2b09      	cmp	r3, #9
 800916c:	d868      	bhi.n	8009240 <prvProcessReceivedCommands+0x13c>
 800916e:	a201      	add	r2, pc, #4	; (adr r2, 8009174 <prvProcessReceivedCommands+0x70>)
 8009170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009174:	0800919d 	.word	0x0800919d
 8009178:	0800919d 	.word	0x0800919d
 800917c:	0800919d 	.word	0x0800919d
 8009180:	08009241 	.word	0x08009241
 8009184:	080091f7 	.word	0x080091f7
 8009188:	0800922d 	.word	0x0800922d
 800918c:	0800919d 	.word	0x0800919d
 8009190:	0800919d 	.word	0x0800919d
 8009194:	08009241 	.word	0x08009241
 8009198:	080091f7 	.word	0x080091f7
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800919c:	68ba      	ldr	r2, [r7, #8]
 800919e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a0:	699b      	ldr	r3, [r3, #24]
 80091a2:	18d1      	adds	r1, r2, r3
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091aa:	f7ff ff69 	bl	8009080 <prvInsertTimerInActiveList>
 80091ae:	4603      	mov	r3, r0
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d045      	beq.n	8009240 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80091b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091ba:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80091bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091be:	69db      	ldr	r3, [r3, #28]
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	d13d      	bne.n	8009240 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80091c4:	68ba      	ldr	r2, [r7, #8]
 80091c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c8:	699b      	ldr	r3, [r3, #24]
 80091ca:	441a      	add	r2, r3
 80091cc:	2300      	movs	r3, #0
 80091ce:	9300      	str	r3, [sp, #0]
 80091d0:	2300      	movs	r3, #0
 80091d2:	2100      	movs	r1, #0
 80091d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091d6:	f7ff fe23 	bl	8008e20 <xTimerGenericCommand>
 80091da:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80091dc:	6a3b      	ldr	r3, [r7, #32]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d12e      	bne.n	8009240 <prvProcessReceivedCommands+0x13c>
 80091e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e6:	f383 8811 	msr	BASEPRI, r3
 80091ea:	f3bf 8f6f 	isb	sy
 80091ee:	f3bf 8f4f 	dsb	sy
 80091f2:	61bb      	str	r3, [r7, #24]
 80091f4:	e7fe      	b.n	80091f4 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80091f6:	68ba      	ldr	r2, [r7, #8]
 80091f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091fa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80091fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091fe:	699b      	ldr	r3, [r3, #24]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d109      	bne.n	8009218 <prvProcessReceivedCommands+0x114>
 8009204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009208:	f383 8811 	msr	BASEPRI, r3
 800920c:	f3bf 8f6f 	isb	sy
 8009210:	f3bf 8f4f 	dsb	sy
 8009214:	617b      	str	r3, [r7, #20]
 8009216:	e7fe      	b.n	8009216 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800921a:	699a      	ldr	r2, [r3, #24]
 800921c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800921e:	18d1      	adds	r1, r2, r3
 8009220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009224:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009226:	f7ff ff2b 	bl	8009080 <prvInsertTimerInActiveList>
					break;
 800922a:	e009      	b.n	8009240 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800922c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800922e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009232:	2b00      	cmp	r3, #0
 8009234:	d104      	bne.n	8009240 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8009236:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009238:	f000 fbb4 	bl	80099a4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800923c:	e000      	b.n	8009240 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800923e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009240:	4b07      	ldr	r3, [pc, #28]	; (8009260 <prvProcessReceivedCommands+0x15c>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	1d39      	adds	r1, r7, #4
 8009246:	2200      	movs	r2, #0
 8009248:	4618      	mov	r0, r3
 800924a:	f7fe fc71 	bl	8007b30 <xQueueReceive>
 800924e:	4603      	mov	r3, r0
 8009250:	2b00      	cmp	r3, #0
 8009252:	f47f af5b 	bne.w	800910c <prvProcessReceivedCommands+0x8>
	}
}
 8009256:	bf00      	nop
 8009258:	3730      	adds	r7, #48	; 0x30
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
 800925e:	bf00      	nop
 8009260:	20000db0 	.word	0x20000db0

08009264 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b088      	sub	sp, #32
 8009268:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800926a:	e044      	b.n	80092f6 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800926c:	4b2b      	ldr	r3, [pc, #172]	; (800931c <prvSwitchTimerLists+0xb8>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	68db      	ldr	r3, [r3, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009276:	4b29      	ldr	r3, [pc, #164]	; (800931c <prvSwitchTimerLists+0xb8>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	68db      	ldr	r3, [r3, #12]
 800927c:	68db      	ldr	r3, [r3, #12]
 800927e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	3304      	adds	r3, #4
 8009284:	4618      	mov	r0, r3
 8009286:	f7fe f99d 	bl	80075c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800928e:	68f8      	ldr	r0, [r7, #12]
 8009290:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	69db      	ldr	r3, [r3, #28]
 8009296:	2b01      	cmp	r3, #1
 8009298:	d12d      	bne.n	80092f6 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	699b      	ldr	r3, [r3, #24]
 800929e:	693a      	ldr	r2, [r7, #16]
 80092a0:	4413      	add	r3, r2
 80092a2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80092a4:	68ba      	ldr	r2, [r7, #8]
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d90e      	bls.n	80092ca <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	68ba      	ldr	r2, [r7, #8]
 80092b0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	68fa      	ldr	r2, [r7, #12]
 80092b6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80092b8:	4b18      	ldr	r3, [pc, #96]	; (800931c <prvSwitchTimerLists+0xb8>)
 80092ba:	681a      	ldr	r2, [r3, #0]
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	3304      	adds	r3, #4
 80092c0:	4619      	mov	r1, r3
 80092c2:	4610      	mov	r0, r2
 80092c4:	f7fe f945 	bl	8007552 <vListInsert>
 80092c8:	e015      	b.n	80092f6 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80092ca:	2300      	movs	r3, #0
 80092cc:	9300      	str	r3, [sp, #0]
 80092ce:	2300      	movs	r3, #0
 80092d0:	693a      	ldr	r2, [r7, #16]
 80092d2:	2100      	movs	r1, #0
 80092d4:	68f8      	ldr	r0, [r7, #12]
 80092d6:	f7ff fda3 	bl	8008e20 <xTimerGenericCommand>
 80092da:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d109      	bne.n	80092f6 <prvSwitchTimerLists+0x92>
 80092e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e6:	f383 8811 	msr	BASEPRI, r3
 80092ea:	f3bf 8f6f 	isb	sy
 80092ee:	f3bf 8f4f 	dsb	sy
 80092f2:	603b      	str	r3, [r7, #0]
 80092f4:	e7fe      	b.n	80092f4 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80092f6:	4b09      	ldr	r3, [pc, #36]	; (800931c <prvSwitchTimerLists+0xb8>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d1b5      	bne.n	800926c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009300:	4b06      	ldr	r3, [pc, #24]	; (800931c <prvSwitchTimerLists+0xb8>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009306:	4b06      	ldr	r3, [pc, #24]	; (8009320 <prvSwitchTimerLists+0xbc>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	4a04      	ldr	r2, [pc, #16]	; (800931c <prvSwitchTimerLists+0xb8>)
 800930c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800930e:	4a04      	ldr	r2, [pc, #16]	; (8009320 <prvSwitchTimerLists+0xbc>)
 8009310:	697b      	ldr	r3, [r7, #20]
 8009312:	6013      	str	r3, [r2, #0]
}
 8009314:	bf00      	nop
 8009316:	3718      	adds	r7, #24
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}
 800931c:	20000da8 	.word	0x20000da8
 8009320:	20000dac 	.word	0x20000dac

08009324 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b082      	sub	sp, #8
 8009328:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800932a:	f000 f95f 	bl	80095ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800932e:	4b15      	ldr	r3, [pc, #84]	; (8009384 <prvCheckForValidListAndQueue+0x60>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d120      	bne.n	8009378 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009336:	4814      	ldr	r0, [pc, #80]	; (8009388 <prvCheckForValidListAndQueue+0x64>)
 8009338:	f7fe f8ba 	bl	80074b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800933c:	4813      	ldr	r0, [pc, #76]	; (800938c <prvCheckForValidListAndQueue+0x68>)
 800933e:	f7fe f8b7 	bl	80074b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009342:	4b13      	ldr	r3, [pc, #76]	; (8009390 <prvCheckForValidListAndQueue+0x6c>)
 8009344:	4a10      	ldr	r2, [pc, #64]	; (8009388 <prvCheckForValidListAndQueue+0x64>)
 8009346:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009348:	4b12      	ldr	r3, [pc, #72]	; (8009394 <prvCheckForValidListAndQueue+0x70>)
 800934a:	4a10      	ldr	r2, [pc, #64]	; (800938c <prvCheckForValidListAndQueue+0x68>)
 800934c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800934e:	2300      	movs	r3, #0
 8009350:	9300      	str	r3, [sp, #0]
 8009352:	4b11      	ldr	r3, [pc, #68]	; (8009398 <prvCheckForValidListAndQueue+0x74>)
 8009354:	4a11      	ldr	r2, [pc, #68]	; (800939c <prvCheckForValidListAndQueue+0x78>)
 8009356:	2110      	movs	r1, #16
 8009358:	200a      	movs	r0, #10
 800935a:	f7fe f9c5 	bl	80076e8 <xQueueGenericCreateStatic>
 800935e:	4602      	mov	r2, r0
 8009360:	4b08      	ldr	r3, [pc, #32]	; (8009384 <prvCheckForValidListAndQueue+0x60>)
 8009362:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009364:	4b07      	ldr	r3, [pc, #28]	; (8009384 <prvCheckForValidListAndQueue+0x60>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d005      	beq.n	8009378 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800936c:	4b05      	ldr	r3, [pc, #20]	; (8009384 <prvCheckForValidListAndQueue+0x60>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	490b      	ldr	r1, [pc, #44]	; (80093a0 <prvCheckForValidListAndQueue+0x7c>)
 8009372:	4618      	mov	r0, r3
 8009374:	f7fe fdc8 	bl	8007f08 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009378:	f000 f966 	bl	8009648 <vPortExitCritical>
}
 800937c:	bf00      	nop
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}
 8009382:	bf00      	nop
 8009384:	20000db0 	.word	0x20000db0
 8009388:	20000d80 	.word	0x20000d80
 800938c:	20000d94 	.word	0x20000d94
 8009390:	20000da8 	.word	0x20000da8
 8009394:	20000dac 	.word	0x20000dac
 8009398:	20000e5c 	.word	0x20000e5c
 800939c:	20000dbc 	.word	0x20000dbc
 80093a0:	0800b850 	.word	0x0800b850

080093a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80093a4:	b480      	push	{r7}
 80093a6:	b085      	sub	sp, #20
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	60f8      	str	r0, [r7, #12]
 80093ac:	60b9      	str	r1, [r7, #8]
 80093ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	3b04      	subs	r3, #4
 80093b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80093bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	3b04      	subs	r3, #4
 80093c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	f023 0201 	bic.w	r2, r3, #1
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	3b04      	subs	r3, #4
 80093d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80093d4:	4a0c      	ldr	r2, [pc, #48]	; (8009408 <pxPortInitialiseStack+0x64>)
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	3b14      	subs	r3, #20
 80093de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80093e0:	687a      	ldr	r2, [r7, #4]
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	3b04      	subs	r3, #4
 80093ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f06f 0202 	mvn.w	r2, #2
 80093f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	3b20      	subs	r3, #32
 80093f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80093fa:	68fb      	ldr	r3, [r7, #12]
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3714      	adds	r7, #20
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr
 8009408:	0800940d 	.word	0x0800940d

0800940c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800940c:	b480      	push	{r7}
 800940e:	b085      	sub	sp, #20
 8009410:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009412:	2300      	movs	r3, #0
 8009414:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009416:	4b11      	ldr	r3, [pc, #68]	; (800945c <prvTaskExitError+0x50>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800941e:	d009      	beq.n	8009434 <prvTaskExitError+0x28>
 8009420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009424:	f383 8811 	msr	BASEPRI, r3
 8009428:	f3bf 8f6f 	isb	sy
 800942c:	f3bf 8f4f 	dsb	sy
 8009430:	60fb      	str	r3, [r7, #12]
 8009432:	e7fe      	b.n	8009432 <prvTaskExitError+0x26>
 8009434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009438:	f383 8811 	msr	BASEPRI, r3
 800943c:	f3bf 8f6f 	isb	sy
 8009440:	f3bf 8f4f 	dsb	sy
 8009444:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009446:	bf00      	nop
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d0fc      	beq.n	8009448 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800944e:	bf00      	nop
 8009450:	3714      	adds	r7, #20
 8009452:	46bd      	mov	sp, r7
 8009454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009458:	4770      	bx	lr
 800945a:	bf00      	nop
 800945c:	20000118 	.word	0x20000118

08009460 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009460:	4b07      	ldr	r3, [pc, #28]	; (8009480 <pxCurrentTCBConst2>)
 8009462:	6819      	ldr	r1, [r3, #0]
 8009464:	6808      	ldr	r0, [r1, #0]
 8009466:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800946a:	f380 8809 	msr	PSP, r0
 800946e:	f3bf 8f6f 	isb	sy
 8009472:	f04f 0000 	mov.w	r0, #0
 8009476:	f380 8811 	msr	BASEPRI, r0
 800947a:	4770      	bx	lr
 800947c:	f3af 8000 	nop.w

08009480 <pxCurrentTCBConst2>:
 8009480:	20000880 	.word	0x20000880
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009484:	bf00      	nop
 8009486:	bf00      	nop

08009488 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009488:	4808      	ldr	r0, [pc, #32]	; (80094ac <prvPortStartFirstTask+0x24>)
 800948a:	6800      	ldr	r0, [r0, #0]
 800948c:	6800      	ldr	r0, [r0, #0]
 800948e:	f380 8808 	msr	MSP, r0
 8009492:	f04f 0000 	mov.w	r0, #0
 8009496:	f380 8814 	msr	CONTROL, r0
 800949a:	b662      	cpsie	i
 800949c:	b661      	cpsie	f
 800949e:	f3bf 8f4f 	dsb	sy
 80094a2:	f3bf 8f6f 	isb	sy
 80094a6:	df00      	svc	0
 80094a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80094aa:	bf00      	nop
 80094ac:	e000ed08 	.word	0xe000ed08

080094b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b086      	sub	sp, #24
 80094b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80094b6:	4b44      	ldr	r3, [pc, #272]	; (80095c8 <xPortStartScheduler+0x118>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	4a44      	ldr	r2, [pc, #272]	; (80095cc <xPortStartScheduler+0x11c>)
 80094bc:	4293      	cmp	r3, r2
 80094be:	d109      	bne.n	80094d4 <xPortStartScheduler+0x24>
 80094c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c4:	f383 8811 	msr	BASEPRI, r3
 80094c8:	f3bf 8f6f 	isb	sy
 80094cc:	f3bf 8f4f 	dsb	sy
 80094d0:	613b      	str	r3, [r7, #16]
 80094d2:	e7fe      	b.n	80094d2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80094d4:	4b3c      	ldr	r3, [pc, #240]	; (80095c8 <xPortStartScheduler+0x118>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	4a3d      	ldr	r2, [pc, #244]	; (80095d0 <xPortStartScheduler+0x120>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d109      	bne.n	80094f2 <xPortStartScheduler+0x42>
 80094de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e2:	f383 8811 	msr	BASEPRI, r3
 80094e6:	f3bf 8f6f 	isb	sy
 80094ea:	f3bf 8f4f 	dsb	sy
 80094ee:	60fb      	str	r3, [r7, #12]
 80094f0:	e7fe      	b.n	80094f0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80094f2:	4b38      	ldr	r3, [pc, #224]	; (80095d4 <xPortStartScheduler+0x124>)
 80094f4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	781b      	ldrb	r3, [r3, #0]
 80094fa:	b2db      	uxtb	r3, r3
 80094fc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	22ff      	movs	r2, #255	; 0xff
 8009502:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009504:	697b      	ldr	r3, [r7, #20]
 8009506:	781b      	ldrb	r3, [r3, #0]
 8009508:	b2db      	uxtb	r3, r3
 800950a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800950c:	78fb      	ldrb	r3, [r7, #3]
 800950e:	b2db      	uxtb	r3, r3
 8009510:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009514:	b2da      	uxtb	r2, r3
 8009516:	4b30      	ldr	r3, [pc, #192]	; (80095d8 <xPortStartScheduler+0x128>)
 8009518:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800951a:	4b30      	ldr	r3, [pc, #192]	; (80095dc <xPortStartScheduler+0x12c>)
 800951c:	2207      	movs	r2, #7
 800951e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009520:	e009      	b.n	8009536 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8009522:	4b2e      	ldr	r3, [pc, #184]	; (80095dc <xPortStartScheduler+0x12c>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	3b01      	subs	r3, #1
 8009528:	4a2c      	ldr	r2, [pc, #176]	; (80095dc <xPortStartScheduler+0x12c>)
 800952a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800952c:	78fb      	ldrb	r3, [r7, #3]
 800952e:	b2db      	uxtb	r3, r3
 8009530:	005b      	lsls	r3, r3, #1
 8009532:	b2db      	uxtb	r3, r3
 8009534:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009536:	78fb      	ldrb	r3, [r7, #3]
 8009538:	b2db      	uxtb	r3, r3
 800953a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800953e:	2b80      	cmp	r3, #128	; 0x80
 8009540:	d0ef      	beq.n	8009522 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009542:	4b26      	ldr	r3, [pc, #152]	; (80095dc <xPortStartScheduler+0x12c>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f1c3 0307 	rsb	r3, r3, #7
 800954a:	2b04      	cmp	r3, #4
 800954c:	d009      	beq.n	8009562 <xPortStartScheduler+0xb2>
 800954e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009552:	f383 8811 	msr	BASEPRI, r3
 8009556:	f3bf 8f6f 	isb	sy
 800955a:	f3bf 8f4f 	dsb	sy
 800955e:	60bb      	str	r3, [r7, #8]
 8009560:	e7fe      	b.n	8009560 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009562:	4b1e      	ldr	r3, [pc, #120]	; (80095dc <xPortStartScheduler+0x12c>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	021b      	lsls	r3, r3, #8
 8009568:	4a1c      	ldr	r2, [pc, #112]	; (80095dc <xPortStartScheduler+0x12c>)
 800956a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800956c:	4b1b      	ldr	r3, [pc, #108]	; (80095dc <xPortStartScheduler+0x12c>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009574:	4a19      	ldr	r2, [pc, #100]	; (80095dc <xPortStartScheduler+0x12c>)
 8009576:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	b2da      	uxtb	r2, r3
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009580:	4b17      	ldr	r3, [pc, #92]	; (80095e0 <xPortStartScheduler+0x130>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4a16      	ldr	r2, [pc, #88]	; (80095e0 <xPortStartScheduler+0x130>)
 8009586:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800958a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800958c:	4b14      	ldr	r3, [pc, #80]	; (80095e0 <xPortStartScheduler+0x130>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	4a13      	ldr	r2, [pc, #76]	; (80095e0 <xPortStartScheduler+0x130>)
 8009592:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009596:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009598:	f000 f8d6 	bl	8009748 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800959c:	4b11      	ldr	r3, [pc, #68]	; (80095e4 <xPortStartScheduler+0x134>)
 800959e:	2200      	movs	r2, #0
 80095a0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80095a2:	f000 f8f5 	bl	8009790 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80095a6:	4b10      	ldr	r3, [pc, #64]	; (80095e8 <xPortStartScheduler+0x138>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	4a0f      	ldr	r2, [pc, #60]	; (80095e8 <xPortStartScheduler+0x138>)
 80095ac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80095b0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80095b2:	f7ff ff69 	bl	8009488 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80095b6:	f7ff f8a7 	bl	8008708 <vTaskSwitchContext>
	prvTaskExitError();
 80095ba:	f7ff ff27 	bl	800940c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80095be:	2300      	movs	r3, #0
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3718      	adds	r7, #24
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}
 80095c8:	e000ed00 	.word	0xe000ed00
 80095cc:	410fc271 	.word	0x410fc271
 80095d0:	410fc270 	.word	0x410fc270
 80095d4:	e000e400 	.word	0xe000e400
 80095d8:	20000eac 	.word	0x20000eac
 80095dc:	20000eb0 	.word	0x20000eb0
 80095e0:	e000ed20 	.word	0xe000ed20
 80095e4:	20000118 	.word	0x20000118
 80095e8:	e000ef34 	.word	0xe000ef34

080095ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80095ec:	b480      	push	{r7}
 80095ee:	b083      	sub	sp, #12
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f6:	f383 8811 	msr	BASEPRI, r3
 80095fa:	f3bf 8f6f 	isb	sy
 80095fe:	f3bf 8f4f 	dsb	sy
 8009602:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009604:	4b0e      	ldr	r3, [pc, #56]	; (8009640 <vPortEnterCritical+0x54>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	3301      	adds	r3, #1
 800960a:	4a0d      	ldr	r2, [pc, #52]	; (8009640 <vPortEnterCritical+0x54>)
 800960c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800960e:	4b0c      	ldr	r3, [pc, #48]	; (8009640 <vPortEnterCritical+0x54>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	2b01      	cmp	r3, #1
 8009614:	d10e      	bne.n	8009634 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009616:	4b0b      	ldr	r3, [pc, #44]	; (8009644 <vPortEnterCritical+0x58>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	b2db      	uxtb	r3, r3
 800961c:	2b00      	cmp	r3, #0
 800961e:	d009      	beq.n	8009634 <vPortEnterCritical+0x48>
 8009620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009624:	f383 8811 	msr	BASEPRI, r3
 8009628:	f3bf 8f6f 	isb	sy
 800962c:	f3bf 8f4f 	dsb	sy
 8009630:	603b      	str	r3, [r7, #0]
 8009632:	e7fe      	b.n	8009632 <vPortEnterCritical+0x46>
	}
}
 8009634:	bf00      	nop
 8009636:	370c      	adds	r7, #12
 8009638:	46bd      	mov	sp, r7
 800963a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963e:	4770      	bx	lr
 8009640:	20000118 	.word	0x20000118
 8009644:	e000ed04 	.word	0xe000ed04

08009648 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009648:	b480      	push	{r7}
 800964a:	b083      	sub	sp, #12
 800964c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800964e:	4b11      	ldr	r3, [pc, #68]	; (8009694 <vPortExitCritical+0x4c>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d109      	bne.n	800966a <vPortExitCritical+0x22>
 8009656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800965a:	f383 8811 	msr	BASEPRI, r3
 800965e:	f3bf 8f6f 	isb	sy
 8009662:	f3bf 8f4f 	dsb	sy
 8009666:	607b      	str	r3, [r7, #4]
 8009668:	e7fe      	b.n	8009668 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800966a:	4b0a      	ldr	r3, [pc, #40]	; (8009694 <vPortExitCritical+0x4c>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	3b01      	subs	r3, #1
 8009670:	4a08      	ldr	r2, [pc, #32]	; (8009694 <vPortExitCritical+0x4c>)
 8009672:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009674:	4b07      	ldr	r3, [pc, #28]	; (8009694 <vPortExitCritical+0x4c>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d104      	bne.n	8009686 <vPortExitCritical+0x3e>
 800967c:	2300      	movs	r3, #0
 800967e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009686:	bf00      	nop
 8009688:	370c      	adds	r7, #12
 800968a:	46bd      	mov	sp, r7
 800968c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009690:	4770      	bx	lr
 8009692:	bf00      	nop
 8009694:	20000118 	.word	0x20000118
	...

080096a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80096a0:	f3ef 8009 	mrs	r0, PSP
 80096a4:	f3bf 8f6f 	isb	sy
 80096a8:	4b15      	ldr	r3, [pc, #84]	; (8009700 <pxCurrentTCBConst>)
 80096aa:	681a      	ldr	r2, [r3, #0]
 80096ac:	f01e 0f10 	tst.w	lr, #16
 80096b0:	bf08      	it	eq
 80096b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80096b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096ba:	6010      	str	r0, [r2, #0]
 80096bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80096c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80096c4:	f380 8811 	msr	BASEPRI, r0
 80096c8:	f3bf 8f4f 	dsb	sy
 80096cc:	f3bf 8f6f 	isb	sy
 80096d0:	f7ff f81a 	bl	8008708 <vTaskSwitchContext>
 80096d4:	f04f 0000 	mov.w	r0, #0
 80096d8:	f380 8811 	msr	BASEPRI, r0
 80096dc:	bc09      	pop	{r0, r3}
 80096de:	6819      	ldr	r1, [r3, #0]
 80096e0:	6808      	ldr	r0, [r1, #0]
 80096e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096e6:	f01e 0f10 	tst.w	lr, #16
 80096ea:	bf08      	it	eq
 80096ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80096f0:	f380 8809 	msr	PSP, r0
 80096f4:	f3bf 8f6f 	isb	sy
 80096f8:	4770      	bx	lr
 80096fa:	bf00      	nop
 80096fc:	f3af 8000 	nop.w

08009700 <pxCurrentTCBConst>:
 8009700:	20000880 	.word	0x20000880
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009704:	bf00      	nop
 8009706:	bf00      	nop

08009708 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b082      	sub	sp, #8
 800970c:	af00      	add	r7, sp, #0
	__asm volatile
 800970e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009712:	f383 8811 	msr	BASEPRI, r3
 8009716:	f3bf 8f6f 	isb	sy
 800971a:	f3bf 8f4f 	dsb	sy
 800971e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009720:	f7fe ff34 	bl	800858c <xTaskIncrementTick>
 8009724:	4603      	mov	r3, r0
 8009726:	2b00      	cmp	r3, #0
 8009728:	d003      	beq.n	8009732 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800972a:	4b06      	ldr	r3, [pc, #24]	; (8009744 <xPortSysTickHandler+0x3c>)
 800972c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009730:	601a      	str	r2, [r3, #0]
 8009732:	2300      	movs	r3, #0
 8009734:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800973c:	bf00      	nop
 800973e:	3708      	adds	r7, #8
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}
 8009744:	e000ed04 	.word	0xe000ed04

08009748 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009748:	b480      	push	{r7}
 800974a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800974c:	4b0b      	ldr	r3, [pc, #44]	; (800977c <vPortSetupTimerInterrupt+0x34>)
 800974e:	2200      	movs	r2, #0
 8009750:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009752:	4b0b      	ldr	r3, [pc, #44]	; (8009780 <vPortSetupTimerInterrupt+0x38>)
 8009754:	2200      	movs	r2, #0
 8009756:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009758:	4b0a      	ldr	r3, [pc, #40]	; (8009784 <vPortSetupTimerInterrupt+0x3c>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4a0a      	ldr	r2, [pc, #40]	; (8009788 <vPortSetupTimerInterrupt+0x40>)
 800975e:	fba2 2303 	umull	r2, r3, r2, r3
 8009762:	099b      	lsrs	r3, r3, #6
 8009764:	4a09      	ldr	r2, [pc, #36]	; (800978c <vPortSetupTimerInterrupt+0x44>)
 8009766:	3b01      	subs	r3, #1
 8009768:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800976a:	4b04      	ldr	r3, [pc, #16]	; (800977c <vPortSetupTimerInterrupt+0x34>)
 800976c:	2207      	movs	r2, #7
 800976e:	601a      	str	r2, [r3, #0]
}
 8009770:	bf00      	nop
 8009772:	46bd      	mov	sp, r7
 8009774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009778:	4770      	bx	lr
 800977a:	bf00      	nop
 800977c:	e000e010 	.word	0xe000e010
 8009780:	e000e018 	.word	0xe000e018
 8009784:	2000011c 	.word	0x2000011c
 8009788:	10624dd3 	.word	0x10624dd3
 800978c:	e000e014 	.word	0xe000e014

08009790 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009790:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80097a0 <vPortEnableVFP+0x10>
 8009794:	6801      	ldr	r1, [r0, #0]
 8009796:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800979a:	6001      	str	r1, [r0, #0]
 800979c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800979e:	bf00      	nop
 80097a0:	e000ed88 	.word	0xe000ed88

080097a4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80097a4:	b480      	push	{r7}
 80097a6:	b085      	sub	sp, #20
 80097a8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80097aa:	f3ef 8305 	mrs	r3, IPSR
 80097ae:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2b0f      	cmp	r3, #15
 80097b4:	d913      	bls.n	80097de <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80097b6:	4a16      	ldr	r2, [pc, #88]	; (8009810 <vPortValidateInterruptPriority+0x6c>)
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	4413      	add	r3, r2
 80097bc:	781b      	ldrb	r3, [r3, #0]
 80097be:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80097c0:	4b14      	ldr	r3, [pc, #80]	; (8009814 <vPortValidateInterruptPriority+0x70>)
 80097c2:	781b      	ldrb	r3, [r3, #0]
 80097c4:	7afa      	ldrb	r2, [r7, #11]
 80097c6:	429a      	cmp	r2, r3
 80097c8:	d209      	bcs.n	80097de <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80097ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ce:	f383 8811 	msr	BASEPRI, r3
 80097d2:	f3bf 8f6f 	isb	sy
 80097d6:	f3bf 8f4f 	dsb	sy
 80097da:	607b      	str	r3, [r7, #4]
 80097dc:	e7fe      	b.n	80097dc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80097de:	4b0e      	ldr	r3, [pc, #56]	; (8009818 <vPortValidateInterruptPriority+0x74>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80097e6:	4b0d      	ldr	r3, [pc, #52]	; (800981c <vPortValidateInterruptPriority+0x78>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	429a      	cmp	r2, r3
 80097ec:	d909      	bls.n	8009802 <vPortValidateInterruptPriority+0x5e>
 80097ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f2:	f383 8811 	msr	BASEPRI, r3
 80097f6:	f3bf 8f6f 	isb	sy
 80097fa:	f3bf 8f4f 	dsb	sy
 80097fe:	603b      	str	r3, [r7, #0]
 8009800:	e7fe      	b.n	8009800 <vPortValidateInterruptPriority+0x5c>
	}
 8009802:	bf00      	nop
 8009804:	3714      	adds	r7, #20
 8009806:	46bd      	mov	sp, r7
 8009808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980c:	4770      	bx	lr
 800980e:	bf00      	nop
 8009810:	e000e3f0 	.word	0xe000e3f0
 8009814:	20000eac 	.word	0x20000eac
 8009818:	e000ed0c 	.word	0xe000ed0c
 800981c:	20000eb0 	.word	0x20000eb0

08009820 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b08a      	sub	sp, #40	; 0x28
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009828:	2300      	movs	r3, #0
 800982a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800982c:	f7fe fdf4 	bl	8008418 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009830:	4b57      	ldr	r3, [pc, #348]	; (8009990 <pvPortMalloc+0x170>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d101      	bne.n	800983c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009838:	f000 f90c 	bl	8009a54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800983c:	4b55      	ldr	r3, [pc, #340]	; (8009994 <pvPortMalloc+0x174>)
 800983e:	681a      	ldr	r2, [r3, #0]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	4013      	ands	r3, r2
 8009844:	2b00      	cmp	r3, #0
 8009846:	f040 808c 	bne.w	8009962 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d01c      	beq.n	800988a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009850:	2208      	movs	r2, #8
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	4413      	add	r3, r2
 8009856:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f003 0307 	and.w	r3, r3, #7
 800985e:	2b00      	cmp	r3, #0
 8009860:	d013      	beq.n	800988a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f023 0307 	bic.w	r3, r3, #7
 8009868:	3308      	adds	r3, #8
 800986a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f003 0307 	and.w	r3, r3, #7
 8009872:	2b00      	cmp	r3, #0
 8009874:	d009      	beq.n	800988a <pvPortMalloc+0x6a>
 8009876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800987a:	f383 8811 	msr	BASEPRI, r3
 800987e:	f3bf 8f6f 	isb	sy
 8009882:	f3bf 8f4f 	dsb	sy
 8009886:	617b      	str	r3, [r7, #20]
 8009888:	e7fe      	b.n	8009888 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d068      	beq.n	8009962 <pvPortMalloc+0x142>
 8009890:	4b41      	ldr	r3, [pc, #260]	; (8009998 <pvPortMalloc+0x178>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	687a      	ldr	r2, [r7, #4]
 8009896:	429a      	cmp	r2, r3
 8009898:	d863      	bhi.n	8009962 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800989a:	4b40      	ldr	r3, [pc, #256]	; (800999c <pvPortMalloc+0x17c>)
 800989c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800989e:	4b3f      	ldr	r3, [pc, #252]	; (800999c <pvPortMalloc+0x17c>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80098a4:	e004      	b.n	80098b0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80098a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80098aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80098b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b2:	685b      	ldr	r3, [r3, #4]
 80098b4:	687a      	ldr	r2, [r7, #4]
 80098b6:	429a      	cmp	r2, r3
 80098b8:	d903      	bls.n	80098c2 <pvPortMalloc+0xa2>
 80098ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d1f1      	bne.n	80098a6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80098c2:	4b33      	ldr	r3, [pc, #204]	; (8009990 <pvPortMalloc+0x170>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098c8:	429a      	cmp	r2, r3
 80098ca:	d04a      	beq.n	8009962 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80098cc:	6a3b      	ldr	r3, [r7, #32]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	2208      	movs	r2, #8
 80098d2:	4413      	add	r3, r2
 80098d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80098d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d8:	681a      	ldr	r2, [r3, #0]
 80098da:	6a3b      	ldr	r3, [r7, #32]
 80098dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80098de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e0:	685a      	ldr	r2, [r3, #4]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	1ad2      	subs	r2, r2, r3
 80098e6:	2308      	movs	r3, #8
 80098e8:	005b      	lsls	r3, r3, #1
 80098ea:	429a      	cmp	r2, r3
 80098ec:	d91e      	bls.n	800992c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80098ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	4413      	add	r3, r2
 80098f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80098f6:	69bb      	ldr	r3, [r7, #24]
 80098f8:	f003 0307 	and.w	r3, r3, #7
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d009      	beq.n	8009914 <pvPortMalloc+0xf4>
 8009900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009904:	f383 8811 	msr	BASEPRI, r3
 8009908:	f3bf 8f6f 	isb	sy
 800990c:	f3bf 8f4f 	dsb	sy
 8009910:	613b      	str	r3, [r7, #16]
 8009912:	e7fe      	b.n	8009912 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009916:	685a      	ldr	r2, [r3, #4]
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	1ad2      	subs	r2, r2, r3
 800991c:	69bb      	ldr	r3, [r7, #24]
 800991e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009922:	687a      	ldr	r2, [r7, #4]
 8009924:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009926:	69b8      	ldr	r0, [r7, #24]
 8009928:	f000 f8f6 	bl	8009b18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800992c:	4b1a      	ldr	r3, [pc, #104]	; (8009998 <pvPortMalloc+0x178>)
 800992e:	681a      	ldr	r2, [r3, #0]
 8009930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009932:	685b      	ldr	r3, [r3, #4]
 8009934:	1ad3      	subs	r3, r2, r3
 8009936:	4a18      	ldr	r2, [pc, #96]	; (8009998 <pvPortMalloc+0x178>)
 8009938:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800993a:	4b17      	ldr	r3, [pc, #92]	; (8009998 <pvPortMalloc+0x178>)
 800993c:	681a      	ldr	r2, [r3, #0]
 800993e:	4b18      	ldr	r3, [pc, #96]	; (80099a0 <pvPortMalloc+0x180>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	429a      	cmp	r2, r3
 8009944:	d203      	bcs.n	800994e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009946:	4b14      	ldr	r3, [pc, #80]	; (8009998 <pvPortMalloc+0x178>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	4a15      	ldr	r2, [pc, #84]	; (80099a0 <pvPortMalloc+0x180>)
 800994c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800994e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009950:	685a      	ldr	r2, [r3, #4]
 8009952:	4b10      	ldr	r3, [pc, #64]	; (8009994 <pvPortMalloc+0x174>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	431a      	orrs	r2, r3
 8009958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800995a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800995c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800995e:	2200      	movs	r2, #0
 8009960:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009962:	f7fe fd67 	bl	8008434 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009966:	69fb      	ldr	r3, [r7, #28]
 8009968:	f003 0307 	and.w	r3, r3, #7
 800996c:	2b00      	cmp	r3, #0
 800996e:	d009      	beq.n	8009984 <pvPortMalloc+0x164>
 8009970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009974:	f383 8811 	msr	BASEPRI, r3
 8009978:	f3bf 8f6f 	isb	sy
 800997c:	f3bf 8f4f 	dsb	sy
 8009980:	60fb      	str	r3, [r7, #12]
 8009982:	e7fe      	b.n	8009982 <pvPortMalloc+0x162>
	return pvReturn;
 8009984:	69fb      	ldr	r3, [r7, #28]
}
 8009986:	4618      	mov	r0, r3
 8009988:	3728      	adds	r7, #40	; 0x28
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}
 800998e:	bf00      	nop
 8009990:	20001abc 	.word	0x20001abc
 8009994:	20001ac8 	.word	0x20001ac8
 8009998:	20001ac0 	.word	0x20001ac0
 800999c:	20001ab4 	.word	0x20001ab4
 80099a0:	20001ac4 	.word	0x20001ac4

080099a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b086      	sub	sp, #24
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d046      	beq.n	8009a44 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80099b6:	2308      	movs	r3, #8
 80099b8:	425b      	negs	r3, r3
 80099ba:	697a      	ldr	r2, [r7, #20]
 80099bc:	4413      	add	r3, r2
 80099be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	685a      	ldr	r2, [r3, #4]
 80099c8:	4b20      	ldr	r3, [pc, #128]	; (8009a4c <vPortFree+0xa8>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	4013      	ands	r3, r2
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d109      	bne.n	80099e6 <vPortFree+0x42>
 80099d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d6:	f383 8811 	msr	BASEPRI, r3
 80099da:	f3bf 8f6f 	isb	sy
 80099de:	f3bf 8f4f 	dsb	sy
 80099e2:	60fb      	str	r3, [r7, #12]
 80099e4:	e7fe      	b.n	80099e4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d009      	beq.n	8009a02 <vPortFree+0x5e>
 80099ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f2:	f383 8811 	msr	BASEPRI, r3
 80099f6:	f3bf 8f6f 	isb	sy
 80099fa:	f3bf 8f4f 	dsb	sy
 80099fe:	60bb      	str	r3, [r7, #8]
 8009a00:	e7fe      	b.n	8009a00 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	685a      	ldr	r2, [r3, #4]
 8009a06:	4b11      	ldr	r3, [pc, #68]	; (8009a4c <vPortFree+0xa8>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	4013      	ands	r3, r2
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d019      	beq.n	8009a44 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d115      	bne.n	8009a44 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	685a      	ldr	r2, [r3, #4]
 8009a1c:	4b0b      	ldr	r3, [pc, #44]	; (8009a4c <vPortFree+0xa8>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	43db      	mvns	r3, r3
 8009a22:	401a      	ands	r2, r3
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009a28:	f7fe fcf6 	bl	8008418 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	685a      	ldr	r2, [r3, #4]
 8009a30:	4b07      	ldr	r3, [pc, #28]	; (8009a50 <vPortFree+0xac>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	4413      	add	r3, r2
 8009a36:	4a06      	ldr	r2, [pc, #24]	; (8009a50 <vPortFree+0xac>)
 8009a38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009a3a:	6938      	ldr	r0, [r7, #16]
 8009a3c:	f000 f86c 	bl	8009b18 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009a40:	f7fe fcf8 	bl	8008434 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009a44:	bf00      	nop
 8009a46:	3718      	adds	r7, #24
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}
 8009a4c:	20001ac8 	.word	0x20001ac8
 8009a50:	20001ac0 	.word	0x20001ac0

08009a54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009a54:	b480      	push	{r7}
 8009a56:	b085      	sub	sp, #20
 8009a58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009a5a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009a5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009a60:	4b27      	ldr	r3, [pc, #156]	; (8009b00 <prvHeapInit+0xac>)
 8009a62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	f003 0307 	and.w	r3, r3, #7
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d00c      	beq.n	8009a88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	3307      	adds	r3, #7
 8009a72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	f023 0307 	bic.w	r3, r3, #7
 8009a7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009a7c:	68ba      	ldr	r2, [r7, #8]
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	1ad3      	subs	r3, r2, r3
 8009a82:	4a1f      	ldr	r2, [pc, #124]	; (8009b00 <prvHeapInit+0xac>)
 8009a84:	4413      	add	r3, r2
 8009a86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009a8c:	4a1d      	ldr	r2, [pc, #116]	; (8009b04 <prvHeapInit+0xb0>)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009a92:	4b1c      	ldr	r3, [pc, #112]	; (8009b04 <prvHeapInit+0xb0>)
 8009a94:	2200      	movs	r2, #0
 8009a96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	68ba      	ldr	r2, [r7, #8]
 8009a9c:	4413      	add	r3, r2
 8009a9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009aa0:	2208      	movs	r2, #8
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	1a9b      	subs	r3, r3, r2
 8009aa6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	f023 0307 	bic.w	r3, r3, #7
 8009aae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	4a15      	ldr	r2, [pc, #84]	; (8009b08 <prvHeapInit+0xb4>)
 8009ab4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009ab6:	4b14      	ldr	r3, [pc, #80]	; (8009b08 <prvHeapInit+0xb4>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	2200      	movs	r2, #0
 8009abc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009abe:	4b12      	ldr	r3, [pc, #72]	; (8009b08 <prvHeapInit+0xb4>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	68fa      	ldr	r2, [r7, #12]
 8009ace:	1ad2      	subs	r2, r2, r3
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009ad4:	4b0c      	ldr	r3, [pc, #48]	; (8009b08 <prvHeapInit+0xb4>)
 8009ad6:	681a      	ldr	r2, [r3, #0]
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	685b      	ldr	r3, [r3, #4]
 8009ae0:	4a0a      	ldr	r2, [pc, #40]	; (8009b0c <prvHeapInit+0xb8>)
 8009ae2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	685b      	ldr	r3, [r3, #4]
 8009ae8:	4a09      	ldr	r2, [pc, #36]	; (8009b10 <prvHeapInit+0xbc>)
 8009aea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009aec:	4b09      	ldr	r3, [pc, #36]	; (8009b14 <prvHeapInit+0xc0>)
 8009aee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009af2:	601a      	str	r2, [r3, #0]
}
 8009af4:	bf00      	nop
 8009af6:	3714      	adds	r7, #20
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr
 8009b00:	20000eb4 	.word	0x20000eb4
 8009b04:	20001ab4 	.word	0x20001ab4
 8009b08:	20001abc 	.word	0x20001abc
 8009b0c:	20001ac4 	.word	0x20001ac4
 8009b10:	20001ac0 	.word	0x20001ac0
 8009b14:	20001ac8 	.word	0x20001ac8

08009b18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b085      	sub	sp, #20
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009b20:	4b28      	ldr	r3, [pc, #160]	; (8009bc4 <prvInsertBlockIntoFreeList+0xac>)
 8009b22:	60fb      	str	r3, [r7, #12]
 8009b24:	e002      	b.n	8009b2c <prvInsertBlockIntoFreeList+0x14>
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	60fb      	str	r3, [r7, #12]
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	687a      	ldr	r2, [r7, #4]
 8009b32:	429a      	cmp	r2, r3
 8009b34:	d8f7      	bhi.n	8009b26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	685b      	ldr	r3, [r3, #4]
 8009b3e:	68ba      	ldr	r2, [r7, #8]
 8009b40:	4413      	add	r3, r2
 8009b42:	687a      	ldr	r2, [r7, #4]
 8009b44:	429a      	cmp	r2, r3
 8009b46:	d108      	bne.n	8009b5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	685a      	ldr	r2, [r3, #4]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	441a      	add	r2, r3
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	685b      	ldr	r3, [r3, #4]
 8009b62:	68ba      	ldr	r2, [r7, #8]
 8009b64:	441a      	add	r2, r3
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	429a      	cmp	r2, r3
 8009b6c:	d118      	bne.n	8009ba0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681a      	ldr	r2, [r3, #0]
 8009b72:	4b15      	ldr	r3, [pc, #84]	; (8009bc8 <prvInsertBlockIntoFreeList+0xb0>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	429a      	cmp	r2, r3
 8009b78:	d00d      	beq.n	8009b96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	685a      	ldr	r2, [r3, #4]
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	685b      	ldr	r3, [r3, #4]
 8009b84:	441a      	add	r2, r3
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	681a      	ldr	r2, [r3, #0]
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	601a      	str	r2, [r3, #0]
 8009b94:	e008      	b.n	8009ba8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009b96:	4b0c      	ldr	r3, [pc, #48]	; (8009bc8 <prvInsertBlockIntoFreeList+0xb0>)
 8009b98:	681a      	ldr	r2, [r3, #0]
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	601a      	str	r2, [r3, #0]
 8009b9e:	e003      	b.n	8009ba8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681a      	ldr	r2, [r3, #0]
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009ba8:	68fa      	ldr	r2, [r7, #12]
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	429a      	cmp	r2, r3
 8009bae:	d002      	beq.n	8009bb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	687a      	ldr	r2, [r7, #4]
 8009bb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009bb6:	bf00      	nop
 8009bb8:	3714      	adds	r7, #20
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc0:	4770      	bx	lr
 8009bc2:	bf00      	nop
 8009bc4:	20001ab4 	.word	0x20001ab4
 8009bc8:	20001abc 	.word	0x20001abc

08009bcc <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result 
  */
int32_t MX_FATFS_Init(void) 
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/
 
if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 8009bd0:	4907      	ldr	r1, [pc, #28]	; (8009bf0 <MX_FATFS_Init+0x24>)
 8009bd2:	4808      	ldr	r0, [pc, #32]	; (8009bf4 <MX_FATFS_Init+0x28>)
 8009bd4:	f7fd fae8 	bl	80071a8 <FATFS_LinkDriver>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d002      	beq.n	8009be4 <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 8009bde:	f04f 33ff 	mov.w	r3, #4294967295
 8009be2:	e003      	b.n	8009bec <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 8009be4:	4b04      	ldr	r3, [pc, #16]	; (8009bf8 <MX_FATFS_Init+0x2c>)
 8009be6:	2201      	movs	r2, #1
 8009be8:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 8009bea:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	bd80      	pop	{r7, pc}
 8009bf0:	20001d3c 	.word	0x20001d3c
 8009bf4:	20000184 	.word	0x20000184
 8009bf8:	20001acc 	.word	0x20001acc

08009bfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b08a      	sub	sp, #40	; 0x28
 8009c00:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009c02:	f7f6 fb36 	bl	8000272 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009c06:	f000 f83b 	bl	8009c80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009c0a:	f000 fc59 	bl	800a4c0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8009c0e:	f000 f8af 	bl	8009d70 <MX_ADC1_Init>
  MX_ADC2_Init();
 8009c12:	f000 f923 	bl	8009e5c <MX_ADC2_Init>
  MX_ADC3_Init();
 8009c16:	f000 f985 	bl	8009f24 <MX_ADC3_Init>
  MX_ADC4_Init();
 8009c1a:	f000 f9fb 	bl	800a014 <MX_ADC4_Init>
  MX_ADC5_Init();
 8009c1e:	f000 fa5d 	bl	800a0dc <MX_ADC5_Init>
  MX_COMP1_Init();
 8009c22:	f000 fabf 	bl	800a1a4 <MX_COMP1_Init>
  MX_COMP2_Init();
 8009c26:	f000 fae7 	bl	800a1f8 <MX_COMP2_Init>
  MX_COMP3_Init();
 8009c2a:	f000 fb0f 	bl	800a24c <MX_COMP3_Init>
  MX_COMP4_Init();
 8009c2e:	f000 fb37 	bl	800a2a0 <MX_COMP4_Init>
  MX_FDCAN1_Init();
 8009c32:	f000 fb5d 	bl	800a2f0 <MX_FDCAN1_Init>
  MX_RTC_Init();
 8009c36:	f000 fba3 	bl	800a380 <MX_RTC_Init>
  MX_SPI1_Init();
 8009c3a:	f000 fc03 	bl	800a444 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  osKernelInitialize();
 8009c3e:	f7fd fac3 	bl	80071c8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  const osThreadAttr_t defaultTask_attributes = {
 8009c42:	1d3b      	adds	r3, r7, #4
 8009c44:	2224      	movs	r2, #36	; 0x24
 8009c46:	2100      	movs	r1, #0
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f001 fde4 	bl	800b816 <memset>
 8009c4e:	4b09      	ldr	r3, [pc, #36]	; (8009c74 <main+0x78>)
 8009c50:	607b      	str	r3, [r7, #4]
 8009c52:	2380      	movs	r3, #128	; 0x80
 8009c54:	61bb      	str	r3, [r7, #24]
 8009c56:	2318      	movs	r3, #24
 8009c58:	61fb      	str	r3, [r7, #28]
    .name = "defaultTask",
    .priority = (osPriority_t) osPriorityNormal,
    .stack_size = 128
  };
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8009c5a:	1d3b      	adds	r3, r7, #4
 8009c5c:	461a      	mov	r2, r3
 8009c5e:	2100      	movs	r1, #0
 8009c60:	4805      	ldr	r0, [pc, #20]	; (8009c78 <main+0x7c>)
 8009c62:	f7fd fb19 	bl	8007298 <osThreadNew>
 8009c66:	4602      	mov	r2, r0
 8009c68:	4b04      	ldr	r3, [pc, #16]	; (8009c7c <main+0x80>)
 8009c6a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8009c6c:	f7fd fae0 	bl	8007230 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8009c70:	e7fe      	b.n	8009c70 <main+0x74>
 8009c72:	bf00      	nop
 8009c74:	0800b858 	.word	0x0800b858
 8009c78:	0800a699 	.word	0x0800a699
 8009c7c:	200021a4 	.word	0x200021a4

08009c80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b0a8      	sub	sp, #160	; 0xa0
 8009c84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009c86:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009c8a:	2238      	movs	r2, #56	; 0x38
 8009c8c:	2100      	movs	r1, #0
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f001 fdc1 	bl	800b816 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009c94:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009c98:	2200      	movs	r2, #0
 8009c9a:	601a      	str	r2, [r3, #0]
 8009c9c:	605a      	str	r2, [r3, #4]
 8009c9e:	609a      	str	r2, [r3, #8]
 8009ca0:	60da      	str	r2, [r3, #12]
 8009ca2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009ca4:	463b      	mov	r3, r7
 8009ca6:	2254      	movs	r2, #84	; 0x54
 8009ca8:	2100      	movs	r1, #0
 8009caa:	4618      	mov	r0, r3
 8009cac:	f001 fdb3 	bl	800b816 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009cb0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009cb4:	f7f9 faca 	bl	800324c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8009cb8:	230a      	movs	r3, #10
 8009cba:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8009cbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009cc0:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8009cc2:	2340      	movs	r3, #64	; 0x40
 8009cc4:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009cca:	2302      	movs	r3, #2
 8009ccc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8009cd0:	2302      	movs	r3, #2
 8009cd2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8009cd6:	2302      	movs	r3, #2
 8009cd8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 12;
 8009cdc:	230c      	movs	r3, #12
 8009cde:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009ce2:	2302      	movs	r3, #2
 8009ce4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8009ce8:	2302      	movs	r3, #2
 8009cea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8009cee:	2302      	movs	r3, #2
 8009cf0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009cf4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f7f9 fb4b 	bl	8003394 <HAL_RCC_OscConfig>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d001      	beq.n	8009d08 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8009d04:	f000 fcd4 	bl	800a6b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009d08:	230f      	movs	r3, #15
 8009d0a:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009d10:	2300      	movs	r3, #0
 8009d12:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8009d14:	2300      	movs	r3, #0
 8009d16:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8009d1c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009d20:	2100      	movs	r1, #0
 8009d22:	4618      	mov	r0, r3
 8009d24:	f7f9 fe4e 	bl	80039c4 <HAL_RCC_ClockConfig>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d001      	beq.n	8009d32 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8009d2e:	f000 fcbf 	bl	800a6b0 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB
 8009d32:	f44f 231b 	mov.w	r3, #634880	; 0x9b000
 8009d36:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_ADC345
                              |RCC_PERIPHCLK_FDCAN;
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8009d38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009d3c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8009d3e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009d42:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8009d44:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8009d48:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8009d4a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009d4e:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8009d50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d54:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009d56:	463b      	mov	r3, r7
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f7fa f817 	bl	8003d8c <HAL_RCCEx_PeriphCLKConfig>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d001      	beq.n	8009d68 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8009d64:	f000 fca4 	bl	800a6b0 <Error_Handler>
  }
}
 8009d68:	bf00      	nop
 8009d6a:	37a0      	adds	r7, #160	; 0xa0
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}

08009d70 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b08c      	sub	sp, #48	; 0x30
 8009d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8009d76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	601a      	str	r2, [r3, #0]
 8009d7e:	605a      	str	r2, [r3, #4]
 8009d80:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8009d82:	1d3b      	adds	r3, r7, #4
 8009d84:	2220      	movs	r2, #32
 8009d86:	2100      	movs	r1, #0
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f001 fd44 	bl	800b816 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8009d8e:	4b31      	ldr	r3, [pc, #196]	; (8009e54 <MX_ADC1_Init+0xe4>)
 8009d90:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009d94:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8009d96:	4b2f      	ldr	r3, [pc, #188]	; (8009e54 <MX_ADC1_Init+0xe4>)
 8009d98:	2200      	movs	r2, #0
 8009d9a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8009d9c:	4b2d      	ldr	r3, [pc, #180]	; (8009e54 <MX_ADC1_Init+0xe4>)
 8009d9e:	2200      	movs	r2, #0
 8009da0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009da2:	4b2c      	ldr	r3, [pc, #176]	; (8009e54 <MX_ADC1_Init+0xe4>)
 8009da4:	2200      	movs	r2, #0
 8009da6:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8009da8:	4b2a      	ldr	r3, [pc, #168]	; (8009e54 <MX_ADC1_Init+0xe4>)
 8009daa:	2200      	movs	r2, #0
 8009dac:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8009dae:	4b29      	ldr	r3, [pc, #164]	; (8009e54 <MX_ADC1_Init+0xe4>)
 8009db0:	2200      	movs	r2, #0
 8009db2:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8009db4:	4b27      	ldr	r3, [pc, #156]	; (8009e54 <MX_ADC1_Init+0xe4>)
 8009db6:	2204      	movs	r2, #4
 8009db8:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8009dba:	4b26      	ldr	r3, [pc, #152]	; (8009e54 <MX_ADC1_Init+0xe4>)
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8009dc0:	4b24      	ldr	r3, [pc, #144]	; (8009e54 <MX_ADC1_Init+0xe4>)
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8009dc6:	4b23      	ldr	r3, [pc, #140]	; (8009e54 <MX_ADC1_Init+0xe4>)
 8009dc8:	2201      	movs	r2, #1
 8009dca:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8009dcc:	4b21      	ldr	r3, [pc, #132]	; (8009e54 <MX_ADC1_Init+0xe4>)
 8009dce:	2200      	movs	r2, #0
 8009dd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8009dd4:	4b1f      	ldr	r3, [pc, #124]	; (8009e54 <MX_ADC1_Init+0xe4>)
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8009dda:	4b1e      	ldr	r3, [pc, #120]	; (8009e54 <MX_ADC1_Init+0xe4>)
 8009ddc:	2200      	movs	r2, #0
 8009dde:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8009de0:	4b1c      	ldr	r3, [pc, #112]	; (8009e54 <MX_ADC1_Init+0xe4>)
 8009de2:	2200      	movs	r2, #0
 8009de4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8009de8:	4b1a      	ldr	r3, [pc, #104]	; (8009e54 <MX_ADC1_Init+0xe4>)
 8009dea:	2200      	movs	r2, #0
 8009dec:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8009dee:	4b19      	ldr	r3, [pc, #100]	; (8009e54 <MX_ADC1_Init+0xe4>)
 8009df0:	2200      	movs	r2, #0
 8009df2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8009df6:	4817      	ldr	r0, [pc, #92]	; (8009e54 <MX_ADC1_Init+0xe4>)
 8009df8:	f7f6 fc6e 	bl	80006d8 <HAL_ADC_Init>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d001      	beq.n	8009e06 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8009e02:	f000 fc55 	bl	800a6b0 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8009e06:	2300      	movs	r3, #0
 8009e08:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8009e0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009e0e:	4619      	mov	r1, r3
 8009e10:	4810      	ldr	r0, [pc, #64]	; (8009e54 <MX_ADC1_Init+0xe4>)
 8009e12:	f7f7 f9f7 	bl	8001204 <HAL_ADCEx_MultiModeConfigChannel>
 8009e16:	4603      	mov	r3, r0
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d001      	beq.n	8009e20 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8009e1c:	f000 fc48 	bl	800a6b0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8009e20:	4b0d      	ldr	r3, [pc, #52]	; (8009e58 <MX_ADC1_Init+0xe8>)
 8009e22:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8009e24:	2306      	movs	r3, #6
 8009e26:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8009e28:	2300      	movs	r3, #0
 8009e2a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8009e2c:	237f      	movs	r3, #127	; 0x7f
 8009e2e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8009e30:	2304      	movs	r3, #4
 8009e32:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8009e34:	2300      	movs	r3, #0
 8009e36:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009e38:	1d3b      	adds	r3, r7, #4
 8009e3a:	4619      	mov	r1, r3
 8009e3c:	4805      	ldr	r0, [pc, #20]	; (8009e54 <MX_ADC1_Init+0xe4>)
 8009e3e:	f7f6 fe0b 	bl	8000a58 <HAL_ADC_ConfigChannel>
 8009e42:	4603      	mov	r3, r0
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d001      	beq.n	8009e4c <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8009e48:	f000 fc32 	bl	800a6b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8009e4c:	bf00      	nop
 8009e4e:	3730      	adds	r7, #48	; 0x30
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}
 8009e54:	200022c8 	.word	0x200022c8
 8009e58:	04300002 	.word	0x04300002

08009e5c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b088      	sub	sp, #32
 8009e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8009e62:	463b      	mov	r3, r7
 8009e64:	2220      	movs	r2, #32
 8009e66:	2100      	movs	r1, #0
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f001 fcd4 	bl	800b816 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 8009e6e:	4b2a      	ldr	r3, [pc, #168]	; (8009f18 <MX_ADC2_Init+0xbc>)
 8009e70:	4a2a      	ldr	r2, [pc, #168]	; (8009f1c <MX_ADC2_Init+0xc0>)
 8009e72:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8009e74:	4b28      	ldr	r3, [pc, #160]	; (8009f18 <MX_ADC2_Init+0xbc>)
 8009e76:	2200      	movs	r2, #0
 8009e78:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8009e7a:	4b27      	ldr	r3, [pc, #156]	; (8009f18 <MX_ADC2_Init+0xbc>)
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009e80:	4b25      	ldr	r3, [pc, #148]	; (8009f18 <MX_ADC2_Init+0xbc>)
 8009e82:	2200      	movs	r2, #0
 8009e84:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8009e86:	4b24      	ldr	r3, [pc, #144]	; (8009f18 <MX_ADC2_Init+0xbc>)
 8009e88:	2200      	movs	r2, #0
 8009e8a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8009e8c:	4b22      	ldr	r3, [pc, #136]	; (8009f18 <MX_ADC2_Init+0xbc>)
 8009e8e:	2200      	movs	r2, #0
 8009e90:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8009e92:	4b21      	ldr	r3, [pc, #132]	; (8009f18 <MX_ADC2_Init+0xbc>)
 8009e94:	2204      	movs	r2, #4
 8009e96:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8009e98:	4b1f      	ldr	r3, [pc, #124]	; (8009f18 <MX_ADC2_Init+0xbc>)
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8009e9e:	4b1e      	ldr	r3, [pc, #120]	; (8009f18 <MX_ADC2_Init+0xbc>)
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8009ea4:	4b1c      	ldr	r3, [pc, #112]	; (8009f18 <MX_ADC2_Init+0xbc>)
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8009eaa:	4b1b      	ldr	r3, [pc, #108]	; (8009f18 <MX_ADC2_Init+0xbc>)
 8009eac:	2200      	movs	r2, #0
 8009eae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8009eb2:	4b19      	ldr	r3, [pc, #100]	; (8009f18 <MX_ADC2_Init+0xbc>)
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8009eb8:	4b17      	ldr	r3, [pc, #92]	; (8009f18 <MX_ADC2_Init+0xbc>)
 8009eba:	2200      	movs	r2, #0
 8009ebc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8009ebe:	4b16      	ldr	r3, [pc, #88]	; (8009f18 <MX_ADC2_Init+0xbc>)
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8009ec6:	4b14      	ldr	r3, [pc, #80]	; (8009f18 <MX_ADC2_Init+0xbc>)
 8009ec8:	2200      	movs	r2, #0
 8009eca:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8009ecc:	4b12      	ldr	r3, [pc, #72]	; (8009f18 <MX_ADC2_Init+0xbc>)
 8009ece:	2200      	movs	r2, #0
 8009ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8009ed4:	4810      	ldr	r0, [pc, #64]	; (8009f18 <MX_ADC2_Init+0xbc>)
 8009ed6:	f7f6 fbff 	bl	80006d8 <HAL_ADC_Init>
 8009eda:	4603      	mov	r3, r0
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d001      	beq.n	8009ee4 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8009ee0:	f000 fbe6 	bl	800a6b0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8009ee4:	4b0e      	ldr	r3, [pc, #56]	; (8009f20 <MX_ADC2_Init+0xc4>)
 8009ee6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8009ee8:	2306      	movs	r3, #6
 8009eea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8009eec:	2300      	movs	r3, #0
 8009eee:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8009ef0:	237f      	movs	r3, #127	; 0x7f
 8009ef2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8009ef4:	2304      	movs	r3, #4
 8009ef6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8009ef8:	2300      	movs	r3, #0
 8009efa:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8009efc:	463b      	mov	r3, r7
 8009efe:	4619      	mov	r1, r3
 8009f00:	4805      	ldr	r0, [pc, #20]	; (8009f18 <MX_ADC2_Init+0xbc>)
 8009f02:	f7f6 fda9 	bl	8000a58 <HAL_ADC_ConfigChannel>
 8009f06:	4603      	mov	r3, r0
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d001      	beq.n	8009f10 <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 8009f0c:	f000 fbd0 	bl	800a6b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8009f10:	bf00      	nop
 8009f12:	3720      	adds	r7, #32
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}
 8009f18:	200021a8 	.word	0x200021a8
 8009f1c:	50000100 	.word	0x50000100
 8009f20:	2e300800 	.word	0x2e300800

08009f24 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b08c      	sub	sp, #48	; 0x30
 8009f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8009f2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f2e:	2200      	movs	r2, #0
 8009f30:	601a      	str	r2, [r3, #0]
 8009f32:	605a      	str	r2, [r3, #4]
 8009f34:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8009f36:	1d3b      	adds	r3, r7, #4
 8009f38:	2220      	movs	r2, #32
 8009f3a:	2100      	movs	r1, #0
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f001 fc6a 	bl	800b816 <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config 
  */
  hadc3.Instance = ADC3;
 8009f42:	4b31      	ldr	r3, [pc, #196]	; (800a008 <MX_ADC3_Init+0xe4>)
 8009f44:	4a31      	ldr	r2, [pc, #196]	; (800a00c <MX_ADC3_Init+0xe8>)
 8009f46:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8009f48:	4b2f      	ldr	r3, [pc, #188]	; (800a008 <MX_ADC3_Init+0xe4>)
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8009f4e:	4b2e      	ldr	r3, [pc, #184]	; (800a008 <MX_ADC3_Init+0xe4>)
 8009f50:	2200      	movs	r2, #0
 8009f52:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009f54:	4b2c      	ldr	r3, [pc, #176]	; (800a008 <MX_ADC3_Init+0xe4>)
 8009f56:	2200      	movs	r2, #0
 8009f58:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8009f5a:	4b2b      	ldr	r3, [pc, #172]	; (800a008 <MX_ADC3_Init+0xe4>)
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8009f60:	4b29      	ldr	r3, [pc, #164]	; (800a008 <MX_ADC3_Init+0xe4>)
 8009f62:	2200      	movs	r2, #0
 8009f64:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8009f66:	4b28      	ldr	r3, [pc, #160]	; (800a008 <MX_ADC3_Init+0xe4>)
 8009f68:	2204      	movs	r2, #4
 8009f6a:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8009f6c:	4b26      	ldr	r3, [pc, #152]	; (800a008 <MX_ADC3_Init+0xe4>)
 8009f6e:	2200      	movs	r2, #0
 8009f70:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8009f72:	4b25      	ldr	r3, [pc, #148]	; (800a008 <MX_ADC3_Init+0xe4>)
 8009f74:	2200      	movs	r2, #0
 8009f76:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8009f78:	4b23      	ldr	r3, [pc, #140]	; (800a008 <MX_ADC3_Init+0xe4>)
 8009f7a:	2201      	movs	r2, #1
 8009f7c:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8009f7e:	4b22      	ldr	r3, [pc, #136]	; (800a008 <MX_ADC3_Init+0xe4>)
 8009f80:	2200      	movs	r2, #0
 8009f82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8009f86:	4b20      	ldr	r3, [pc, #128]	; (800a008 <MX_ADC3_Init+0xe4>)
 8009f88:	2200      	movs	r2, #0
 8009f8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8009f8c:	4b1e      	ldr	r3, [pc, #120]	; (800a008 <MX_ADC3_Init+0xe4>)
 8009f8e:	2200      	movs	r2, #0
 8009f90:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8009f92:	4b1d      	ldr	r3, [pc, #116]	; (800a008 <MX_ADC3_Init+0xe4>)
 8009f94:	2200      	movs	r2, #0
 8009f96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8009f9a:	4b1b      	ldr	r3, [pc, #108]	; (800a008 <MX_ADC3_Init+0xe4>)
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8009fa0:	4b19      	ldr	r3, [pc, #100]	; (800a008 <MX_ADC3_Init+0xe4>)
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8009fa8:	4817      	ldr	r0, [pc, #92]	; (800a008 <MX_ADC3_Init+0xe4>)
 8009faa:	f7f6 fb95 	bl	80006d8 <HAL_ADC_Init>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d001      	beq.n	8009fb8 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8009fb4:	f000 fb7c 	bl	800a6b0 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8009fb8:	2300      	movs	r3, #0
 8009fba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8009fbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	4811      	ldr	r0, [pc, #68]	; (800a008 <MX_ADC3_Init+0xe4>)
 8009fc4:	f7f7 f91e 	bl	8001204 <HAL_ADCEx_MultiModeConfigChannel>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d001      	beq.n	8009fd2 <MX_ADC3_Init+0xae>
  {
    Error_Handler();
 8009fce:	f000 fb6f 	bl	800a6b0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8009fd2:	4b0f      	ldr	r3, [pc, #60]	; (800a010 <MX_ADC3_Init+0xec>)
 8009fd4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8009fd6:	2306      	movs	r3, #6
 8009fd8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8009fde:	237f      	movs	r3, #127	; 0x7f
 8009fe0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8009fe2:	2304      	movs	r3, #4
 8009fe4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8009fea:	1d3b      	adds	r3, r7, #4
 8009fec:	4619      	mov	r1, r3
 8009fee:	4806      	ldr	r0, [pc, #24]	; (800a008 <MX_ADC3_Init+0xe4>)
 8009ff0:	f7f6 fd32 	bl	8000a58 <HAL_ADC_ConfigChannel>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d001      	beq.n	8009ffe <MX_ADC3_Init+0xda>
  {
    Error_Handler();
 8009ffa:	f000 fb59 	bl	800a6b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8009ffe:	bf00      	nop
 800a000:	3730      	adds	r7, #48	; 0x30
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}
 800a006:	bf00      	nop
 800a008:	20002334 	.word	0x20002334
 800a00c:	50000400 	.word	0x50000400
 800a010:	08600004 	.word	0x08600004

0800a014 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b088      	sub	sp, #32
 800a018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800a01a:	463b      	mov	r3, r7
 800a01c:	2220      	movs	r2, #32
 800a01e:	2100      	movs	r1, #0
 800a020:	4618      	mov	r0, r3
 800a022:	f001 fbf8 	bl	800b816 <memset>
  /* USER CODE BEGIN ADC4_Init 1 */

  /* USER CODE END ADC4_Init 1 */
  /** Common config 
  */
  hadc4.Instance = ADC4;
 800a026:	4b2a      	ldr	r3, [pc, #168]	; (800a0d0 <MX_ADC4_Init+0xbc>)
 800a028:	4a2a      	ldr	r2, [pc, #168]	; (800a0d4 <MX_ADC4_Init+0xc0>)
 800a02a:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800a02c:	4b28      	ldr	r3, [pc, #160]	; (800a0d0 <MX_ADC4_Init+0xbc>)
 800a02e:	2200      	movs	r2, #0
 800a030:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 800a032:	4b27      	ldr	r3, [pc, #156]	; (800a0d0 <MX_ADC4_Init+0xbc>)
 800a034:	2200      	movs	r2, #0
 800a036:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800a038:	4b25      	ldr	r3, [pc, #148]	; (800a0d0 <MX_ADC4_Init+0xbc>)
 800a03a:	2200      	movs	r2, #0
 800a03c:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 800a03e:	4b24      	ldr	r3, [pc, #144]	; (800a0d0 <MX_ADC4_Init+0xbc>)
 800a040:	2200      	movs	r2, #0
 800a042:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800a044:	4b22      	ldr	r3, [pc, #136]	; (800a0d0 <MX_ADC4_Init+0xbc>)
 800a046:	2200      	movs	r2, #0
 800a048:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800a04a:	4b21      	ldr	r3, [pc, #132]	; (800a0d0 <MX_ADC4_Init+0xbc>)
 800a04c:	2204      	movs	r2, #4
 800a04e:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 800a050:	4b1f      	ldr	r3, [pc, #124]	; (800a0d0 <MX_ADC4_Init+0xbc>)
 800a052:	2200      	movs	r2, #0
 800a054:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 800a056:	4b1e      	ldr	r3, [pc, #120]	; (800a0d0 <MX_ADC4_Init+0xbc>)
 800a058:	2200      	movs	r2, #0
 800a05a:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 800a05c:	4b1c      	ldr	r3, [pc, #112]	; (800a0d0 <MX_ADC4_Init+0xbc>)
 800a05e:	2201      	movs	r2, #1
 800a060:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 800a062:	4b1b      	ldr	r3, [pc, #108]	; (800a0d0 <MX_ADC4_Init+0xbc>)
 800a064:	2200      	movs	r2, #0
 800a066:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800a06a:	4b19      	ldr	r3, [pc, #100]	; (800a0d0 <MX_ADC4_Init+0xbc>)
 800a06c:	2200      	movs	r2, #0
 800a06e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800a070:	4b17      	ldr	r3, [pc, #92]	; (800a0d0 <MX_ADC4_Init+0xbc>)
 800a072:	2200      	movs	r2, #0
 800a074:	631a      	str	r2, [r3, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = DISABLE;
 800a076:	4b16      	ldr	r3, [pc, #88]	; (800a0d0 <MX_ADC4_Init+0xbc>)
 800a078:	2200      	movs	r2, #0
 800a07a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800a07e:	4b14      	ldr	r3, [pc, #80]	; (800a0d0 <MX_ADC4_Init+0xbc>)
 800a080:	2200      	movs	r2, #0
 800a082:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 800a084:	4b12      	ldr	r3, [pc, #72]	; (800a0d0 <MX_ADC4_Init+0xbc>)
 800a086:	2200      	movs	r2, #0
 800a088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 800a08c:	4810      	ldr	r0, [pc, #64]	; (800a0d0 <MX_ADC4_Init+0xbc>)
 800a08e:	f7f6 fb23 	bl	80006d8 <HAL_ADC_Init>
 800a092:	4603      	mov	r3, r0
 800a094:	2b00      	cmp	r3, #0
 800a096:	d001      	beq.n	800a09c <MX_ADC4_Init+0x88>
  {
    Error_Handler();
 800a098:	f000 fb0a 	bl	800a6b0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800a09c:	4b0e      	ldr	r3, [pc, #56]	; (800a0d8 <MX_ADC4_Init+0xc4>)
 800a09e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800a0a0:	2306      	movs	r3, #6
 800a0a2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800a0a8:	237f      	movs	r3, #127	; 0x7f
 800a0aa:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800a0ac:	2304      	movs	r3, #4
 800a0ae:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800a0b4:	463b      	mov	r3, r7
 800a0b6:	4619      	mov	r1, r3
 800a0b8:	4805      	ldr	r0, [pc, #20]	; (800a0d0 <MX_ADC4_Init+0xbc>)
 800a0ba:	f7f6 fccd 	bl	8000a58 <HAL_ADC_ConfigChannel>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d001      	beq.n	800a0c8 <MX_ADC4_Init+0xb4>
  {
    Error_Handler();
 800a0c4:	f000 faf4 	bl	800a6b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 800a0c8:	bf00      	nop
 800a0ca:	3720      	adds	r7, #32
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}
 800a0d0:	200024d8 	.word	0x200024d8
 800a0d4:	50000500 	.word	0x50000500
 800a0d8:	04300002 	.word	0x04300002

0800a0dc <MX_ADC5_Init>:
  * @brief ADC5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC5_Init(void)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b088      	sub	sp, #32
 800a0e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800a0e2:	463b      	mov	r3, r7
 800a0e4:	2220      	movs	r2, #32
 800a0e6:	2100      	movs	r1, #0
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	f001 fb94 	bl	800b816 <memset>
  /* USER CODE BEGIN ADC5_Init 1 */

  /* USER CODE END ADC5_Init 1 */
  /** Common config 
  */
  hadc5.Instance = ADC5;
 800a0ee:	4b2a      	ldr	r3, [pc, #168]	; (800a198 <MX_ADC5_Init+0xbc>)
 800a0f0:	4a2a      	ldr	r2, [pc, #168]	; (800a19c <MX_ADC5_Init+0xc0>)
 800a0f2:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800a0f4:	4b28      	ldr	r3, [pc, #160]	; (800a198 <MX_ADC5_Init+0xbc>)
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 800a0fa:	4b27      	ldr	r3, [pc, #156]	; (800a198 <MX_ADC5_Init+0xbc>)
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800a100:	4b25      	ldr	r3, [pc, #148]	; (800a198 <MX_ADC5_Init+0xbc>)
 800a102:	2200      	movs	r2, #0
 800a104:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 800a106:	4b24      	ldr	r3, [pc, #144]	; (800a198 <MX_ADC5_Init+0xbc>)
 800a108:	2200      	movs	r2, #0
 800a10a:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800a10c:	4b22      	ldr	r3, [pc, #136]	; (800a198 <MX_ADC5_Init+0xbc>)
 800a10e:	2200      	movs	r2, #0
 800a110:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800a112:	4b21      	ldr	r3, [pc, #132]	; (800a198 <MX_ADC5_Init+0xbc>)
 800a114:	2204      	movs	r2, #4
 800a116:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 800a118:	4b1f      	ldr	r3, [pc, #124]	; (800a198 <MX_ADC5_Init+0xbc>)
 800a11a:	2200      	movs	r2, #0
 800a11c:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 800a11e:	4b1e      	ldr	r3, [pc, #120]	; (800a198 <MX_ADC5_Init+0xbc>)
 800a120:	2200      	movs	r2, #0
 800a122:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 800a124:	4b1c      	ldr	r3, [pc, #112]	; (800a198 <MX_ADC5_Init+0xbc>)
 800a126:	2201      	movs	r2, #1
 800a128:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 800a12a:	4b1b      	ldr	r3, [pc, #108]	; (800a198 <MX_ADC5_Init+0xbc>)
 800a12c:	2200      	movs	r2, #0
 800a12e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800a132:	4b19      	ldr	r3, [pc, #100]	; (800a198 <MX_ADC5_Init+0xbc>)
 800a134:	2200      	movs	r2, #0
 800a136:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800a138:	4b17      	ldr	r3, [pc, #92]	; (800a198 <MX_ADC5_Init+0xbc>)
 800a13a:	2200      	movs	r2, #0
 800a13c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc5.Init.DMAContinuousRequests = DISABLE;
 800a13e:	4b16      	ldr	r3, [pc, #88]	; (800a198 <MX_ADC5_Init+0xbc>)
 800a140:	2200      	movs	r2, #0
 800a142:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800a146:	4b14      	ldr	r3, [pc, #80]	; (800a198 <MX_ADC5_Init+0xbc>)
 800a148:	2200      	movs	r2, #0
 800a14a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 800a14c:	4b12      	ldr	r3, [pc, #72]	; (800a198 <MX_ADC5_Init+0xbc>)
 800a14e:	2200      	movs	r2, #0
 800a150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 800a154:	4810      	ldr	r0, [pc, #64]	; (800a198 <MX_ADC5_Init+0xbc>)
 800a156:	f7f6 fabf 	bl	80006d8 <HAL_ADC_Init>
 800a15a:	4603      	mov	r3, r0
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d001      	beq.n	800a164 <MX_ADC5_Init+0x88>
  {
    Error_Handler();
 800a160:	f000 faa6 	bl	800a6b0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800a164:	4b0e      	ldr	r3, [pc, #56]	; (800a1a0 <MX_ADC5_Init+0xc4>)
 800a166:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800a168:	2306      	movs	r3, #6
 800a16a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800a16c:	2300      	movs	r3, #0
 800a16e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800a170:	237f      	movs	r3, #127	; 0x7f
 800a172:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800a174:	2304      	movs	r3, #4
 800a176:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800a178:	2300      	movs	r3, #0
 800a17a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 800a17c:	463b      	mov	r3, r7
 800a17e:	4619      	mov	r1, r3
 800a180:	4805      	ldr	r0, [pc, #20]	; (800a198 <MX_ADC5_Init+0xbc>)
 800a182:	f7f6 fc69 	bl	8000a58 <HAL_ADC_ConfigChannel>
 800a186:	4603      	mov	r3, r0
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d001      	beq.n	800a190 <MX_ADC5_Init+0xb4>
  {
    Error_Handler();
 800a18c:	f000 fa90 	bl	800a6b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 800a190:	bf00      	nop
 800a192:	3720      	adds	r7, #32
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}
 800a198:	20002214 	.word	0x20002214
 800a19c:	50000600 	.word	0x50000600
 800a1a0:	04300002 	.word	0x04300002

0800a1a4 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 800a1a8:	4b10      	ldr	r3, [pc, #64]	; (800a1ec <MX_COMP1_Init+0x48>)
 800a1aa:	4a11      	ldr	r2, [pc, #68]	; (800a1f0 <MX_COMP1_Init+0x4c>)
 800a1ac:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 800a1ae:	4b0f      	ldr	r3, [pc, #60]	; (800a1ec <MX_COMP1_Init+0x48>)
 800a1b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a1b4:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_1_2VREFINT;
 800a1b6:	4b0d      	ldr	r3, [pc, #52]	; (800a1ec <MX_COMP1_Init+0x48>)
 800a1b8:	4a0e      	ldr	r2, [pc, #56]	; (800a1f4 <MX_COMP1_Init+0x50>)
 800a1ba:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800a1bc:	4b0b      	ldr	r3, [pc, #44]	; (800a1ec <MX_COMP1_Init+0x48>)
 800a1be:	2200      	movs	r2, #0
 800a1c0:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_20MV;
 800a1c2:	4b0a      	ldr	r3, [pc, #40]	; (800a1ec <MX_COMP1_Init+0x48>)
 800a1c4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a1c8:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800a1ca:	4b08      	ldr	r3, [pc, #32]	; (800a1ec <MX_COMP1_Init+0x48>)
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 800a1d0:	4b06      	ldr	r3, [pc, #24]	; (800a1ec <MX_COMP1_Init+0x48>)
 800a1d2:	2231      	movs	r2, #49	; 0x31
 800a1d4:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 800a1d6:	4805      	ldr	r0, [pc, #20]	; (800a1ec <MX_COMP1_Init+0x48>)
 800a1d8:	f7f7 fa94 	bl	8001704 <HAL_COMP_Init>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d001      	beq.n	800a1e6 <MX_COMP1_Init+0x42>
  {
    Error_Handler();
 800a1e2:	f000 fa65 	bl	800a6b0 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 800a1e6:	bf00      	nop
 800a1e8:	bd80      	pop	{r7, pc}
 800a1ea:	bf00      	nop
 800a1ec:	20002280 	.word	0x20002280
 800a1f0:	40010200 	.word	0x40010200
 800a1f4:	00c00010 	.word	0x00c00010

0800a1f8 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 800a1fc:	4b10      	ldr	r3, [pc, #64]	; (800a240 <MX_COMP2_Init+0x48>)
 800a1fe:	4a11      	ldr	r2, [pc, #68]	; (800a244 <MX_COMP2_Init+0x4c>)
 800a200:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 800a202:	4b0f      	ldr	r3, [pc, #60]	; (800a240 <MX_COMP2_Init+0x48>)
 800a204:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a208:	605a      	str	r2, [r3, #4]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_1_2VREFINT;
 800a20a:	4b0d      	ldr	r3, [pc, #52]	; (800a240 <MX_COMP2_Init+0x48>)
 800a20c:	4a0e      	ldr	r2, [pc, #56]	; (800a248 <MX_COMP2_Init+0x50>)
 800a20e:	609a      	str	r2, [r3, #8]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800a210:	4b0b      	ldr	r3, [pc, #44]	; (800a240 <MX_COMP2_Init+0x48>)
 800a212:	2200      	movs	r2, #0
 800a214:	611a      	str	r2, [r3, #16]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_20MV;
 800a216:	4b0a      	ldr	r3, [pc, #40]	; (800a240 <MX_COMP2_Init+0x48>)
 800a218:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a21c:	60da      	str	r2, [r3, #12]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800a21e:	4b08      	ldr	r3, [pc, #32]	; (800a240 <MX_COMP2_Init+0x48>)
 800a220:	2200      	movs	r2, #0
 800a222:	615a      	str	r2, [r3, #20]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 800a224:	4b06      	ldr	r3, [pc, #24]	; (800a240 <MX_COMP2_Init+0x48>)
 800a226:	2231      	movs	r2, #49	; 0x31
 800a228:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 800a22a:	4805      	ldr	r0, [pc, #20]	; (800a240 <MX_COMP2_Init+0x48>)
 800a22c:	f7f7 fa6a 	bl	8001704 <HAL_COMP_Init>
 800a230:	4603      	mov	r3, r0
 800a232:	2b00      	cmp	r3, #0
 800a234:	d001      	beq.n	800a23a <MX_COMP2_Init+0x42>
  {
    Error_Handler();
 800a236:	f000 fa3b 	bl	800a6b0 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 800a23a:	bf00      	nop
 800a23c:	bd80      	pop	{r7, pc}
 800a23e:	bf00      	nop
 800a240:	2000242c 	.word	0x2000242c
 800a244:	40010204 	.word	0x40010204
 800a248:	00c00010 	.word	0x00c00010

0800a24c <MX_COMP3_Init>:
  * @brief COMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP3_Init(void)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	af00      	add	r7, sp, #0
  /* USER CODE END COMP3_Init 0 */

  /* USER CODE BEGIN COMP3_Init 1 */

  /* USER CODE END COMP3_Init 1 */
  hcomp3.Instance = COMP3;
 800a250:	4b10      	ldr	r3, [pc, #64]	; (800a294 <MX_COMP3_Init+0x48>)
 800a252:	4a11      	ldr	r2, [pc, #68]	; (800a298 <MX_COMP3_Init+0x4c>)
 800a254:	601a      	str	r2, [r3, #0]
  hcomp3.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 800a256:	4b0f      	ldr	r3, [pc, #60]	; (800a294 <MX_COMP3_Init+0x48>)
 800a258:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a25c:	605a      	str	r2, [r3, #4]
  hcomp3.Init.InputMinus = COMP_INPUT_MINUS_1_2VREFINT;
 800a25e:	4b0d      	ldr	r3, [pc, #52]	; (800a294 <MX_COMP3_Init+0x48>)
 800a260:	4a0e      	ldr	r2, [pc, #56]	; (800a29c <MX_COMP3_Init+0x50>)
 800a262:	609a      	str	r2, [r3, #8]
  hcomp3.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800a264:	4b0b      	ldr	r3, [pc, #44]	; (800a294 <MX_COMP3_Init+0x48>)
 800a266:	2200      	movs	r2, #0
 800a268:	611a      	str	r2, [r3, #16]
  hcomp3.Init.Hysteresis = COMP_HYSTERESIS_20MV;
 800a26a:	4b0a      	ldr	r3, [pc, #40]	; (800a294 <MX_COMP3_Init+0x48>)
 800a26c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a270:	60da      	str	r2, [r3, #12]
  hcomp3.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800a272:	4b08      	ldr	r3, [pc, #32]	; (800a294 <MX_COMP3_Init+0x48>)
 800a274:	2200      	movs	r2, #0
 800a276:	615a      	str	r2, [r3, #20]
  hcomp3.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 800a278:	4b06      	ldr	r3, [pc, #24]	; (800a294 <MX_COMP3_Init+0x48>)
 800a27a:	2231      	movs	r2, #49	; 0x31
 800a27c:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp3) != HAL_OK)
 800a27e:	4805      	ldr	r0, [pc, #20]	; (800a294 <MX_COMP3_Init+0x48>)
 800a280:	f7f7 fa40 	bl	8001704 <HAL_COMP_Init>
 800a284:	4603      	mov	r3, r0
 800a286:	2b00      	cmp	r3, #0
 800a288:	d001      	beq.n	800a28e <MX_COMP3_Init+0x42>
  {
    Error_Handler();
 800a28a:	f000 fa11 	bl	800a6b0 <Error_Handler>
  }
  /* USER CODE BEGIN COMP3_Init 2 */

  /* USER CODE END COMP3_Init 2 */

}
 800a28e:	bf00      	nop
 800a290:	bd80      	pop	{r7, pc}
 800a292:	bf00      	nop
 800a294:	20002450 	.word	0x20002450
 800a298:	40010208 	.word	0x40010208
 800a29c:	00c00010 	.word	0x00c00010

0800a2a0 <MX_COMP4_Init>:
  * @brief COMP4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP4_Init(void)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	af00      	add	r7, sp, #0
  /* USER CODE END COMP4_Init 0 */

  /* USER CODE BEGIN COMP4_Init 1 */

  /* USER CODE END COMP4_Init 1 */
  hcomp4.Instance = COMP4;
 800a2a4:	4b0f      	ldr	r3, [pc, #60]	; (800a2e4 <MX_COMP4_Init+0x44>)
 800a2a6:	4a10      	ldr	r2, [pc, #64]	; (800a2e8 <MX_COMP4_Init+0x48>)
 800a2a8:	601a      	str	r2, [r3, #0]
  hcomp4.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 800a2aa:	4b0e      	ldr	r3, [pc, #56]	; (800a2e4 <MX_COMP4_Init+0x44>)
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	605a      	str	r2, [r3, #4]
  hcomp4.Init.InputMinus = COMP_INPUT_MINUS_1_2VREFINT;
 800a2b0:	4b0c      	ldr	r3, [pc, #48]	; (800a2e4 <MX_COMP4_Init+0x44>)
 800a2b2:	4a0e      	ldr	r2, [pc, #56]	; (800a2ec <MX_COMP4_Init+0x4c>)
 800a2b4:	609a      	str	r2, [r3, #8]
  hcomp4.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800a2b6:	4b0b      	ldr	r3, [pc, #44]	; (800a2e4 <MX_COMP4_Init+0x44>)
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	611a      	str	r2, [r3, #16]
  hcomp4.Init.Hysteresis = COMP_HYSTERESIS_20MV;
 800a2bc:	4b09      	ldr	r3, [pc, #36]	; (800a2e4 <MX_COMP4_Init+0x44>)
 800a2be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a2c2:	60da      	str	r2, [r3, #12]
  hcomp4.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800a2c4:	4b07      	ldr	r3, [pc, #28]	; (800a2e4 <MX_COMP4_Init+0x44>)
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	615a      	str	r2, [r3, #20]
  hcomp4.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 800a2ca:	4b06      	ldr	r3, [pc, #24]	; (800a2e4 <MX_COMP4_Init+0x44>)
 800a2cc:	2231      	movs	r2, #49	; 0x31
 800a2ce:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp4) != HAL_OK)
 800a2d0:	4804      	ldr	r0, [pc, #16]	; (800a2e4 <MX_COMP4_Init+0x44>)
 800a2d2:	f7f7 fa17 	bl	8001704 <HAL_COMP_Init>
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d001      	beq.n	800a2e0 <MX_COMP4_Init+0x40>
  {
    Error_Handler();
 800a2dc:	f000 f9e8 	bl	800a6b0 <Error_Handler>
  }
  /* USER CODE BEGIN COMP4_Init 2 */

  /* USER CODE END COMP4_Init 2 */

}
 800a2e0:	bf00      	nop
 800a2e2:	bd80      	pop	{r7, pc}
 800a2e4:	200022a4 	.word	0x200022a4
 800a2e8:	4001020c 	.word	0x4001020c
 800a2ec:	00c00010 	.word	0x00c00010

0800a2f0 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800a2f4:	4b20      	ldr	r3, [pc, #128]	; (800a378 <MX_FDCAN1_Init+0x88>)
 800a2f6:	4a21      	ldr	r2, [pc, #132]	; (800a37c <MX_FDCAN1_Init+0x8c>)
 800a2f8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800a2fa:	4b1f      	ldr	r3, [pc, #124]	; (800a378 <MX_FDCAN1_Init+0x88>)
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 800a300:	4b1d      	ldr	r3, [pc, #116]	; (800a378 <MX_FDCAN1_Init+0x88>)
 800a302:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a306:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800a308:	4b1b      	ldr	r3, [pc, #108]	; (800a378 <MX_FDCAN1_Init+0x88>)
 800a30a:	2200      	movs	r2, #0
 800a30c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800a30e:	4b1a      	ldr	r3, [pc, #104]	; (800a378 <MX_FDCAN1_Init+0x88>)
 800a310:	2200      	movs	r2, #0
 800a312:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800a314:	4b18      	ldr	r3, [pc, #96]	; (800a378 <MX_FDCAN1_Init+0x88>)
 800a316:	2200      	movs	r2, #0
 800a318:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800a31a:	4b17      	ldr	r3, [pc, #92]	; (800a378 <MX_FDCAN1_Init+0x88>)
 800a31c:	2200      	movs	r2, #0
 800a31e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 800a320:	4b15      	ldr	r3, [pc, #84]	; (800a378 <MX_FDCAN1_Init+0x88>)
 800a322:	2201      	movs	r2, #1
 800a324:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800a326:	4b14      	ldr	r3, [pc, #80]	; (800a378 <MX_FDCAN1_Init+0x88>)
 800a328:	2201      	movs	r2, #1
 800a32a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 800a32c:	4b12      	ldr	r3, [pc, #72]	; (800a378 <MX_FDCAN1_Init+0x88>)
 800a32e:	2202      	movs	r2, #2
 800a330:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800a332:	4b11      	ldr	r3, [pc, #68]	; (800a378 <MX_FDCAN1_Init+0x88>)
 800a334:	2202      	movs	r2, #2
 800a336:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800a338:	4b0f      	ldr	r3, [pc, #60]	; (800a378 <MX_FDCAN1_Init+0x88>)
 800a33a:	2201      	movs	r2, #1
 800a33c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800a33e:	4b0e      	ldr	r3, [pc, #56]	; (800a378 <MX_FDCAN1_Init+0x88>)
 800a340:	2201      	movs	r2, #1
 800a342:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800a344:	4b0c      	ldr	r3, [pc, #48]	; (800a378 <MX_FDCAN1_Init+0x88>)
 800a346:	2201      	movs	r2, #1
 800a348:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800a34a:	4b0b      	ldr	r3, [pc, #44]	; (800a378 <MX_FDCAN1_Init+0x88>)
 800a34c:	2201      	movs	r2, #1
 800a34e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800a350:	4b09      	ldr	r3, [pc, #36]	; (800a378 <MX_FDCAN1_Init+0x88>)
 800a352:	2200      	movs	r2, #0
 800a354:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800a356:	4b08      	ldr	r3, [pc, #32]	; (800a378 <MX_FDCAN1_Init+0x88>)
 800a358:	2200      	movs	r2, #0
 800a35a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800a35c:	4b06      	ldr	r3, [pc, #24]	; (800a378 <MX_FDCAN1_Init+0x88>)
 800a35e:	2200      	movs	r2, #0
 800a360:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800a362:	4805      	ldr	r0, [pc, #20]	; (800a378 <MX_FDCAN1_Init+0x88>)
 800a364:	f7f7 fcf0 	bl	8001d48 <HAL_FDCAN_Init>
 800a368:	4603      	mov	r3, r0
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d001      	beq.n	800a372 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 800a36e:	f000 f99f 	bl	800a6b0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800a372:	bf00      	nop
 800a374:	bd80      	pop	{r7, pc}
 800a376:	bf00      	nop
 800a378:	200023c8 	.word	0x200023c8
 800a37c:	40006400 	.word	0x40006400

0800a380 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b086      	sub	sp, #24
 800a384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800a386:	1d3b      	adds	r3, r7, #4
 800a388:	2200      	movs	r2, #0
 800a38a:	601a      	str	r2, [r3, #0]
 800a38c:	605a      	str	r2, [r3, #4]
 800a38e:	609a      	str	r2, [r3, #8]
 800a390:	60da      	str	r2, [r3, #12]
 800a392:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800a394:	2300      	movs	r3, #0
 800a396:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800a398:	4b28      	ldr	r3, [pc, #160]	; (800a43c <MX_RTC_Init+0xbc>)
 800a39a:	4a29      	ldr	r2, [pc, #164]	; (800a440 <MX_RTC_Init+0xc0>)
 800a39c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800a39e:	4b27      	ldr	r3, [pc, #156]	; (800a43c <MX_RTC_Init+0xbc>)
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800a3a4:	4b25      	ldr	r3, [pc, #148]	; (800a43c <MX_RTC_Init+0xbc>)
 800a3a6:	227f      	movs	r2, #127	; 0x7f
 800a3a8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800a3aa:	4b24      	ldr	r3, [pc, #144]	; (800a43c <MX_RTC_Init+0xbc>)
 800a3ac:	22ff      	movs	r2, #255	; 0xff
 800a3ae:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800a3b0:	4b22      	ldr	r3, [pc, #136]	; (800a43c <MX_RTC_Init+0xbc>)
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800a3b6:	4b21      	ldr	r3, [pc, #132]	; (800a43c <MX_RTC_Init+0xbc>)
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800a3bc:	4b1f      	ldr	r3, [pc, #124]	; (800a43c <MX_RTC_Init+0xbc>)
 800a3be:	2200      	movs	r2, #0
 800a3c0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800a3c2:	4b1e      	ldr	r3, [pc, #120]	; (800a43c <MX_RTC_Init+0xbc>)
 800a3c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a3c8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800a3ca:	4b1c      	ldr	r3, [pc, #112]	; (800a43c <MX_RTC_Init+0xbc>)
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800a3d0:	481a      	ldr	r0, [pc, #104]	; (800a43c <MX_RTC_Init+0xbc>)
 800a3d2:	f7f9 ff27 	bl	8004224 <HAL_RTC_Init>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d001      	beq.n	800a3e0 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 800a3dc:	f000 f968 	bl	800a6b0 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	71bb      	strb	r3, [r7, #6]
  sTime.SubSeconds = 0x0;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	60bb      	str	r3, [r7, #8]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800a3f8:	1d3b      	adds	r3, r7, #4
 800a3fa:	2201      	movs	r2, #1
 800a3fc:	4619      	mov	r1, r3
 800a3fe:	480f      	ldr	r0, [pc, #60]	; (800a43c <MX_RTC_Init+0xbc>)
 800a400:	f7f9 ff7e 	bl	8004300 <HAL_RTC_SetTime>
 800a404:	4603      	mov	r3, r0
 800a406:	2b00      	cmp	r3, #0
 800a408:	d001      	beq.n	800a40e <MX_RTC_Init+0x8e>
  {
    Error_Handler();
 800a40a:	f000 f951 	bl	800a6b0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800a40e:	2301      	movs	r3, #1
 800a410:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800a412:	2301      	movs	r3, #1
 800a414:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800a416:	2301      	movs	r3, #1
 800a418:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800a41a:	2300      	movs	r3, #0
 800a41c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800a41e:	463b      	mov	r3, r7
 800a420:	2201      	movs	r2, #1
 800a422:	4619      	mov	r1, r3
 800a424:	4805      	ldr	r0, [pc, #20]	; (800a43c <MX_RTC_Init+0xbc>)
 800a426:	f7fa f801 	bl	800442c <HAL_RTC_SetDate>
 800a42a:	4603      	mov	r3, r0
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d001      	beq.n	800a434 <MX_RTC_Init+0xb4>
  {
    Error_Handler();
 800a430:	f000 f93e 	bl	800a6b0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800a434:	bf00      	nop
 800a436:	3718      	adds	r7, #24
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}
 800a43c:	200023a0 	.word	0x200023a0
 800a440:	40002800 	.word	0x40002800

0800a444 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800a448:	4b1b      	ldr	r3, [pc, #108]	; (800a4b8 <MX_SPI1_Init+0x74>)
 800a44a:	4a1c      	ldr	r2, [pc, #112]	; (800a4bc <MX_SPI1_Init+0x78>)
 800a44c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800a44e:	4b1a      	ldr	r3, [pc, #104]	; (800a4b8 <MX_SPI1_Init+0x74>)
 800a450:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a454:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800a456:	4b18      	ldr	r3, [pc, #96]	; (800a4b8 <MX_SPI1_Init+0x74>)
 800a458:	2200      	movs	r2, #0
 800a45a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800a45c:	4b16      	ldr	r3, [pc, #88]	; (800a4b8 <MX_SPI1_Init+0x74>)
 800a45e:	f44f 7240 	mov.w	r2, #768	; 0x300
 800a462:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a464:	4b14      	ldr	r3, [pc, #80]	; (800a4b8 <MX_SPI1_Init+0x74>)
 800a466:	2200      	movs	r2, #0
 800a468:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800a46a:	4b13      	ldr	r3, [pc, #76]	; (800a4b8 <MX_SPI1_Init+0x74>)
 800a46c:	2200      	movs	r2, #0
 800a46e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800a470:	4b11      	ldr	r3, [pc, #68]	; (800a4b8 <MX_SPI1_Init+0x74>)
 800a472:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800a476:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a478:	4b0f      	ldr	r3, [pc, #60]	; (800a4b8 <MX_SPI1_Init+0x74>)
 800a47a:	2200      	movs	r2, #0
 800a47c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a47e:	4b0e      	ldr	r3, [pc, #56]	; (800a4b8 <MX_SPI1_Init+0x74>)
 800a480:	2200      	movs	r2, #0
 800a482:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800a484:	4b0c      	ldr	r3, [pc, #48]	; (800a4b8 <MX_SPI1_Init+0x74>)
 800a486:	2200      	movs	r2, #0
 800a488:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a48a:	4b0b      	ldr	r3, [pc, #44]	; (800a4b8 <MX_SPI1_Init+0x74>)
 800a48c:	2200      	movs	r2, #0
 800a48e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800a490:	4b09      	ldr	r3, [pc, #36]	; (800a4b8 <MX_SPI1_Init+0x74>)
 800a492:	2207      	movs	r2, #7
 800a494:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800a496:	4b08      	ldr	r3, [pc, #32]	; (800a4b8 <MX_SPI1_Init+0x74>)
 800a498:	2200      	movs	r2, #0
 800a49a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800a49c:	4b06      	ldr	r3, [pc, #24]	; (800a4b8 <MX_SPI1_Init+0x74>)
 800a49e:	2208      	movs	r2, #8
 800a4a0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800a4a2:	4805      	ldr	r0, [pc, #20]	; (800a4b8 <MX_SPI1_Init+0x74>)
 800a4a4:	f7fa f900 	bl	80046a8 <HAL_SPI_Init>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d001      	beq.n	800a4b2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800a4ae:	f000 f8ff 	bl	800a6b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800a4b2:	bf00      	nop
 800a4b4:	bd80      	pop	{r7, pc}
 800a4b6:	bf00      	nop
 800a4b8:	20002474 	.word	0x20002474
 800a4bc:	40013000 	.word	0x40013000

0800a4c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b08c      	sub	sp, #48	; 0x30
 800a4c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a4c6:	f107 031c 	add.w	r3, r7, #28
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	601a      	str	r2, [r3, #0]
 800a4ce:	605a      	str	r2, [r3, #4]
 800a4d0:	609a      	str	r2, [r3, #8]
 800a4d2:	60da      	str	r2, [r3, #12]
 800a4d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a4d6:	4b6a      	ldr	r3, [pc, #424]	; (800a680 <MX_GPIO_Init+0x1c0>)
 800a4d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4da:	4a69      	ldr	r2, [pc, #420]	; (800a680 <MX_GPIO_Init+0x1c0>)
 800a4dc:	f043 0310 	orr.w	r3, r3, #16
 800a4e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a4e2:	4b67      	ldr	r3, [pc, #412]	; (800a680 <MX_GPIO_Init+0x1c0>)
 800a4e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4e6:	f003 0310 	and.w	r3, r3, #16
 800a4ea:	61bb      	str	r3, [r7, #24]
 800a4ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a4ee:	4b64      	ldr	r3, [pc, #400]	; (800a680 <MX_GPIO_Init+0x1c0>)
 800a4f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4f2:	4a63      	ldr	r2, [pc, #396]	; (800a680 <MX_GPIO_Init+0x1c0>)
 800a4f4:	f043 0304 	orr.w	r3, r3, #4
 800a4f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a4fa:	4b61      	ldr	r3, [pc, #388]	; (800a680 <MX_GPIO_Init+0x1c0>)
 800a4fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4fe:	f003 0304 	and.w	r3, r3, #4
 800a502:	617b      	str	r3, [r7, #20]
 800a504:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800a506:	4b5e      	ldr	r3, [pc, #376]	; (800a680 <MX_GPIO_Init+0x1c0>)
 800a508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a50a:	4a5d      	ldr	r2, [pc, #372]	; (800a680 <MX_GPIO_Init+0x1c0>)
 800a50c:	f043 0320 	orr.w	r3, r3, #32
 800a510:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a512:	4b5b      	ldr	r3, [pc, #364]	; (800a680 <MX_GPIO_Init+0x1c0>)
 800a514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a516:	f003 0320 	and.w	r3, r3, #32
 800a51a:	613b      	str	r3, [r7, #16]
 800a51c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a51e:	4b58      	ldr	r3, [pc, #352]	; (800a680 <MX_GPIO_Init+0x1c0>)
 800a520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a522:	4a57      	ldr	r2, [pc, #348]	; (800a680 <MX_GPIO_Init+0x1c0>)
 800a524:	f043 0301 	orr.w	r3, r3, #1
 800a528:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a52a:	4b55      	ldr	r3, [pc, #340]	; (800a680 <MX_GPIO_Init+0x1c0>)
 800a52c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a52e:	f003 0301 	and.w	r3, r3, #1
 800a532:	60fb      	str	r3, [r7, #12]
 800a534:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a536:	4b52      	ldr	r3, [pc, #328]	; (800a680 <MX_GPIO_Init+0x1c0>)
 800a538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a53a:	4a51      	ldr	r2, [pc, #324]	; (800a680 <MX_GPIO_Init+0x1c0>)
 800a53c:	f043 0302 	orr.w	r3, r3, #2
 800a540:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a542:	4b4f      	ldr	r3, [pc, #316]	; (800a680 <MX_GPIO_Init+0x1c0>)
 800a544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a546:	f003 0302 	and.w	r3, r3, #2
 800a54a:	60bb      	str	r3, [r7, #8]
 800a54c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a54e:	4b4c      	ldr	r3, [pc, #304]	; (800a680 <MX_GPIO_Init+0x1c0>)
 800a550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a552:	4a4b      	ldr	r2, [pc, #300]	; (800a680 <MX_GPIO_Init+0x1c0>)
 800a554:	f043 0308 	orr.w	r3, r3, #8
 800a558:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a55a:	4b49      	ldr	r3, [pc, #292]	; (800a680 <MX_GPIO_Init+0x1c0>)
 800a55c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a55e:	f003 0308 	and.w	r3, r3, #8
 800a562:	607b      	str	r3, [r7, #4]
 800a564:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PP5_Pin|PP6_Pin|PP7_Pin|PP8_Pin, GPIO_PIN_RESET);
 800a566:	2200      	movs	r2, #0
 800a568:	213c      	movs	r1, #60	; 0x3c
 800a56a:	4846      	ldr	r0, [pc, #280]	; (800a684 <MX_GPIO_Init+0x1c4>)
 800a56c:	f7f7 ff34 	bl	80023d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ST_EN_Pin|ST_DIR_Pin|LSD4_Pin|LSD3_Pin 
 800a570:	2200      	movs	r2, #0
 800a572:	f44f 7173 	mov.w	r1, #972	; 0x3cc
 800a576:	4844      	ldr	r0, [pc, #272]	; (800a688 <MX_GPIO_Init+0x1c8>)
 800a578:	f7f7 ff2e 	bl	80023d8 <HAL_GPIO_WritePin>
                          |LSD2_Pin|LSD1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST_STEP_GPIO_Port, ST_STEP_Pin, GPIO_PIN_RESET);
 800a57c:	2200      	movs	r2, #0
 800a57e:	2104      	movs	r1, #4
 800a580:	4842      	ldr	r0, [pc, #264]	; (800a68c <MX_GPIO_Init+0x1cc>)
 800a582:	f7f7 ff29 	bl	80023d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LSD9_Pin|LSD7_Pin|LSD6_Pin|LSD5_Pin, GPIO_PIN_RESET);
 800a586:	2200      	movs	r2, #0
 800a588:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800a58c:	4840      	ldr	r0, [pc, #256]	; (800a690 <MX_GPIO_Init+0x1d0>)
 800a58e:	f7f7 ff23 	bl	80023d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PP1_Pin|PP2_Pin|PP3_Pin|PP4_Pin, GPIO_PIN_RESET);
 800a592:	2200      	movs	r2, #0
 800a594:	21f0      	movs	r1, #240	; 0xf0
 800a596:	483f      	ldr	r0, [pc, #252]	; (800a694 <MX_GPIO_Init+0x1d4>)
 800a598:	f7f7 ff1e 	bl	80023d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PP5_Pin PP6_Pin PP7_Pin PP8_Pin */
  GPIO_InitStruct.Pin = PP5_Pin|PP6_Pin|PP7_Pin|PP8_Pin;
 800a59c:	233c      	movs	r3, #60	; 0x3c
 800a59e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a5a8:	2303      	movs	r3, #3
 800a5aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a5ac:	f107 031c 	add.w	r3, r7, #28
 800a5b0:	4619      	mov	r1, r3
 800a5b2:	4834      	ldr	r0, [pc, #208]	; (800a684 <MX_GPIO_Init+0x1c4>)
 800a5b4:	f7f7 fd8e 	bl	80020d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ST_EN_Pin ST_DIR_Pin */
  GPIO_InitStruct.Pin = ST_EN_Pin|ST_DIR_Pin;
 800a5b8:	230c      	movs	r3, #12
 800a5ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a5bc:	2301      	movs	r3, #1
 800a5be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a5c8:	f107 031c 	add.w	r3, r7, #28
 800a5cc:	4619      	mov	r1, r3
 800a5ce:	482e      	ldr	r0, [pc, #184]	; (800a688 <MX_GPIO_Init+0x1c8>)
 800a5d0:	f7f7 fd80 	bl	80020d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ST_STEP_Pin */
  GPIO_InitStruct.Pin = ST_STEP_Pin;
 800a5d4:	2304      	movs	r3, #4
 800a5d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a5d8:	2301      	movs	r3, #1
 800a5da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(ST_STEP_GPIO_Port, &GPIO_InitStruct);
 800a5e4:	f107 031c 	add.w	r3, r7, #28
 800a5e8:	4619      	mov	r1, r3
 800a5ea:	4828      	ldr	r0, [pc, #160]	; (800a68c <MX_GPIO_Init+0x1cc>)
 800a5ec:	f7f7 fd72 	bl	80020d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_DETECT_Pin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 800a5f0:	2310      	movs	r3, #16
 800a5f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 800a5fc:	f107 031c 	add.w	r3, r7, #28
 800a600:	4619      	mov	r1, r3
 800a602:	4821      	ldr	r0, [pc, #132]	; (800a688 <MX_GPIO_Init+0x1c8>)
 800a604:	f7f7 fd66 	bl	80020d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LSD9_Pin LSD7_Pin LSD6_Pin LSD5_Pin */
  GPIO_InitStruct.Pin = LSD9_Pin|LSD7_Pin|LSD6_Pin|LSD5_Pin;
 800a608:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800a60c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a60e:	2301      	movs	r3, #1
 800a610:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a612:	2300      	movs	r3, #0
 800a614:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a616:	2303      	movs	r3, #3
 800a618:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a61a:	f107 031c 	add.w	r3, r7, #28
 800a61e:	4619      	mov	r1, r3
 800a620:	481b      	ldr	r0, [pc, #108]	; (800a690 <MX_GPIO_Init+0x1d0>)
 800a622:	f7f7 fd57 	bl	80020d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LSD4_Pin LSD3_Pin LSD2_Pin LSD1_Pin */
  GPIO_InitStruct.Pin = LSD4_Pin|LSD3_Pin|LSD2_Pin|LSD1_Pin;
 800a626:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800a62a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a62c:	2301      	movs	r3, #1
 800a62e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a630:	2300      	movs	r3, #0
 800a632:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a634:	2303      	movs	r3, #3
 800a636:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a638:	f107 031c 	add.w	r3, r7, #28
 800a63c:	4619      	mov	r1, r3
 800a63e:	4812      	ldr	r0, [pc, #72]	; (800a688 <MX_GPIO_Init+0x1c8>)
 800a640:	f7f7 fd48 	bl	80020d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PP1_Pin PP2_Pin PP3_Pin PP4_Pin */
  GPIO_InitStruct.Pin = PP1_Pin|PP2_Pin|PP3_Pin|PP4_Pin;
 800a644:	23f0      	movs	r3, #240	; 0xf0
 800a646:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a648:	2301      	movs	r3, #1
 800a64a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a64c:	2300      	movs	r3, #0
 800a64e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a650:	2303      	movs	r3, #3
 800a652:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a654:	f107 031c 	add.w	r3, r7, #28
 800a658:	4619      	mov	r1, r3
 800a65a:	480e      	ldr	r0, [pc, #56]	; (800a694 <MX_GPIO_Init+0x1d4>)
 800a65c:	f7f7 fd3a 	bl	80020d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : NEUTRAL_SW_Pin IDLE_SW_Pin */
  GPIO_InitStruct.Pin = NEUTRAL_SW_Pin|IDLE_SW_Pin;
 800a660:	2303      	movs	r3, #3
 800a662:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a664:	2300      	movs	r3, #0
 800a666:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a668:	2300      	movs	r3, #0
 800a66a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a66c:	f107 031c 	add.w	r3, r7, #28
 800a670:	4619      	mov	r1, r3
 800a672:	4804      	ldr	r0, [pc, #16]	; (800a684 <MX_GPIO_Init+0x1c4>)
 800a674:	f7f7 fd2e 	bl	80020d4 <HAL_GPIO_Init>

}
 800a678:	bf00      	nop
 800a67a:	3730      	adds	r7, #48	; 0x30
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}
 800a680:	40021000 	.word	0x40021000
 800a684:	48001000 	.word	0x48001000
 800a688:	48000800 	.word	0x48000800
 800a68c:	48001400 	.word	0x48001400
 800a690:	48000c00 	.word	0x48000c00
 800a694:	48000400 	.word	0x48000400

0800a698 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b082      	sub	sp, #8
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
  /* init code for USB_Device */
  MX_USB_Device_Init();
 800a6a0:	f000 fb80 	bl	800ada4 <MX_USB_Device_Init>

  /* init code for FATFS */
  MX_FATFS_Init();
 800a6a4:	f7ff fa92 	bl	8009bcc <MX_FATFS_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800a6a8:	2001      	movs	r0, #1
 800a6aa:	f7fc fe9f 	bl	80073ec <osDelay>
 800a6ae:	e7fb      	b.n	800a6a8 <StartDefaultTask+0x10>

0800a6b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800a6b4:	bf00      	nop
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6bc:	4770      	bx	lr
	...

0800a6c0 <LL_PWR_DisableDeadBatteryPD>:
  * @brief  Disable USB Type-C and Power Delivery Dead Battery disable
  * @rmtoll CR3          UCPD_DBDIS          LL_PWR_DisableDeadBatteryPD
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableDeadBatteryPD(void)
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800a6c4:	4b05      	ldr	r3, [pc, #20]	; (800a6dc <LL_PWR_DisableDeadBatteryPD+0x1c>)
 800a6c6:	689b      	ldr	r3, [r3, #8]
 800a6c8:	4a04      	ldr	r2, [pc, #16]	; (800a6dc <LL_PWR_DisableDeadBatteryPD+0x1c>)
 800a6ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a6ce:	6093      	str	r3, [r2, #8]
}
 800a6d0:	bf00      	nop
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d8:	4770      	bx	lr
 800a6da:	bf00      	nop
 800a6dc:	40007000 	.word	0x40007000

0800a6e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b082      	sub	sp, #8
 800a6e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a6e6:	4b12      	ldr	r3, [pc, #72]	; (800a730 <HAL_MspInit+0x50>)
 800a6e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6ea:	4a11      	ldr	r2, [pc, #68]	; (800a730 <HAL_MspInit+0x50>)
 800a6ec:	f043 0301 	orr.w	r3, r3, #1
 800a6f0:	6613      	str	r3, [r2, #96]	; 0x60
 800a6f2:	4b0f      	ldr	r3, [pc, #60]	; (800a730 <HAL_MspInit+0x50>)
 800a6f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6f6:	f003 0301 	and.w	r3, r3, #1
 800a6fa:	607b      	str	r3, [r7, #4]
 800a6fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a6fe:	4b0c      	ldr	r3, [pc, #48]	; (800a730 <HAL_MspInit+0x50>)
 800a700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a702:	4a0b      	ldr	r2, [pc, #44]	; (800a730 <HAL_MspInit+0x50>)
 800a704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a708:	6593      	str	r3, [r2, #88]	; 0x58
 800a70a:	4b09      	ldr	r3, [pc, #36]	; (800a730 <HAL_MspInit+0x50>)
 800a70c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a70e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a712:	603b      	str	r3, [r7, #0]
 800a714:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800a716:	2200      	movs	r2, #0
 800a718:	210f      	movs	r1, #15
 800a71a:	f06f 0001 	mvn.w	r0, #1
 800a71e:	f7f7 fade 	bl	8001cde <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 800a722:	f7ff ffcd 	bl	800a6c0 <LL_PWR_DisableDeadBatteryPD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a726:	bf00      	nop
 800a728:	3708      	adds	r7, #8
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}
 800a72e:	bf00      	nop
 800a730:	40021000 	.word	0x40021000

0800a734 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b094      	sub	sp, #80	; 0x50
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a73c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a740:	2200      	movs	r2, #0
 800a742:	601a      	str	r2, [r3, #0]
 800a744:	605a      	str	r2, [r3, #4]
 800a746:	609a      	str	r2, [r3, #8]
 800a748:	60da      	str	r2, [r3, #12]
 800a74a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a754:	d12e      	bne.n	800a7b4 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800a756:	4b71      	ldr	r3, [pc, #452]	; (800a91c <HAL_ADC_MspInit+0x1e8>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	3301      	adds	r3, #1
 800a75c:	4a6f      	ldr	r2, [pc, #444]	; (800a91c <HAL_ADC_MspInit+0x1e8>)
 800a75e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800a760:	4b6e      	ldr	r3, [pc, #440]	; (800a91c <HAL_ADC_MspInit+0x1e8>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	2b01      	cmp	r3, #1
 800a766:	d10b      	bne.n	800a780 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800a768:	4b6d      	ldr	r3, [pc, #436]	; (800a920 <HAL_ADC_MspInit+0x1ec>)
 800a76a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a76c:	4a6c      	ldr	r2, [pc, #432]	; (800a920 <HAL_ADC_MspInit+0x1ec>)
 800a76e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a772:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a774:	4b6a      	ldr	r3, [pc, #424]	; (800a920 <HAL_ADC_MspInit+0x1ec>)
 800a776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a778:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a77c:	63bb      	str	r3, [r7, #56]	; 0x38
 800a77e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a780:	4b67      	ldr	r3, [pc, #412]	; (800a920 <HAL_ADC_MspInit+0x1ec>)
 800a782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a784:	4a66      	ldr	r2, [pc, #408]	; (800a920 <HAL_ADC_MspInit+0x1ec>)
 800a786:	f043 0301 	orr.w	r3, r3, #1
 800a78a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a78c:	4b64      	ldr	r3, [pc, #400]	; (800a920 <HAL_ADC_MspInit+0x1ec>)
 800a78e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a790:	f003 0301 	and.w	r3, r3, #1
 800a794:	637b      	str	r3, [r7, #52]	; 0x34
 800a796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800a798:	2303      	movs	r3, #3
 800a79a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a79c:	2303      	movs	r3, #3
 800a79e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a7a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a7a8:	4619      	mov	r1, r3
 800a7aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a7ae:	f7f7 fc91 	bl	80020d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 800a7b2:	e12b      	b.n	800aa0c <HAL_ADC_MspInit+0x2d8>
  else if(hadc->Instance==ADC2)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	4a5a      	ldr	r2, [pc, #360]	; (800a924 <HAL_ADC_MspInit+0x1f0>)
 800a7ba:	4293      	cmp	r3, r2
 800a7bc:	d12d      	bne.n	800a81a <HAL_ADC_MspInit+0xe6>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800a7be:	4b57      	ldr	r3, [pc, #348]	; (800a91c <HAL_ADC_MspInit+0x1e8>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	3301      	adds	r3, #1
 800a7c4:	4a55      	ldr	r2, [pc, #340]	; (800a91c <HAL_ADC_MspInit+0x1e8>)
 800a7c6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800a7c8:	4b54      	ldr	r3, [pc, #336]	; (800a91c <HAL_ADC_MspInit+0x1e8>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	2b01      	cmp	r3, #1
 800a7ce:	d10b      	bne.n	800a7e8 <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800a7d0:	4b53      	ldr	r3, [pc, #332]	; (800a920 <HAL_ADC_MspInit+0x1ec>)
 800a7d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7d4:	4a52      	ldr	r2, [pc, #328]	; (800a920 <HAL_ADC_MspInit+0x1ec>)
 800a7d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a7da:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a7dc:	4b50      	ldr	r3, [pc, #320]	; (800a920 <HAL_ADC_MspInit+0x1ec>)
 800a7de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a7e4:	633b      	str	r3, [r7, #48]	; 0x30
 800a7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a7e8:	4b4d      	ldr	r3, [pc, #308]	; (800a920 <HAL_ADC_MspInit+0x1ec>)
 800a7ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7ec:	4a4c      	ldr	r2, [pc, #304]	; (800a920 <HAL_ADC_MspInit+0x1ec>)
 800a7ee:	f043 0304 	orr.w	r3, r3, #4
 800a7f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a7f4:	4b4a      	ldr	r3, [pc, #296]	; (800a920 <HAL_ADC_MspInit+0x1ec>)
 800a7f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7f8:	f003 0304 	and.w	r3, r3, #4
 800a7fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a7fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800a800:	2320      	movs	r3, #32
 800a802:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a804:	2303      	movs	r3, #3
 800a806:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a808:	2300      	movs	r3, #0
 800a80a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a80c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a810:	4619      	mov	r1, r3
 800a812:	4845      	ldr	r0, [pc, #276]	; (800a928 <HAL_ADC_MspInit+0x1f4>)
 800a814:	f7f7 fc5e 	bl	80020d4 <HAL_GPIO_Init>
}
 800a818:	e0f8      	b.n	800aa0c <HAL_ADC_MspInit+0x2d8>
  else if(hadc->Instance==ADC3)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	4a43      	ldr	r2, [pc, #268]	; (800a92c <HAL_ADC_MspInit+0x1f8>)
 800a820:	4293      	cmp	r3, r2
 800a822:	d12e      	bne.n	800a882 <HAL_ADC_MspInit+0x14e>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800a824:	4b42      	ldr	r3, [pc, #264]	; (800a930 <HAL_ADC_MspInit+0x1fc>)
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	3301      	adds	r3, #1
 800a82a:	4a41      	ldr	r2, [pc, #260]	; (800a930 <HAL_ADC_MspInit+0x1fc>)
 800a82c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 800a82e:	4b40      	ldr	r3, [pc, #256]	; (800a930 <HAL_ADC_MspInit+0x1fc>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	2b01      	cmp	r3, #1
 800a834:	d10b      	bne.n	800a84e <HAL_ADC_MspInit+0x11a>
      __HAL_RCC_ADC345_CLK_ENABLE();
 800a836:	4b3a      	ldr	r3, [pc, #232]	; (800a920 <HAL_ADC_MspInit+0x1ec>)
 800a838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a83a:	4a39      	ldr	r2, [pc, #228]	; (800a920 <HAL_ADC_MspInit+0x1ec>)
 800a83c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a840:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a842:	4b37      	ldr	r3, [pc, #220]	; (800a920 <HAL_ADC_MspInit+0x1ec>)
 800a844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a84a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a84c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800a84e:	4b34      	ldr	r3, [pc, #208]	; (800a920 <HAL_ADC_MspInit+0x1ec>)
 800a850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a852:	4a33      	ldr	r2, [pc, #204]	; (800a920 <HAL_ADC_MspInit+0x1ec>)
 800a854:	f043 0310 	orr.w	r3, r3, #16
 800a858:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a85a:	4b31      	ldr	r3, [pc, #196]	; (800a920 <HAL_ADC_MspInit+0x1ec>)
 800a85c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a85e:	f003 0310 	and.w	r3, r3, #16
 800a862:	627b      	str	r3, [r7, #36]	; 0x24
 800a864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800a866:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a86a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a86c:	2303      	movs	r3, #3
 800a86e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a870:	2300      	movs	r3, #0
 800a872:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a874:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a878:	4619      	mov	r1, r3
 800a87a:	482e      	ldr	r0, [pc, #184]	; (800a934 <HAL_ADC_MspInit+0x200>)
 800a87c:	f7f7 fc2a 	bl	80020d4 <HAL_GPIO_Init>
}
 800a880:	e0c4      	b.n	800aa0c <HAL_ADC_MspInit+0x2d8>
  else if(hadc->Instance==ADC4)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	4a2c      	ldr	r2, [pc, #176]	; (800a938 <HAL_ADC_MspInit+0x204>)
 800a888:	4293      	cmp	r3, r2
 800a88a:	d159      	bne.n	800a940 <HAL_ADC_MspInit+0x20c>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800a88c:	4b28      	ldr	r3, [pc, #160]	; (800a930 <HAL_ADC_MspInit+0x1fc>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	3301      	adds	r3, #1
 800a892:	4a27      	ldr	r2, [pc, #156]	; (800a930 <HAL_ADC_MspInit+0x1fc>)
 800a894:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 800a896:	4b26      	ldr	r3, [pc, #152]	; (800a930 <HAL_ADC_MspInit+0x1fc>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	2b01      	cmp	r3, #1
 800a89c:	d10b      	bne.n	800a8b6 <HAL_ADC_MspInit+0x182>
      __HAL_RCC_ADC345_CLK_ENABLE();
 800a89e:	4b20      	ldr	r3, [pc, #128]	; (800a920 <HAL_ADC_MspInit+0x1ec>)
 800a8a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8a2:	4a1f      	ldr	r2, [pc, #124]	; (800a920 <HAL_ADC_MspInit+0x1ec>)
 800a8a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a8a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a8aa:	4b1d      	ldr	r3, [pc, #116]	; (800a920 <HAL_ADC_MspInit+0x1ec>)
 800a8ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a8b2:	623b      	str	r3, [r7, #32]
 800a8b4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800a8b6:	4b1a      	ldr	r3, [pc, #104]	; (800a920 <HAL_ADC_MspInit+0x1ec>)
 800a8b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8ba:	4a19      	ldr	r2, [pc, #100]	; (800a920 <HAL_ADC_MspInit+0x1ec>)
 800a8bc:	f043 0310 	orr.w	r3, r3, #16
 800a8c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a8c2:	4b17      	ldr	r3, [pc, #92]	; (800a920 <HAL_ADC_MspInit+0x1ec>)
 800a8c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8c6:	f003 0310 	and.w	r3, r3, #16
 800a8ca:	61fb      	str	r3, [r7, #28]
 800a8cc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a8ce:	4b14      	ldr	r3, [pc, #80]	; (800a920 <HAL_ADC_MspInit+0x1ec>)
 800a8d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8d2:	4a13      	ldr	r2, [pc, #76]	; (800a920 <HAL_ADC_MspInit+0x1ec>)
 800a8d4:	f043 0302 	orr.w	r3, r3, #2
 800a8d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a8da:	4b11      	ldr	r3, [pc, #68]	; (800a920 <HAL_ADC_MspInit+0x1ec>)
 800a8dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8de:	f003 0302 	and.w	r3, r3, #2
 800a8e2:	61bb      	str	r3, [r7, #24]
 800a8e4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800a8e6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800a8ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a8ec:	2303      	movs	r3, #3
 800a8ee:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a8f4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a8f8:	4619      	mov	r1, r3
 800a8fa:	480e      	ldr	r0, [pc, #56]	; (800a934 <HAL_ADC_MspInit+0x200>)
 800a8fc:	f7f7 fbea 	bl	80020d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800a900:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a904:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a906:	2303      	movs	r3, #3
 800a908:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a90a:	2300      	movs	r3, #0
 800a90c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a90e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a912:	4619      	mov	r1, r3
 800a914:	4809      	ldr	r0, [pc, #36]	; (800a93c <HAL_ADC_MspInit+0x208>)
 800a916:	f7f7 fbdd 	bl	80020d4 <HAL_GPIO_Init>
}
 800a91a:	e077      	b.n	800aa0c <HAL_ADC_MspInit+0x2d8>
 800a91c:	20001ad0 	.word	0x20001ad0
 800a920:	40021000 	.word	0x40021000
 800a924:	50000100 	.word	0x50000100
 800a928:	48000800 	.word	0x48000800
 800a92c:	50000400 	.word	0x50000400
 800a930:	20001ad4 	.word	0x20001ad4
 800a934:	48001000 	.word	0x48001000
 800a938:	50000500 	.word	0x50000500
 800a93c:	48000400 	.word	0x48000400
  else if(hadc->Instance==ADC5)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	4a33      	ldr	r2, [pc, #204]	; (800aa14 <HAL_ADC_MspInit+0x2e0>)
 800a946:	4293      	cmp	r3, r2
 800a948:	d160      	bne.n	800aa0c <HAL_ADC_MspInit+0x2d8>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800a94a:	4b33      	ldr	r3, [pc, #204]	; (800aa18 <HAL_ADC_MspInit+0x2e4>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	3301      	adds	r3, #1
 800a950:	4a31      	ldr	r2, [pc, #196]	; (800aa18 <HAL_ADC_MspInit+0x2e4>)
 800a952:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 800a954:	4b30      	ldr	r3, [pc, #192]	; (800aa18 <HAL_ADC_MspInit+0x2e4>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	2b01      	cmp	r3, #1
 800a95a:	d10b      	bne.n	800a974 <HAL_ADC_MspInit+0x240>
      __HAL_RCC_ADC345_CLK_ENABLE();
 800a95c:	4b2f      	ldr	r3, [pc, #188]	; (800aa1c <HAL_ADC_MspInit+0x2e8>)
 800a95e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a960:	4a2e      	ldr	r2, [pc, #184]	; (800aa1c <HAL_ADC_MspInit+0x2e8>)
 800a962:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a966:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a968:	4b2c      	ldr	r3, [pc, #176]	; (800aa1c <HAL_ADC_MspInit+0x2e8>)
 800a96a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a96c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a970:	617b      	str	r3, [r7, #20]
 800a972:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800a974:	4b29      	ldr	r3, [pc, #164]	; (800aa1c <HAL_ADC_MspInit+0x2e8>)
 800a976:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a978:	4a28      	ldr	r2, [pc, #160]	; (800aa1c <HAL_ADC_MspInit+0x2e8>)
 800a97a:	f043 0310 	orr.w	r3, r3, #16
 800a97e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a980:	4b26      	ldr	r3, [pc, #152]	; (800aa1c <HAL_ADC_MspInit+0x2e8>)
 800a982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a984:	f003 0310 	and.w	r3, r3, #16
 800a988:	613b      	str	r3, [r7, #16]
 800a98a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a98c:	4b23      	ldr	r3, [pc, #140]	; (800aa1c <HAL_ADC_MspInit+0x2e8>)
 800a98e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a990:	4a22      	ldr	r2, [pc, #136]	; (800aa1c <HAL_ADC_MspInit+0x2e8>)
 800a992:	f043 0308 	orr.w	r3, r3, #8
 800a996:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a998:	4b20      	ldr	r3, [pc, #128]	; (800aa1c <HAL_ADC_MspInit+0x2e8>)
 800a99a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a99c:	f003 0308 	and.w	r3, r3, #8
 800a9a0:	60fb      	str	r3, [r7, #12]
 800a9a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a9a4:	4b1d      	ldr	r3, [pc, #116]	; (800aa1c <HAL_ADC_MspInit+0x2e8>)
 800a9a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9a8:	4a1c      	ldr	r2, [pc, #112]	; (800aa1c <HAL_ADC_MspInit+0x2e8>)
 800a9aa:	f043 0301 	orr.w	r3, r3, #1
 800a9ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a9b0:	4b1a      	ldr	r3, [pc, #104]	; (800aa1c <HAL_ADC_MspInit+0x2e8>)
 800a9b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9b4:	f003 0301 	and.w	r3, r3, #1
 800a9b8:	60bb      	str	r3, [r7, #8]
 800a9ba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800a9bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a9c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a9c2:	2303      	movs	r3, #3
 800a9c4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a9ca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a9ce:	4619      	mov	r1, r3
 800a9d0:	4813      	ldr	r0, [pc, #76]	; (800aa20 <HAL_ADC_MspInit+0x2ec>)
 800a9d2:	f7f7 fb7f 	bl	80020d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800a9d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9da:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a9dc:	2303      	movs	r3, #3
 800a9de:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a9e4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a9e8:	4619      	mov	r1, r3
 800a9ea:	480e      	ldr	r0, [pc, #56]	; (800aa24 <HAL_ADC_MspInit+0x2f0>)
 800a9ec:	f7f7 fb72 	bl	80020d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800a9f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a9f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a9f6:	2303      	movs	r3, #3
 800a9f8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a9fe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800aa02:	4619      	mov	r1, r3
 800aa04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800aa08:	f7f7 fb64 	bl	80020d4 <HAL_GPIO_Init>
}
 800aa0c:	bf00      	nop
 800aa0e:	3750      	adds	r7, #80	; 0x50
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bd80      	pop	{r7, pc}
 800aa14:	50000600 	.word	0x50000600
 800aa18:	20001ad4 	.word	0x20001ad4
 800aa1c:	40021000 	.word	0x40021000
 800aa20:	48001000 	.word	0x48001000
 800aa24:	48000c00 	.word	0x48000c00

0800aa28 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b08c      	sub	sp, #48	; 0x30
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aa30:	f107 031c 	add.w	r3, r7, #28
 800aa34:	2200      	movs	r2, #0
 800aa36:	601a      	str	r2, [r3, #0]
 800aa38:	605a      	str	r2, [r3, #4]
 800aa3a:	609a      	str	r2, [r3, #8]
 800aa3c:	60da      	str	r2, [r3, #12]
 800aa3e:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	4a4c      	ldr	r2, [pc, #304]	; (800ab78 <HAL_COMP_MspInit+0x150>)
 800aa46:	4293      	cmp	r3, r2
 800aa48:	d120      	bne.n	800aa8c <HAL_COMP_MspInit+0x64>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800aa4a:	4b4c      	ldr	r3, [pc, #304]	; (800ab7c <HAL_COMP_MspInit+0x154>)
 800aa4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa4e:	4a4b      	ldr	r2, [pc, #300]	; (800ab7c <HAL_COMP_MspInit+0x154>)
 800aa50:	f043 0302 	orr.w	r3, r3, #2
 800aa54:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aa56:	4b49      	ldr	r3, [pc, #292]	; (800ab7c <HAL_COMP_MspInit+0x154>)
 800aa58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa5a:	f003 0302 	and.w	r3, r3, #2
 800aa5e:	61bb      	str	r3, [r7, #24]
 800aa60:	69bb      	ldr	r3, [r7, #24]
    /**COMP1 GPIO Configuration    
    PB1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800aa62:	2302      	movs	r3, #2
 800aa64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800aa66:	2303      	movs	r3, #3
 800aa68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800aa6e:	f107 031c 	add.w	r3, r7, #28
 800aa72:	4619      	mov	r1, r3
 800aa74:	4842      	ldr	r0, [pc, #264]	; (800ab80 <HAL_COMP_MspInit+0x158>)
 800aa76:	f7f7 fb2d 	bl	80020d4 <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP1_2_3_IRQn, 5, 0);
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	2105      	movs	r1, #5
 800aa7e:	2040      	movs	r0, #64	; 0x40
 800aa80:	f7f7 f92d 	bl	8001cde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP1_2_3_IRQn);
 800aa84:	2040      	movs	r0, #64	; 0x40
 800aa86:	f7f7 f944 	bl	8001d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP4_MspInit 1 */

  /* USER CODE END COMP4_MspInit 1 */
  }

}
 800aa8a:	e071      	b.n	800ab70 <HAL_COMP_MspInit+0x148>
  else if(hcomp->Instance==COMP2)
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	4a3c      	ldr	r2, [pc, #240]	; (800ab84 <HAL_COMP_MspInit+0x15c>)
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d121      	bne.n	800aada <HAL_COMP_MspInit+0xb2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aa96:	4b39      	ldr	r3, [pc, #228]	; (800ab7c <HAL_COMP_MspInit+0x154>)
 800aa98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa9a:	4a38      	ldr	r2, [pc, #224]	; (800ab7c <HAL_COMP_MspInit+0x154>)
 800aa9c:	f043 0301 	orr.w	r3, r3, #1
 800aaa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aaa2:	4b36      	ldr	r3, [pc, #216]	; (800ab7c <HAL_COMP_MspInit+0x154>)
 800aaa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aaa6:	f003 0301 	and.w	r3, r3, #1
 800aaaa:	617b      	str	r3, [r7, #20]
 800aaac:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800aaae:	2308      	movs	r3, #8
 800aab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800aab2:	2303      	movs	r3, #3
 800aab4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aab6:	2300      	movs	r3, #0
 800aab8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aaba:	f107 031c 	add.w	r3, r7, #28
 800aabe:	4619      	mov	r1, r3
 800aac0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800aac4:	f7f7 fb06 	bl	80020d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(COMP1_2_3_IRQn, 5, 0);
 800aac8:	2200      	movs	r2, #0
 800aaca:	2105      	movs	r1, #5
 800aacc:	2040      	movs	r0, #64	; 0x40
 800aace:	f7f7 f906 	bl	8001cde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP1_2_3_IRQn);
 800aad2:	2040      	movs	r0, #64	; 0x40
 800aad4:	f7f7 f91d 	bl	8001d12 <HAL_NVIC_EnableIRQ>
}
 800aad8:	e04a      	b.n	800ab70 <HAL_COMP_MspInit+0x148>
  else if(hcomp->Instance==COMP3)
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	4a2a      	ldr	r2, [pc, #168]	; (800ab88 <HAL_COMP_MspInit+0x160>)
 800aae0:	4293      	cmp	r3, r2
 800aae2:	d120      	bne.n	800ab26 <HAL_COMP_MspInit+0xfe>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800aae4:	4b25      	ldr	r3, [pc, #148]	; (800ab7c <HAL_COMP_MspInit+0x154>)
 800aae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aae8:	4a24      	ldr	r2, [pc, #144]	; (800ab7c <HAL_COMP_MspInit+0x154>)
 800aaea:	f043 0304 	orr.w	r3, r3, #4
 800aaee:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aaf0:	4b22      	ldr	r3, [pc, #136]	; (800ab7c <HAL_COMP_MspInit+0x154>)
 800aaf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aaf4:	f003 0304 	and.w	r3, r3, #4
 800aaf8:	613b      	str	r3, [r7, #16]
 800aafa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800aafc:	2302      	movs	r3, #2
 800aafe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ab00:	2303      	movs	r3, #3
 800ab02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab04:	2300      	movs	r3, #0
 800ab06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ab08:	f107 031c 	add.w	r3, r7, #28
 800ab0c:	4619      	mov	r1, r3
 800ab0e:	481f      	ldr	r0, [pc, #124]	; (800ab8c <HAL_COMP_MspInit+0x164>)
 800ab10:	f7f7 fae0 	bl	80020d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(COMP1_2_3_IRQn, 5, 0);
 800ab14:	2200      	movs	r2, #0
 800ab16:	2105      	movs	r1, #5
 800ab18:	2040      	movs	r0, #64	; 0x40
 800ab1a:	f7f7 f8e0 	bl	8001cde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP1_2_3_IRQn);
 800ab1e:	2040      	movs	r0, #64	; 0x40
 800ab20:	f7f7 f8f7 	bl	8001d12 <HAL_NVIC_EnableIRQ>
}
 800ab24:	e024      	b.n	800ab70 <HAL_COMP_MspInit+0x148>
  else if(hcomp->Instance==COMP4)
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	4a19      	ldr	r2, [pc, #100]	; (800ab90 <HAL_COMP_MspInit+0x168>)
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d11f      	bne.n	800ab70 <HAL_COMP_MspInit+0x148>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ab30:	4b12      	ldr	r3, [pc, #72]	; (800ab7c <HAL_COMP_MspInit+0x154>)
 800ab32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab34:	4a11      	ldr	r2, [pc, #68]	; (800ab7c <HAL_COMP_MspInit+0x154>)
 800ab36:	f043 0302 	orr.w	r3, r3, #2
 800ab3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ab3c:	4b0f      	ldr	r3, [pc, #60]	; (800ab7c <HAL_COMP_MspInit+0x154>)
 800ab3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab40:	f003 0302 	and.w	r3, r3, #2
 800ab44:	60fb      	str	r3, [r7, #12]
 800ab46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800ab48:	2301      	movs	r3, #1
 800ab4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ab4c:	2303      	movs	r3, #3
 800ab4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab50:	2300      	movs	r3, #0
 800ab52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ab54:	f107 031c 	add.w	r3, r7, #28
 800ab58:	4619      	mov	r1, r3
 800ab5a:	4809      	ldr	r0, [pc, #36]	; (800ab80 <HAL_COMP_MspInit+0x158>)
 800ab5c:	f7f7 faba 	bl	80020d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(COMP4_5_6_IRQn, 5, 0);
 800ab60:	2200      	movs	r2, #0
 800ab62:	2105      	movs	r1, #5
 800ab64:	2041      	movs	r0, #65	; 0x41
 800ab66:	f7f7 f8ba 	bl	8001cde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP4_5_6_IRQn);
 800ab6a:	2041      	movs	r0, #65	; 0x41
 800ab6c:	f7f7 f8d1 	bl	8001d12 <HAL_NVIC_EnableIRQ>
}
 800ab70:	bf00      	nop
 800ab72:	3730      	adds	r7, #48	; 0x30
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}
 800ab78:	40010200 	.word	0x40010200
 800ab7c:	40021000 	.word	0x40021000
 800ab80:	48000400 	.word	0x48000400
 800ab84:	40010204 	.word	0x40010204
 800ab88:	40010208 	.word	0x40010208
 800ab8c:	48000800 	.word	0x48000800
 800ab90:	4001020c 	.word	0x4001020c

0800ab94 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b08a      	sub	sp, #40	; 0x28
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ab9c:	f107 0314 	add.w	r3, r7, #20
 800aba0:	2200      	movs	r2, #0
 800aba2:	601a      	str	r2, [r3, #0]
 800aba4:	605a      	str	r2, [r3, #4]
 800aba6:	609a      	str	r2, [r3, #8]
 800aba8:	60da      	str	r2, [r3, #12]
 800abaa:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	4a17      	ldr	r2, [pc, #92]	; (800ac10 <HAL_FDCAN_MspInit+0x7c>)
 800abb2:	4293      	cmp	r3, r2
 800abb4:	d127      	bne.n	800ac06 <HAL_FDCAN_MspInit+0x72>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800abb6:	4b17      	ldr	r3, [pc, #92]	; (800ac14 <HAL_FDCAN_MspInit+0x80>)
 800abb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abba:	4a16      	ldr	r2, [pc, #88]	; (800ac14 <HAL_FDCAN_MspInit+0x80>)
 800abbc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800abc0:	6593      	str	r3, [r2, #88]	; 0x58
 800abc2:	4b14      	ldr	r3, [pc, #80]	; (800ac14 <HAL_FDCAN_MspInit+0x80>)
 800abc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abca:	613b      	str	r3, [r7, #16]
 800abcc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800abce:	4b11      	ldr	r3, [pc, #68]	; (800ac14 <HAL_FDCAN_MspInit+0x80>)
 800abd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abd2:	4a10      	ldr	r2, [pc, #64]	; (800ac14 <HAL_FDCAN_MspInit+0x80>)
 800abd4:	f043 0308 	orr.w	r3, r3, #8
 800abd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800abda:	4b0e      	ldr	r3, [pc, #56]	; (800ac14 <HAL_FDCAN_MspInit+0x80>)
 800abdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abde:	f003 0308 	and.w	r3, r3, #8
 800abe2:	60fb      	str	r3, [r7, #12]
 800abe4:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration    
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800abe6:	2303      	movs	r3, #3
 800abe8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800abea:	2302      	movs	r3, #2
 800abec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abee:	2300      	movs	r3, #0
 800abf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800abf2:	2300      	movs	r3, #0
 800abf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800abf6:	2309      	movs	r3, #9
 800abf8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800abfa:	f107 0314 	add.w	r3, r7, #20
 800abfe:	4619      	mov	r1, r3
 800ac00:	4805      	ldr	r0, [pc, #20]	; (800ac18 <HAL_FDCAN_MspInit+0x84>)
 800ac02:	f7f7 fa67 	bl	80020d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 800ac06:	bf00      	nop
 800ac08:	3728      	adds	r7, #40	; 0x28
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}
 800ac0e:	bf00      	nop
 800ac10:	40006400 	.word	0x40006400
 800ac14:	40021000 	.word	0x40021000
 800ac18:	48000c00 	.word	0x48000c00

0800ac1c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800ac1c:	b480      	push	{r7}
 800ac1e:	b083      	sub	sp, #12
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	4a08      	ldr	r2, [pc, #32]	; (800ac4c <HAL_RTC_MspInit+0x30>)
 800ac2a:	4293      	cmp	r3, r2
 800ac2c:	d107      	bne.n	800ac3e <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800ac2e:	4b08      	ldr	r3, [pc, #32]	; (800ac50 <HAL_RTC_MspInit+0x34>)
 800ac30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac34:	4a06      	ldr	r2, [pc, #24]	; (800ac50 <HAL_RTC_MspInit+0x34>)
 800ac36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800ac3e:	bf00      	nop
 800ac40:	370c      	adds	r7, #12
 800ac42:	46bd      	mov	sp, r7
 800ac44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac48:	4770      	bx	lr
 800ac4a:	bf00      	nop
 800ac4c:	40002800 	.word	0x40002800
 800ac50:	40021000 	.word	0x40021000

0800ac54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b08a      	sub	sp, #40	; 0x28
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ac5c:	f107 0314 	add.w	r3, r7, #20
 800ac60:	2200      	movs	r2, #0
 800ac62:	601a      	str	r2, [r3, #0]
 800ac64:	605a      	str	r2, [r3, #4]
 800ac66:	609a      	str	r2, [r3, #8]
 800ac68:	60da      	str	r2, [r3, #12]
 800ac6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	4a17      	ldr	r2, [pc, #92]	; (800acd0 <HAL_SPI_MspInit+0x7c>)
 800ac72:	4293      	cmp	r3, r2
 800ac74:	d128      	bne.n	800acc8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800ac76:	4b17      	ldr	r3, [pc, #92]	; (800acd4 <HAL_SPI_MspInit+0x80>)
 800ac78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac7a:	4a16      	ldr	r2, [pc, #88]	; (800acd4 <HAL_SPI_MspInit+0x80>)
 800ac7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ac80:	6613      	str	r3, [r2, #96]	; 0x60
 800ac82:	4b14      	ldr	r3, [pc, #80]	; (800acd4 <HAL_SPI_MspInit+0x80>)
 800ac84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ac8a:	613b      	str	r3, [r7, #16]
 800ac8c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ac8e:	4b11      	ldr	r3, [pc, #68]	; (800acd4 <HAL_SPI_MspInit+0x80>)
 800ac90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac92:	4a10      	ldr	r2, [pc, #64]	; (800acd4 <HAL_SPI_MspInit+0x80>)
 800ac94:	f043 0301 	orr.w	r3, r3, #1
 800ac98:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ac9a:	4b0e      	ldr	r3, [pc, #56]	; (800acd4 <HAL_SPI_MspInit+0x80>)
 800ac9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac9e:	f003 0301 	and.w	r3, r3, #1
 800aca2:	60fb      	str	r3, [r7, #12]
 800aca4:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800aca6:	23f0      	movs	r3, #240	; 0xf0
 800aca8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800acaa:	2302      	movs	r3, #2
 800acac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800acae:	2300      	movs	r3, #0
 800acb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800acb2:	2300      	movs	r3, #0
 800acb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800acb6:	2305      	movs	r3, #5
 800acb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800acba:	f107 0314 	add.w	r3, r7, #20
 800acbe:	4619      	mov	r1, r3
 800acc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800acc4:	f7f7 fa06 	bl	80020d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800acc8:	bf00      	nop
 800acca:	3728      	adds	r7, #40	; 0x28
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}
 800acd0:	40013000 	.word	0x40013000
 800acd4:	40021000 	.word	0x40021000

0800acd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800acd8:	b480      	push	{r7}
 800acda:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800acdc:	bf00      	nop
 800acde:	46bd      	mov	sp, r7
 800ace0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace4:	4770      	bx	lr

0800ace6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ace6:	b480      	push	{r7}
 800ace8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800acea:	e7fe      	b.n	800acea <HardFault_Handler+0x4>

0800acec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800acec:	b480      	push	{r7}
 800acee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800acf0:	e7fe      	b.n	800acf0 <MemManage_Handler+0x4>

0800acf2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800acf2:	b480      	push	{r7}
 800acf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800acf6:	e7fe      	b.n	800acf6 <BusFault_Handler+0x4>

0800acf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800acf8:	b480      	push	{r7}
 800acfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800acfc:	e7fe      	b.n	800acfc <UsageFault_Handler+0x4>

0800acfe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800acfe:	b480      	push	{r7}
 800ad00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ad02:	bf00      	nop
 800ad04:	46bd      	mov	sp, r7
 800ad06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0a:	4770      	bx	lr

0800ad0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800ad10:	f7f5 fb02 	bl	8000318 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800ad14:	f7fd ff5e 	bl	8008bd4 <xTaskGetSchedulerState>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	2b01      	cmp	r3, #1
 800ad1c:	d001      	beq.n	800ad22 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800ad1e:	f7fe fcf3 	bl	8009708 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800ad22:	bf00      	nop
 800ad24:	bd80      	pop	{r7, pc}
	...

0800ad28 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800ad2c:	4802      	ldr	r0, [pc, #8]	; (800ad38 <USB_LP_IRQHandler+0x10>)
 800ad2e:	f7f7 fc48 	bl	80025c2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800ad32:	bf00      	nop
 800ad34:	bd80      	pop	{r7, pc}
 800ad36:	bf00      	nop
 800ad38:	20003808 	.word	0x20003808

0800ad3c <COMP1_2_3_IRQHandler>:

/**
  * @brief This function handles COMP1, COMP2 and COMP3 interrupts through EXTI lines 21, 22 and 29.
  */
void COMP1_2_3_IRQHandler(void)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP1_2_3_IRQn 0 */

  /* USER CODE END COMP1_2_3_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 800ad40:	4805      	ldr	r0, [pc, #20]	; (800ad58 <COMP1_2_3_IRQHandler+0x1c>)
 800ad42:	f7f6 fe73 	bl	8001a2c <HAL_COMP_IRQHandler>
  HAL_COMP_IRQHandler(&hcomp2);
 800ad46:	4805      	ldr	r0, [pc, #20]	; (800ad5c <COMP1_2_3_IRQHandler+0x20>)
 800ad48:	f7f6 fe70 	bl	8001a2c <HAL_COMP_IRQHandler>
  HAL_COMP_IRQHandler(&hcomp3);
 800ad4c:	4804      	ldr	r0, [pc, #16]	; (800ad60 <COMP1_2_3_IRQHandler+0x24>)
 800ad4e:	f7f6 fe6d 	bl	8001a2c <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP1_2_3_IRQn 1 */

  /* USER CODE END COMP1_2_3_IRQn 1 */
}
 800ad52:	bf00      	nop
 800ad54:	bd80      	pop	{r7, pc}
 800ad56:	bf00      	nop
 800ad58:	20002280 	.word	0x20002280
 800ad5c:	2000242c 	.word	0x2000242c
 800ad60:	20002450 	.word	0x20002450

0800ad64 <COMP4_5_6_IRQHandler>:

/**
  * @brief This function handles COMP4, COMP5 and COMP6 interrupts through EXTI lines 30, 31 and 32.
  */
void COMP4_5_6_IRQHandler(void)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP4_5_6_IRQn 0 */

  /* USER CODE END COMP4_5_6_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp4);
 800ad68:	4802      	ldr	r0, [pc, #8]	; (800ad74 <COMP4_5_6_IRQHandler+0x10>)
 800ad6a:	f7f6 fe5f 	bl	8001a2c <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP4_5_6_IRQn 1 */

  /* USER CODE END COMP4_5_6_IRQn 1 */
}
 800ad6e:	bf00      	nop
 800ad70:	bd80      	pop	{r7, pc}
 800ad72:	bf00      	nop
 800ad74:	200022a4 	.word	0x200022a4

0800ad78 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800ad78:	b480      	push	{r7}
 800ad7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800ad7c:	4b08      	ldr	r3, [pc, #32]	; (800ada0 <SystemInit+0x28>)
 800ad7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad82:	4a07      	ldr	r2, [pc, #28]	; (800ada0 <SystemInit+0x28>)
 800ad84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ad88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800ad8c:	4b04      	ldr	r3, [pc, #16]	; (800ada0 <SystemInit+0x28>)
 800ad8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ad92:	609a      	str	r2, [r3, #8]
#endif
}
 800ad94:	bf00      	nop
 800ad96:	46bd      	mov	sp, r7
 800ad98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9c:	4770      	bx	lr
 800ad9e:	bf00      	nop
 800ada0:	e000ed00 	.word	0xe000ed00

0800ada4 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */
  
  /* USER CODE END USB_Device_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800ada8:	2200      	movs	r2, #0
 800adaa:	4912      	ldr	r1, [pc, #72]	; (800adf4 <MX_USB_Device_Init+0x50>)
 800adac:	4812      	ldr	r0, [pc, #72]	; (800adf8 <MX_USB_Device_Init+0x54>)
 800adae:	f7fb f8f2 	bl	8005f96 <USBD_Init>
 800adb2:	4603      	mov	r3, r0
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d001      	beq.n	800adbc <MX_USB_Device_Init+0x18>
    Error_Handler();
 800adb8:	f7ff fc7a 	bl	800a6b0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800adbc:	490f      	ldr	r1, [pc, #60]	; (800adfc <MX_USB_Device_Init+0x58>)
 800adbe:	480e      	ldr	r0, [pc, #56]	; (800adf8 <MX_USB_Device_Init+0x54>)
 800adc0:	f7fb f914 	bl	8005fec <USBD_RegisterClass>
 800adc4:	4603      	mov	r3, r0
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d001      	beq.n	800adce <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800adca:	f7ff fc71 	bl	800a6b0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800adce:	490c      	ldr	r1, [pc, #48]	; (800ae00 <MX_USB_Device_Init+0x5c>)
 800add0:	4809      	ldr	r0, [pc, #36]	; (800adf8 <MX_USB_Device_Init+0x54>)
 800add2:	f7fb f871 	bl	8005eb8 <USBD_CDC_RegisterInterface>
 800add6:	4603      	mov	r3, r0
 800add8:	2b00      	cmp	r3, #0
 800adda:	d001      	beq.n	800ade0 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800addc:	f7ff fc68 	bl	800a6b0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800ade0:	4805      	ldr	r0, [pc, #20]	; (800adf8 <MX_USB_Device_Init+0x54>)
 800ade2:	f7fb f91d 	bl	8006020 <USBD_Start>
 800ade6:	4603      	mov	r3, r0
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d001      	beq.n	800adf0 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800adec:	f7ff fc60 	bl	800a6b0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */
  
  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800adf0:	bf00      	nop
 800adf2:	bd80      	pop	{r7, pc}
 800adf4:	20000130 	.word	0x20000130
 800adf8:	20002544 	.word	0x20002544
 800adfc:	20000014 	.word	0x20000014
 800ae00:	20000120 	.word	0x20000120

0800ae04 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ae08:	2200      	movs	r2, #0
 800ae0a:	4905      	ldr	r1, [pc, #20]	; (800ae20 <CDC_Init_FS+0x1c>)
 800ae0c:	4805      	ldr	r0, [pc, #20]	; (800ae24 <CDC_Init_FS+0x20>)
 800ae0e:	f7fb f86a 	bl	8005ee6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ae12:	4905      	ldr	r1, [pc, #20]	; (800ae28 <CDC_Init_FS+0x24>)
 800ae14:	4803      	ldr	r0, [pc, #12]	; (800ae24 <CDC_Init_FS+0x20>)
 800ae16:	f7fb f880 	bl	8005f1a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ae1a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	bd80      	pop	{r7, pc}
 800ae20:	20003008 	.word	0x20003008
 800ae24:	20002544 	.word	0x20002544
 800ae28:	20002808 	.word	0x20002808

0800ae2c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ae30:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ae32:	4618      	mov	r0, r3
 800ae34:	46bd      	mov	sp, r7
 800ae36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3a:	4770      	bx	lr

0800ae3c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ae3c:	b480      	push	{r7}
 800ae3e:	b083      	sub	sp, #12
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	4603      	mov	r3, r0
 800ae44:	6039      	str	r1, [r7, #0]
 800ae46:	71fb      	strb	r3, [r7, #7]
 800ae48:	4613      	mov	r3, r2
 800ae4a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ae4c:	79fb      	ldrb	r3, [r7, #7]
 800ae4e:	2b23      	cmp	r3, #35	; 0x23
 800ae50:	d84a      	bhi.n	800aee8 <CDC_Control_FS+0xac>
 800ae52:	a201      	add	r2, pc, #4	; (adr r2, 800ae58 <CDC_Control_FS+0x1c>)
 800ae54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae58:	0800aee9 	.word	0x0800aee9
 800ae5c:	0800aee9 	.word	0x0800aee9
 800ae60:	0800aee9 	.word	0x0800aee9
 800ae64:	0800aee9 	.word	0x0800aee9
 800ae68:	0800aee9 	.word	0x0800aee9
 800ae6c:	0800aee9 	.word	0x0800aee9
 800ae70:	0800aee9 	.word	0x0800aee9
 800ae74:	0800aee9 	.word	0x0800aee9
 800ae78:	0800aee9 	.word	0x0800aee9
 800ae7c:	0800aee9 	.word	0x0800aee9
 800ae80:	0800aee9 	.word	0x0800aee9
 800ae84:	0800aee9 	.word	0x0800aee9
 800ae88:	0800aee9 	.word	0x0800aee9
 800ae8c:	0800aee9 	.word	0x0800aee9
 800ae90:	0800aee9 	.word	0x0800aee9
 800ae94:	0800aee9 	.word	0x0800aee9
 800ae98:	0800aee9 	.word	0x0800aee9
 800ae9c:	0800aee9 	.word	0x0800aee9
 800aea0:	0800aee9 	.word	0x0800aee9
 800aea4:	0800aee9 	.word	0x0800aee9
 800aea8:	0800aee9 	.word	0x0800aee9
 800aeac:	0800aee9 	.word	0x0800aee9
 800aeb0:	0800aee9 	.word	0x0800aee9
 800aeb4:	0800aee9 	.word	0x0800aee9
 800aeb8:	0800aee9 	.word	0x0800aee9
 800aebc:	0800aee9 	.word	0x0800aee9
 800aec0:	0800aee9 	.word	0x0800aee9
 800aec4:	0800aee9 	.word	0x0800aee9
 800aec8:	0800aee9 	.word	0x0800aee9
 800aecc:	0800aee9 	.word	0x0800aee9
 800aed0:	0800aee9 	.word	0x0800aee9
 800aed4:	0800aee9 	.word	0x0800aee9
 800aed8:	0800aee9 	.word	0x0800aee9
 800aedc:	0800aee9 	.word	0x0800aee9
 800aee0:	0800aee9 	.word	0x0800aee9
 800aee4:	0800aee9 	.word	0x0800aee9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800aee8:	bf00      	nop
  }

  return (USBD_OK);
 800aeea:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	370c      	adds	r7, #12
 800aef0:	46bd      	mov	sp, r7
 800aef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef6:	4770      	bx	lr

0800aef8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b082      	sub	sp, #8
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
 800af00:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800af02:	6879      	ldr	r1, [r7, #4]
 800af04:	4805      	ldr	r0, [pc, #20]	; (800af1c <CDC_Receive_FS+0x24>)
 800af06:	f7fb f808 	bl	8005f1a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800af0a:	4804      	ldr	r0, [pc, #16]	; (800af1c <CDC_Receive_FS+0x24>)
 800af0c:	f7fb f819 	bl	8005f42 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800af10:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800af12:	4618      	mov	r0, r3
 800af14:	3708      	adds	r7, #8
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}
 800af1a:	bf00      	nop
 800af1c:	20002544 	.word	0x20002544

0800af20 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b084      	sub	sp, #16
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	4a0d      	ldr	r2, [pc, #52]	; (800af64 <HAL_PCD_MspInit+0x44>)
 800af2e:	4293      	cmp	r3, r2
 800af30:	d113      	bne.n	800af5a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800af32:	4b0d      	ldr	r3, [pc, #52]	; (800af68 <HAL_PCD_MspInit+0x48>)
 800af34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af36:	4a0c      	ldr	r2, [pc, #48]	; (800af68 <HAL_PCD_MspInit+0x48>)
 800af38:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800af3c:	6593      	str	r3, [r2, #88]	; 0x58
 800af3e:	4b0a      	ldr	r3, [pc, #40]	; (800af68 <HAL_PCD_MspInit+0x48>)
 800af40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800af46:	60fb      	str	r3, [r7, #12]
 800af48:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 800af4a:	2200      	movs	r2, #0
 800af4c:	2105      	movs	r1, #5
 800af4e:	2014      	movs	r0, #20
 800af50:	f7f6 fec5 	bl	8001cde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800af54:	2014      	movs	r0, #20
 800af56:	f7f6 fedc 	bl	8001d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800af5a:	bf00      	nop
 800af5c:	3710      	adds	r7, #16
 800af5e:	46bd      	mov	sp, r7
 800af60:	bd80      	pop	{r7, pc}
 800af62:	bf00      	nop
 800af64:	40005c00 	.word	0x40005c00
 800af68:	40021000 	.word	0x40021000

0800af6c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b082      	sub	sp, #8
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */
  
  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);  
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800af80:	4619      	mov	r1, r3
 800af82:	4610      	mov	r0, r2
 800af84:	f7fb f895 	bl	80060b2 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */
  
  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800af88:	bf00      	nop
 800af8a:	3708      	adds	r7, #8
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}

0800af90 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b082      	sub	sp, #8
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
 800af98:	460b      	mov	r3, r1
 800af9a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);  
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 800afa2:	78fb      	ldrb	r3, [r7, #3]
 800afa4:	687a      	ldr	r2, [r7, #4]
 800afa6:	015b      	lsls	r3, r3, #5
 800afa8:	4413      	add	r3, r2
 800afaa:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800afae:	681a      	ldr	r2, [r3, #0]
 800afb0:	78fb      	ldrb	r3, [r7, #3]
 800afb2:	4619      	mov	r1, r3
 800afb4:	f7fb f8c8 	bl	8006148 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800afb8:	bf00      	nop
 800afba:	3708      	adds	r7, #8
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}

0800afc0 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b082      	sub	sp, #8
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
 800afc8:	460b      	mov	r3, r1
 800afca:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */  
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);  
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 800afd2:	78fb      	ldrb	r3, [r7, #3]
 800afd4:	687a      	ldr	r2, [r7, #4]
 800afd6:	015b      	lsls	r3, r3, #5
 800afd8:	4413      	add	r3, r2
 800afda:	333c      	adds	r3, #60	; 0x3c
 800afdc:	681a      	ldr	r2, [r3, #0]
 800afde:	78fb      	ldrb	r3, [r7, #3]
 800afe0:	4619      	mov	r1, r3
 800afe2:	f7fb f922 	bl	800622a <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */
  
  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800afe6:	bf00      	nop
 800afe8:	3708      	adds	r7, #8
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}

0800afee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afee:	b580      	push	{r7, lr}
 800aff0:	b082      	sub	sp, #8
 800aff2:	af00      	add	r7, sp, #0
 800aff4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */  
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);  
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800affc:	4618      	mov	r0, r3
 800affe:	f7fb fa35 	bl	800646c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800b002:	bf00      	nop
 800b004:	3708      	adds	r7, #8
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}

0800b00a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800b00a:	b580      	push	{r7, lr}
 800b00c:	b084      	sub	sp, #16
 800b00e:	af00      	add	r7, sp, #0
 800b010:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b012:	2301      	movs	r3, #1
 800b014:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	689b      	ldr	r3, [r3, #8]
 800b01a:	2b02      	cmp	r3, #2
 800b01c:	d001      	beq.n	800b022 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b01e:	f7ff fb47 	bl	800a6b0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b028:	7bfa      	ldrb	r2, [r7, #15]
 800b02a:	4611      	mov	r1, r2
 800b02c:	4618      	mov	r0, r3
 800b02e:	f7fb f9e2 	bl	80063f6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b038:	4618      	mov	r0, r3
 800b03a:	f7fb f99b 	bl	8006374 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800b03e:	bf00      	nop
 800b040:	3710      	adds	r7, #16
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}
	...

0800b048 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b082      	sub	sp, #8
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b056:	4618      	mov	r0, r3
 800b058:	f7fb f9dd 	bl	8006416 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	699b      	ldr	r3, [r3, #24]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d005      	beq.n	800b070 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b064:	4b04      	ldr	r3, [pc, #16]	; (800b078 <HAL_PCD_SuspendCallback+0x30>)
 800b066:	691b      	ldr	r3, [r3, #16]
 800b068:	4a03      	ldr	r2, [pc, #12]	; (800b078 <HAL_PCD_SuspendCallback+0x30>)
 800b06a:	f043 0306 	orr.w	r3, r3, #6
 800b06e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800b070:	bf00      	nop
 800b072:	3708      	adds	r7, #8
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}
 800b078:	e000ed00 	.word	0xe000ed00

0800b07c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b082      	sub	sp, #8
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	699b      	ldr	r3, [r3, #24]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d007      	beq.n	800b09c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b08c:	4b08      	ldr	r3, [pc, #32]	; (800b0b0 <HAL_PCD_ResumeCallback+0x34>)
 800b08e:	691b      	ldr	r3, [r3, #16]
 800b090:	4a07      	ldr	r2, [pc, #28]	; (800b0b0 <HAL_PCD_ResumeCallback+0x34>)
 800b092:	f023 0306 	bic.w	r3, r3, #6
 800b096:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b098:	f000 f9f6 	bl	800b488 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
 
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	f7fb f9cc 	bl	8006440 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800b0a8:	bf00      	nop
 800b0aa:	3708      	adds	r7, #8
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bd80      	pop	{r7, pc}
 800b0b0:	e000ed00 	.word	0xe000ed00

0800b0b4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b082      	sub	sp, #8
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800b0bc:	4a2b      	ldr	r2, [pc, #172]	; (800b16c <USBD_LL_Init+0xb8>)
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	4a29      	ldr	r2, [pc, #164]	; (800b16c <USBD_LL_Init+0xb8>)
 800b0c8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800b0cc:	4b27      	ldr	r3, [pc, #156]	; (800b16c <USBD_LL_Init+0xb8>)
 800b0ce:	4a28      	ldr	r2, [pc, #160]	; (800b170 <USBD_LL_Init+0xbc>)
 800b0d0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b0d2:	4b26      	ldr	r3, [pc, #152]	; (800b16c <USBD_LL_Init+0xb8>)
 800b0d4:	2208      	movs	r2, #8
 800b0d6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b0d8:	4b24      	ldr	r3, [pc, #144]	; (800b16c <USBD_LL_Init+0xb8>)
 800b0da:	2202      	movs	r2, #2
 800b0dc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b0de:	4b23      	ldr	r3, [pc, #140]	; (800b16c <USBD_LL_Init+0xb8>)
 800b0e0:	2202      	movs	r2, #2
 800b0e2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800b0e4:	4b21      	ldr	r3, [pc, #132]	; (800b16c <USBD_LL_Init+0xb8>)
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b0ea:	4b20      	ldr	r3, [pc, #128]	; (800b16c <USBD_LL_Init+0xb8>)
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b0f0:	4b1e      	ldr	r3, [pc, #120]	; (800b16c <USBD_LL_Init+0xb8>)
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b0f6:	4b1d      	ldr	r3, [pc, #116]	; (800b16c <USBD_LL_Init+0xb8>)
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b0fc:	481b      	ldr	r0, [pc, #108]	; (800b16c <USBD_LL_Init+0xb8>)
 800b0fe:	f7f7 f983 	bl	8002408 <HAL_PCD_Init>
 800b102:	4603      	mov	r3, r0
 800b104:	2b00      	cmp	r3, #0
 800b106:	d001      	beq.n	800b10c <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800b108:	f7ff fad2 	bl	800a6b0 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */
  
  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b112:	2318      	movs	r3, #24
 800b114:	2200      	movs	r2, #0
 800b116:	2100      	movs	r1, #0
 800b118:	f7f8 f830 	bl	800317c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b122:	2358      	movs	r3, #88	; 0x58
 800b124:	2200      	movs	r2, #0
 800b126:	2180      	movs	r1, #128	; 0x80
 800b128:	f7f8 f828 	bl	800317c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b132:	23c0      	movs	r3, #192	; 0xc0
 800b134:	2200      	movs	r2, #0
 800b136:	2181      	movs	r1, #129	; 0x81
 800b138:	f7f8 f820 	bl	800317c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b142:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b146:	2200      	movs	r2, #0
 800b148:	2101      	movs	r1, #1
 800b14a:	f7f8 f817 	bl	800317c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b154:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b158:	2200      	movs	r2, #0
 800b15a:	2182      	movs	r1, #130	; 0x82
 800b15c:	f7f8 f80e 	bl	800317c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b160:	2300      	movs	r3, #0
}
 800b162:	4618      	mov	r0, r3
 800b164:	3708      	adds	r7, #8
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}
 800b16a:	bf00      	nop
 800b16c:	20003808 	.word	0x20003808
 800b170:	40005c00 	.word	0x40005c00

0800b174 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b084      	sub	sp, #16
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b17c:	2300      	movs	r3, #0
 800b17e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b180:	2300      	movs	r3, #0
 800b182:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b18a:	4618      	mov	r0, r3
 800b18c:	f7f7 f9f7 	bl	800257e <HAL_PCD_Start>
 800b190:	4603      	mov	r3, r0
 800b192:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b194:	7bfb      	ldrb	r3, [r7, #15]
 800b196:	4618      	mov	r0, r3
 800b198:	f000 f97c 	bl	800b494 <USBD_Get_USB_Status>
 800b19c:	4603      	mov	r3, r0
 800b19e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800b1a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3710      	adds	r7, #16
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}

0800b1aa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b1aa:	b580      	push	{r7, lr}
 800b1ac:	b084      	sub	sp, #16
 800b1ae:	af00      	add	r7, sp, #0
 800b1b0:	6078      	str	r0, [r7, #4]
 800b1b2:	4608      	mov	r0, r1
 800b1b4:	4611      	mov	r1, r2
 800b1b6:	461a      	mov	r2, r3
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	70fb      	strb	r3, [r7, #3]
 800b1bc:	460b      	mov	r3, r1
 800b1be:	70bb      	strb	r3, [r7, #2]
 800b1c0:	4613      	mov	r3, r2
 800b1c2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b1d2:	78bb      	ldrb	r3, [r7, #2]
 800b1d4:	883a      	ldrh	r2, [r7, #0]
 800b1d6:	78f9      	ldrb	r1, [r7, #3]
 800b1d8:	f7f7 fb71 	bl	80028be <HAL_PCD_EP_Open>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1e0:	7bfb      	ldrb	r3, [r7, #15]
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f000 f956 	bl	800b494 <USBD_Get_USB_Status>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800b1ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	3710      	adds	r7, #16
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}

0800b1f6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b1f6:	b580      	push	{r7, lr}
 800b1f8:	b084      	sub	sp, #16
 800b1fa:	af00      	add	r7, sp, #0
 800b1fc:	6078      	str	r0, [r7, #4]
 800b1fe:	460b      	mov	r3, r1
 800b200:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b202:	2300      	movs	r3, #0
 800b204:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b206:	2300      	movs	r3, #0
 800b208:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b210:	78fa      	ldrb	r2, [r7, #3]
 800b212:	4611      	mov	r1, r2
 800b214:	4618      	mov	r0, r3
 800b216:	f7f7 fbb2 	bl	800297e <HAL_PCD_EP_Close>
 800b21a:	4603      	mov	r3, r0
 800b21c:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b21e:	7bfb      	ldrb	r3, [r7, #15]
 800b220:	4618      	mov	r0, r3
 800b222:	f000 f937 	bl	800b494 <USBD_Get_USB_Status>
 800b226:	4603      	mov	r3, r0
 800b228:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 800b22a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b22c:	4618      	mov	r0, r3
 800b22e:	3710      	adds	r7, #16
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}

0800b234 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b084      	sub	sp, #16
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
 800b23c:	460b      	mov	r3, r1
 800b23e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b240:	2300      	movs	r3, #0
 800b242:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b244:	2300      	movs	r3, #0
 800b246:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b24e:	78fa      	ldrb	r2, [r7, #3]
 800b250:	4611      	mov	r1, r2
 800b252:	4618      	mov	r0, r3
 800b254:	f7f7 fc5d 	bl	8002b12 <HAL_PCD_EP_SetStall>
 800b258:	4603      	mov	r3, r0
 800b25a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b25c:	7bfb      	ldrb	r3, [r7, #15]
 800b25e:	4618      	mov	r0, r3
 800b260:	f000 f918 	bl	800b494 <USBD_Get_USB_Status>
 800b264:	4603      	mov	r3, r0
 800b266:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800b268:	7bbb      	ldrb	r3, [r7, #14]
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	3710      	adds	r7, #16
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}

0800b272 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b272:	b580      	push	{r7, lr}
 800b274:	b084      	sub	sp, #16
 800b276:	af00      	add	r7, sp, #0
 800b278:	6078      	str	r0, [r7, #4]
 800b27a:	460b      	mov	r3, r1
 800b27c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b27e:	2300      	movs	r3, #0
 800b280:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b282:	2300      	movs	r3, #0
 800b284:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b28c:	78fa      	ldrb	r2, [r7, #3]
 800b28e:	4611      	mov	r1, r2
 800b290:	4618      	mov	r0, r3
 800b292:	f7f7 fc98 	bl	8002bc6 <HAL_PCD_EP_ClrStall>
 800b296:	4603      	mov	r3, r0
 800b298:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b29a:	7bfb      	ldrb	r3, [r7, #15]
 800b29c:	4618      	mov	r0, r3
 800b29e:	f000 f8f9 	bl	800b494 <USBD_Get_USB_Status>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 800b2a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	3710      	adds	r7, #16
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bd80      	pop	{r7, pc}

0800b2b0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	b085      	sub	sp, #20
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
 800b2b8:	460b      	mov	r3, r1
 800b2ba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b2c2:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800b2c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	da08      	bge.n	800b2de <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800b2cc:	78fb      	ldrb	r3, [r7, #3]
 800b2ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2d2:	68fa      	ldr	r2, [r7, #12]
 800b2d4:	015b      	lsls	r3, r3, #5
 800b2d6:	4413      	add	r3, r2
 800b2d8:	332a      	adds	r3, #42	; 0x2a
 800b2da:	781b      	ldrb	r3, [r3, #0]
 800b2dc:	e008      	b.n	800b2f0 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800b2de:	78fb      	ldrb	r3, [r7, #3]
 800b2e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2e4:	68fa      	ldr	r2, [r7, #12]
 800b2e6:	015b      	lsls	r3, r3, #5
 800b2e8:	4413      	add	r3, r2
 800b2ea:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800b2ee:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	3714      	adds	r7, #20
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fa:	4770      	bx	lr

0800b2fc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b084      	sub	sp, #16
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
 800b304:	460b      	mov	r3, r1
 800b306:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b308:	2300      	movs	r3, #0
 800b30a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b30c:	2300      	movs	r3, #0
 800b30e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b316:	78fa      	ldrb	r2, [r7, #3]
 800b318:	4611      	mov	r1, r2
 800b31a:	4618      	mov	r0, r3
 800b31c:	f7f7 faaa 	bl	8002874 <HAL_PCD_SetAddress>
 800b320:	4603      	mov	r3, r0
 800b322:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b324:	7bfb      	ldrb	r3, [r7, #15]
 800b326:	4618      	mov	r0, r3
 800b328:	f000 f8b4 	bl	800b494 <USBD_Get_USB_Status>
 800b32c:	4603      	mov	r3, r0
 800b32e:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800b330:	7bbb      	ldrb	r3, [r7, #14]
}
 800b332:	4618      	mov	r0, r3
 800b334:	3710      	adds	r7, #16
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}

0800b33a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b33a:	b580      	push	{r7, lr}
 800b33c:	b086      	sub	sp, #24
 800b33e:	af00      	add	r7, sp, #0
 800b340:	60f8      	str	r0, [r7, #12]
 800b342:	607a      	str	r2, [r7, #4]
 800b344:	461a      	mov	r2, r3
 800b346:	460b      	mov	r3, r1
 800b348:	72fb      	strb	r3, [r7, #11]
 800b34a:	4613      	mov	r3, r2
 800b34c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b34e:	2300      	movs	r3, #0
 800b350:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b352:	2300      	movs	r3, #0
 800b354:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b35c:	893b      	ldrh	r3, [r7, #8]
 800b35e:	7af9      	ldrb	r1, [r7, #11]
 800b360:	687a      	ldr	r2, [r7, #4]
 800b362:	f7f7 fb9d 	bl	8002aa0 <HAL_PCD_EP_Transmit>
 800b366:	4603      	mov	r3, r0
 800b368:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b36a:	7dfb      	ldrb	r3, [r7, #23]
 800b36c:	4618      	mov	r0, r3
 800b36e:	f000 f891 	bl	800b494 <USBD_Get_USB_Status>
 800b372:	4603      	mov	r3, r0
 800b374:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800b376:	7dbb      	ldrb	r3, [r7, #22]
}
 800b378:	4618      	mov	r0, r3
 800b37a:	3718      	adds	r7, #24
 800b37c:	46bd      	mov	sp, r7
 800b37e:	bd80      	pop	{r7, pc}

0800b380 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b086      	sub	sp, #24
 800b384:	af00      	add	r7, sp, #0
 800b386:	60f8      	str	r0, [r7, #12]
 800b388:	607a      	str	r2, [r7, #4]
 800b38a:	461a      	mov	r2, r3
 800b38c:	460b      	mov	r3, r1
 800b38e:	72fb      	strb	r3, [r7, #11]
 800b390:	4613      	mov	r3, r2
 800b392:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b394:	2300      	movs	r3, #0
 800b396:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b398:	2300      	movs	r3, #0
 800b39a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b3a2:	893b      	ldrh	r3, [r7, #8]
 800b3a4:	7af9      	ldrb	r1, [r7, #11]
 800b3a6:	687a      	ldr	r2, [r7, #4]
 800b3a8:	f7f7 fb2b 	bl	8002a02 <HAL_PCD_EP_Receive>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b3b0:	7dfb      	ldrb	r3, [r7, #23]
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f000 f86e 	bl	800b494 <USBD_Get_USB_Status>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 800b3bc:	7dbb      	ldrb	r3, [r7, #22]
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	3718      	adds	r7, #24
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}

0800b3c6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b3c6:	b580      	push	{r7, lr}
 800b3c8:	b082      	sub	sp, #8
 800b3ca:	af00      	add	r7, sp, #0
 800b3cc:	6078      	str	r0, [r7, #4]
 800b3ce:	460b      	mov	r3, r1
 800b3d0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b3d8:	78fa      	ldrb	r2, [r7, #3]
 800b3da:	4611      	mov	r1, r2
 800b3dc:	4618      	mov	r0, r3
 800b3de:	f7f7 fb4a 	bl	8002a76 <HAL_PCD_EP_GetRxCount>
 800b3e2:	4603      	mov	r3, r0
}
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	3708      	adds	r7, #8
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd80      	pop	{r7, pc}

0800b3ec <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b082      	sub	sp, #8
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
 800b3f4:	460b      	mov	r3, r1
 800b3f6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800b3f8:	78fb      	ldrb	r3, [r7, #3]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d002      	beq.n	800b404 <HAL_PCDEx_LPM_Callback+0x18>
 800b3fe:	2b01      	cmp	r3, #1
 800b400:	d013      	beq.n	800b42a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
  /* USER CODE END LPM_Callback */
}
 800b402:	e023      	b.n	800b44c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	699b      	ldr	r3, [r3, #24]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d007      	beq.n	800b41c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b40c:	f000 f83c 	bl	800b488 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b410:	4b10      	ldr	r3, [pc, #64]	; (800b454 <HAL_PCDEx_LPM_Callback+0x68>)
 800b412:	691b      	ldr	r3, [r3, #16]
 800b414:	4a0f      	ldr	r2, [pc, #60]	; (800b454 <HAL_PCDEx_LPM_Callback+0x68>)
 800b416:	f023 0306 	bic.w	r3, r3, #6
 800b41a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b422:	4618      	mov	r0, r3
 800b424:	f7fb f80c 	bl	8006440 <USBD_LL_Resume>
    break;
 800b428:	e010      	b.n	800b44c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b430:	4618      	mov	r0, r3
 800b432:	f7fa fff0 	bl	8006416 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	699b      	ldr	r3, [r3, #24]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d005      	beq.n	800b44a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b43e:	4b05      	ldr	r3, [pc, #20]	; (800b454 <HAL_PCDEx_LPM_Callback+0x68>)
 800b440:	691b      	ldr	r3, [r3, #16]
 800b442:	4a04      	ldr	r2, [pc, #16]	; (800b454 <HAL_PCDEx_LPM_Callback+0x68>)
 800b444:	f043 0306 	orr.w	r3, r3, #6
 800b448:	6113      	str	r3, [r2, #16]
    break;   
 800b44a:	bf00      	nop
}
 800b44c:	bf00      	nop
 800b44e:	3708      	adds	r7, #8
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}
 800b454:	e000ed00 	.word	0xe000ed00

0800b458 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b458:	b480      	push	{r7}
 800b45a:	b083      	sub	sp, #12
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b460:	4b03      	ldr	r3, [pc, #12]	; (800b470 <USBD_static_malloc+0x18>)
}
 800b462:	4618      	mov	r0, r3
 800b464:	370c      	adds	r7, #12
 800b466:	46bd      	mov	sp, r7
 800b468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46c:	4770      	bx	lr
 800b46e:	bf00      	nop
 800b470:	20001ad8 	.word	0x20001ad8

0800b474 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b474:	b480      	push	{r7}
 800b476:	b083      	sub	sp, #12
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]

}
 800b47c:	bf00      	nop
 800b47e:	370c      	adds	r7, #12
 800b480:	46bd      	mov	sp, r7
 800b482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b486:	4770      	bx	lr

0800b488 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b48c:	f7fe fbf8 	bl	8009c80 <SystemClock_Config>
}
 800b490:	bf00      	nop
 800b492:	bd80      	pop	{r7, pc}

0800b494 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b494:	b480      	push	{r7}
 800b496:	b085      	sub	sp, #20
 800b498:	af00      	add	r7, sp, #0
 800b49a:	4603      	mov	r3, r0
 800b49c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b4a2:	79fb      	ldrb	r3, [r7, #7]
 800b4a4:	2b03      	cmp	r3, #3
 800b4a6:	d817      	bhi.n	800b4d8 <USBD_Get_USB_Status+0x44>
 800b4a8:	a201      	add	r2, pc, #4	; (adr r2, 800b4b0 <USBD_Get_USB_Status+0x1c>)
 800b4aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4ae:	bf00      	nop
 800b4b0:	0800b4c1 	.word	0x0800b4c1
 800b4b4:	0800b4c7 	.word	0x0800b4c7
 800b4b8:	0800b4cd 	.word	0x0800b4cd
 800b4bc:	0800b4d3 	.word	0x0800b4d3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	73fb      	strb	r3, [r7, #15]
    break;
 800b4c4:	e00b      	b.n	800b4de <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b4c6:	2302      	movs	r3, #2
 800b4c8:	73fb      	strb	r3, [r7, #15]
    break;
 800b4ca:	e008      	b.n	800b4de <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	73fb      	strb	r3, [r7, #15]
    break;
 800b4d0:	e005      	b.n	800b4de <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b4d2:	2302      	movs	r3, #2
 800b4d4:	73fb      	strb	r3, [r7, #15]
    break;
 800b4d6:	e002      	b.n	800b4de <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b4d8:	2302      	movs	r3, #2
 800b4da:	73fb      	strb	r3, [r7, #15]
    break;
 800b4dc:	bf00      	nop
  }
  return usb_status;
 800b4de:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	3714      	adds	r7, #20
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ea:	4770      	bx	lr

0800b4ec <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b083      	sub	sp, #12
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	6039      	str	r1, [r7, #0]
 800b4f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	2212      	movs	r2, #18
 800b4fc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800b4fe:	4b03      	ldr	r3, [pc, #12]	; (800b50c <USBD_CDC_DeviceDescriptor+0x20>)
}
 800b500:	4618      	mov	r0, r3
 800b502:	370c      	adds	r7, #12
 800b504:	46bd      	mov	sp, r7
 800b506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50a:	4770      	bx	lr
 800b50c:	20000150 	.word	0x20000150

0800b510 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b510:	b480      	push	{r7}
 800b512:	b083      	sub	sp, #12
 800b514:	af00      	add	r7, sp, #0
 800b516:	4603      	mov	r3, r0
 800b518:	6039      	str	r1, [r7, #0]
 800b51a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	2204      	movs	r2, #4
 800b520:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b522:	4b03      	ldr	r3, [pc, #12]	; (800b530 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800b524:	4618      	mov	r0, r3
 800b526:	370c      	adds	r7, #12
 800b528:	46bd      	mov	sp, r7
 800b52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52e:	4770      	bx	lr
 800b530:	20000164 	.word	0x20000164

0800b534 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b082      	sub	sp, #8
 800b538:	af00      	add	r7, sp, #0
 800b53a:	4603      	mov	r3, r0
 800b53c:	6039      	str	r1, [r7, #0]
 800b53e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b540:	79fb      	ldrb	r3, [r7, #7]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d105      	bne.n	800b552 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b546:	683a      	ldr	r2, [r7, #0]
 800b548:	4907      	ldr	r1, [pc, #28]	; (800b568 <USBD_CDC_ProductStrDescriptor+0x34>)
 800b54a:	4808      	ldr	r0, [pc, #32]	; (800b56c <USBD_CDC_ProductStrDescriptor+0x38>)
 800b54c:	f7fb fd02 	bl	8006f54 <USBD_GetString>
 800b550:	e004      	b.n	800b55c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b552:	683a      	ldr	r2, [r7, #0]
 800b554:	4904      	ldr	r1, [pc, #16]	; (800b568 <USBD_CDC_ProductStrDescriptor+0x34>)
 800b556:	4805      	ldr	r0, [pc, #20]	; (800b56c <USBD_CDC_ProductStrDescriptor+0x38>)
 800b558:	f7fb fcfc 	bl	8006f54 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b55c:	4b02      	ldr	r3, [pc, #8]	; (800b568 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800b55e:	4618      	mov	r0, r3
 800b560:	3708      	adds	r7, #8
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}
 800b566:	bf00      	nop
 800b568:	20003a7c 	.word	0x20003a7c
 800b56c:	0800b864 	.word	0x0800b864

0800b570 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b082      	sub	sp, #8
 800b574:	af00      	add	r7, sp, #0
 800b576:	4603      	mov	r3, r0
 800b578:	6039      	str	r1, [r7, #0]
 800b57a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b57c:	683a      	ldr	r2, [r7, #0]
 800b57e:	4904      	ldr	r1, [pc, #16]	; (800b590 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800b580:	4804      	ldr	r0, [pc, #16]	; (800b594 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800b582:	f7fb fce7 	bl	8006f54 <USBD_GetString>
  return USBD_StrDesc;
 800b586:	4b02      	ldr	r3, [pc, #8]	; (800b590 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800b588:	4618      	mov	r0, r3
 800b58a:	3708      	adds	r7, #8
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}
 800b590:	20003a7c 	.word	0x20003a7c
 800b594:	0800b87c 	.word	0x0800b87c

0800b598 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b082      	sub	sp, #8
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	4603      	mov	r3, r0
 800b5a0:	6039      	str	r1, [r7, #0]
 800b5a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	221a      	movs	r2, #26
 800b5a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b5aa:	f000 f843 	bl	800b634 <Get_SerialNum>
  
  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */
  
  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800b5ae:	4b02      	ldr	r3, [pc, #8]	; (800b5b8 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	3708      	adds	r7, #8
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bd80      	pop	{r7, pc}
 800b5b8:	20000168 	.word	0x20000168

0800b5bc <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b082      	sub	sp, #8
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	6039      	str	r1, [r7, #0]
 800b5c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b5c8:	79fb      	ldrb	r3, [r7, #7]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d105      	bne.n	800b5da <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b5ce:	683a      	ldr	r2, [r7, #0]
 800b5d0:	4907      	ldr	r1, [pc, #28]	; (800b5f0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b5d2:	4808      	ldr	r0, [pc, #32]	; (800b5f4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b5d4:	f7fb fcbe 	bl	8006f54 <USBD_GetString>
 800b5d8:	e004      	b.n	800b5e4 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b5da:	683a      	ldr	r2, [r7, #0]
 800b5dc:	4904      	ldr	r1, [pc, #16]	; (800b5f0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b5de:	4805      	ldr	r0, [pc, #20]	; (800b5f4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b5e0:	f7fb fcb8 	bl	8006f54 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b5e4:	4b02      	ldr	r3, [pc, #8]	; (800b5f0 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	3708      	adds	r7, #8
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd80      	pop	{r7, pc}
 800b5ee:	bf00      	nop
 800b5f0:	20003a7c 	.word	0x20003a7c
 800b5f4:	0800b890 	.word	0x0800b890

0800b5f8 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b082      	sub	sp, #8
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	4603      	mov	r3, r0
 800b600:	6039      	str	r1, [r7, #0]
 800b602:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b604:	79fb      	ldrb	r3, [r7, #7]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d105      	bne.n	800b616 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b60a:	683a      	ldr	r2, [r7, #0]
 800b60c:	4907      	ldr	r1, [pc, #28]	; (800b62c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b60e:	4808      	ldr	r0, [pc, #32]	; (800b630 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b610:	f7fb fca0 	bl	8006f54 <USBD_GetString>
 800b614:	e004      	b.n	800b620 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b616:	683a      	ldr	r2, [r7, #0]
 800b618:	4904      	ldr	r1, [pc, #16]	; (800b62c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b61a:	4805      	ldr	r0, [pc, #20]	; (800b630 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b61c:	f7fb fc9a 	bl	8006f54 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b620:	4b02      	ldr	r3, [pc, #8]	; (800b62c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800b622:	4618      	mov	r0, r3
 800b624:	3708      	adds	r7, #8
 800b626:	46bd      	mov	sp, r7
 800b628:	bd80      	pop	{r7, pc}
 800b62a:	bf00      	nop
 800b62c:	20003a7c 	.word	0x20003a7c
 800b630:	0800b89c 	.word	0x0800b89c

0800b634 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b084      	sub	sp, #16
 800b638:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b63a:	4b0f      	ldr	r3, [pc, #60]	; (800b678 <Get_SerialNum+0x44>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b640:	4b0e      	ldr	r3, [pc, #56]	; (800b67c <Get_SerialNum+0x48>)
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b646:	4b0e      	ldr	r3, [pc, #56]	; (800b680 <Get_SerialNum+0x4c>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b64c:	68fa      	ldr	r2, [r7, #12]
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	4413      	add	r3, r2
 800b652:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d009      	beq.n	800b66e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b65a:	2208      	movs	r2, #8
 800b65c:	4909      	ldr	r1, [pc, #36]	; (800b684 <Get_SerialNum+0x50>)
 800b65e:	68f8      	ldr	r0, [r7, #12]
 800b660:	f000 f814 	bl	800b68c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b664:	2204      	movs	r2, #4
 800b666:	4908      	ldr	r1, [pc, #32]	; (800b688 <Get_SerialNum+0x54>)
 800b668:	68b8      	ldr	r0, [r7, #8]
 800b66a:	f000 f80f 	bl	800b68c <IntToUnicode>
  }
}
 800b66e:	bf00      	nop
 800b670:	3710      	adds	r7, #16
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}
 800b676:	bf00      	nop
 800b678:	1fff7590 	.word	0x1fff7590
 800b67c:	1fff7594 	.word	0x1fff7594
 800b680:	1fff7598 	.word	0x1fff7598
 800b684:	2000016a 	.word	0x2000016a
 800b688:	2000017a 	.word	0x2000017a

0800b68c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b68c:	b480      	push	{r7}
 800b68e:	b087      	sub	sp, #28
 800b690:	af00      	add	r7, sp, #0
 800b692:	60f8      	str	r0, [r7, #12]
 800b694:	60b9      	str	r1, [r7, #8]
 800b696:	4613      	mov	r3, r2
 800b698:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b69a:	2300      	movs	r3, #0
 800b69c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b69e:	2300      	movs	r3, #0
 800b6a0:	75fb      	strb	r3, [r7, #23]
 800b6a2:	e027      	b.n	800b6f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	0f1b      	lsrs	r3, r3, #28
 800b6a8:	2b09      	cmp	r3, #9
 800b6aa:	d80b      	bhi.n	800b6c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	0f1b      	lsrs	r3, r3, #28
 800b6b0:	b2da      	uxtb	r2, r3
 800b6b2:	7dfb      	ldrb	r3, [r7, #23]
 800b6b4:	005b      	lsls	r3, r3, #1
 800b6b6:	4619      	mov	r1, r3
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	440b      	add	r3, r1
 800b6bc:	3230      	adds	r2, #48	; 0x30
 800b6be:	b2d2      	uxtb	r2, r2
 800b6c0:	701a      	strb	r2, [r3, #0]
 800b6c2:	e00a      	b.n	800b6da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	0f1b      	lsrs	r3, r3, #28
 800b6c8:	b2da      	uxtb	r2, r3
 800b6ca:	7dfb      	ldrb	r3, [r7, #23]
 800b6cc:	005b      	lsls	r3, r3, #1
 800b6ce:	4619      	mov	r1, r3
 800b6d0:	68bb      	ldr	r3, [r7, #8]
 800b6d2:	440b      	add	r3, r1
 800b6d4:	3237      	adds	r2, #55	; 0x37
 800b6d6:	b2d2      	uxtb	r2, r2
 800b6d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	011b      	lsls	r3, r3, #4
 800b6de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b6e0:	7dfb      	ldrb	r3, [r7, #23]
 800b6e2:	005b      	lsls	r3, r3, #1
 800b6e4:	3301      	adds	r3, #1
 800b6e6:	68ba      	ldr	r2, [r7, #8]
 800b6e8:	4413      	add	r3, r2
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b6ee:	7dfb      	ldrb	r3, [r7, #23]
 800b6f0:	3301      	adds	r3, #1
 800b6f2:	75fb      	strb	r3, [r7, #23]
 800b6f4:	7dfa      	ldrb	r2, [r7, #23]
 800b6f6:	79fb      	ldrb	r3, [r7, #7]
 800b6f8:	429a      	cmp	r2, r3
 800b6fa:	d3d3      	bcc.n	800b6a4 <IntToUnicode+0x18>
  }
}
 800b6fc:	bf00      	nop
 800b6fe:	371c      	adds	r7, #28
 800b700:	46bd      	mov	sp, r7
 800b702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b706:	4770      	bx	lr

0800b708 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800b708:	b480      	push	{r7}
 800b70a:	b083      	sub	sp, #12
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	4603      	mov	r3, r0
 800b710:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800b712:	4b06      	ldr	r3, [pc, #24]	; (800b72c <USER_initialize+0x24>)
 800b714:	2201      	movs	r2, #1
 800b716:	701a      	strb	r2, [r3, #0]
    return Stat;
 800b718:	4b04      	ldr	r3, [pc, #16]	; (800b72c <USER_initialize+0x24>)
 800b71a:	781b      	ldrb	r3, [r3, #0]
 800b71c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800b71e:	4618      	mov	r0, r3
 800b720:	370c      	adds	r7, #12
 800b722:	46bd      	mov	sp, r7
 800b724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b728:	4770      	bx	lr
 800b72a:	bf00      	nop
 800b72c:	20000182 	.word	0x20000182

0800b730 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800b730:	b480      	push	{r7}
 800b732:	b083      	sub	sp, #12
 800b734:	af00      	add	r7, sp, #0
 800b736:	4603      	mov	r3, r0
 800b738:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800b73a:	4b06      	ldr	r3, [pc, #24]	; (800b754 <USER_status+0x24>)
 800b73c:	2201      	movs	r2, #1
 800b73e:	701a      	strb	r2, [r3, #0]
    return Stat;
 800b740:	4b04      	ldr	r3, [pc, #16]	; (800b754 <USER_status+0x24>)
 800b742:	781b      	ldrb	r3, [r3, #0]
 800b744:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800b746:	4618      	mov	r0, r3
 800b748:	370c      	adds	r7, #12
 800b74a:	46bd      	mov	sp, r7
 800b74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b750:	4770      	bx	lr
 800b752:	bf00      	nop
 800b754:	20000182 	.word	0x20000182

0800b758 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800b758:	b480      	push	{r7}
 800b75a:	b085      	sub	sp, #20
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	60b9      	str	r1, [r7, #8]
 800b760:	607a      	str	r2, [r7, #4]
 800b762:	603b      	str	r3, [r7, #0]
 800b764:	4603      	mov	r3, r0
 800b766:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800b768:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800b76a:	4618      	mov	r0, r3
 800b76c:	3714      	adds	r7, #20
 800b76e:	46bd      	mov	sp, r7
 800b770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b774:	4770      	bx	lr

0800b776 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 800b776:	b480      	push	{r7}
 800b778:	b085      	sub	sp, #20
 800b77a:	af00      	add	r7, sp, #0
 800b77c:	60b9      	str	r1, [r7, #8]
 800b77e:	607a      	str	r2, [r7, #4]
 800b780:	603b      	str	r3, [r7, #0]
 800b782:	4603      	mov	r3, r0
 800b784:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800b786:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800b788:	4618      	mov	r0, r3
 800b78a:	3714      	adds	r7, #20
 800b78c:	46bd      	mov	sp, r7
 800b78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b792:	4770      	bx	lr

0800b794 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800b794:	b480      	push	{r7}
 800b796:	b085      	sub	sp, #20
 800b798:	af00      	add	r7, sp, #0
 800b79a:	4603      	mov	r3, r0
 800b79c:	603a      	str	r2, [r7, #0]
 800b79e:	71fb      	strb	r3, [r7, #7]
 800b7a0:	460b      	mov	r3, r1
 800b7a2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	73fb      	strb	r3, [r7, #15]
    return res;
 800b7a8:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	3714      	adds	r7, #20
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b4:	4770      	bx	lr
	...

0800b7b8 <__libc_init_array>:
 800b7b8:	b570      	push	{r4, r5, r6, lr}
 800b7ba:	4e0d      	ldr	r6, [pc, #52]	; (800b7f0 <__libc_init_array+0x38>)
 800b7bc:	4c0d      	ldr	r4, [pc, #52]	; (800b7f4 <__libc_init_array+0x3c>)
 800b7be:	1ba4      	subs	r4, r4, r6
 800b7c0:	10a4      	asrs	r4, r4, #2
 800b7c2:	2500      	movs	r5, #0
 800b7c4:	42a5      	cmp	r5, r4
 800b7c6:	d109      	bne.n	800b7dc <__libc_init_array+0x24>
 800b7c8:	4e0b      	ldr	r6, [pc, #44]	; (800b7f8 <__libc_init_array+0x40>)
 800b7ca:	4c0c      	ldr	r4, [pc, #48]	; (800b7fc <__libc_init_array+0x44>)
 800b7cc:	f000 f82c 	bl	800b828 <_init>
 800b7d0:	1ba4      	subs	r4, r4, r6
 800b7d2:	10a4      	asrs	r4, r4, #2
 800b7d4:	2500      	movs	r5, #0
 800b7d6:	42a5      	cmp	r5, r4
 800b7d8:	d105      	bne.n	800b7e6 <__libc_init_array+0x2e>
 800b7da:	bd70      	pop	{r4, r5, r6, pc}
 800b7dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b7e0:	4798      	blx	r3
 800b7e2:	3501      	adds	r5, #1
 800b7e4:	e7ee      	b.n	800b7c4 <__libc_init_array+0xc>
 800b7e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b7ea:	4798      	blx	r3
 800b7ec:	3501      	adds	r5, #1
 800b7ee:	e7f2      	b.n	800b7d6 <__libc_init_array+0x1e>
 800b7f0:	0800b8bc 	.word	0x0800b8bc
 800b7f4:	0800b8bc 	.word	0x0800b8bc
 800b7f8:	0800b8bc 	.word	0x0800b8bc
 800b7fc:	0800b8c0 	.word	0x0800b8c0

0800b800 <memcpy>:
 800b800:	b510      	push	{r4, lr}
 800b802:	1e43      	subs	r3, r0, #1
 800b804:	440a      	add	r2, r1
 800b806:	4291      	cmp	r1, r2
 800b808:	d100      	bne.n	800b80c <memcpy+0xc>
 800b80a:	bd10      	pop	{r4, pc}
 800b80c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b810:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b814:	e7f7      	b.n	800b806 <memcpy+0x6>

0800b816 <memset>:
 800b816:	4402      	add	r2, r0
 800b818:	4603      	mov	r3, r0
 800b81a:	4293      	cmp	r3, r2
 800b81c:	d100      	bne.n	800b820 <memset+0xa>
 800b81e:	4770      	bx	lr
 800b820:	f803 1b01 	strb.w	r1, [r3], #1
 800b824:	e7f9      	b.n	800b81a <memset+0x4>
	...

0800b828 <_init>:
 800b828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b82a:	bf00      	nop
 800b82c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b82e:	bc08      	pop	{r3}
 800b830:	469e      	mov	lr, r3
 800b832:	4770      	bx	lr

0800b834 <_fini>:
 800b834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b836:	bf00      	nop
 800b838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b83a:	bc08      	pop	{r3}
 800b83c:	469e      	mov	lr, r3
 800b83e:	4770      	bx	lr
